// Code generated by gocc; DO NOT EDIT.

package parser

type (
	actionTable [numStates]actionRow
	actionRow   struct {
		canRecover bool
		actions    [numSymbols]action
	}
)

var actionTab = actionTable{
	actionRow{ // S0
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			shift(7),  // {
			nil,       // }
			shift(8),  // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			shift(23), // +
			shift(25), // -
			nil,       // product
			shift(28), // (
			nil,       // )
			shift(31), // !
			shift(32), // ~
			shift(37), // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			shift(39), // kwdIf
			nil,       // kwdElse
			shift(40), // kwdFor
			shift(42), // identifier
			shift(51), // kwdNull
			shift(52), // boolLit
			shift(53), // intLit
			shift(54), // floatLit
			shift(55), // stringLit
			shift(56), // kwdFn
		},
	},
	actionRow{ // S1
		canRecover: false,
		actions: [numSymbols]action{
			nil,          // INVALID
			accept(true), // $
			nil,          // terminator
			nil,          // {
			nil,          // }
			nil,          // kwdReturn
			nil,          // ,
			nil,          // :
			nil,          // lOr
			nil,          // lAnd
			nil,          // lNot
			nil,          // equals
			nil,          // lessOrGreater
			nil,          // or
			nil,          // xor
			nil,          // and
			nil,          // shift
			nil,          // +
			nil,          // -
			nil,          // product
			nil,          // (
			nil,          // )
			nil,          // !
			nil,          // ~
			nil,          // [
			nil,          // ]
			nil,          // .
			nil,          // assign
			nil,          // kwdIf
			nil,          // kwdElse
			nil,          // kwdFor
			nil,          // identifier
			nil,          // kwdNull
			nil,          // boolLit
			nil,          // intLit
			nil,          // floatLit
			nil,          // stringLit
			nil,          // kwdFn
		},
	},
	actionRow{ // S2
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(1), // $, reduce: Program
			shift(57), // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S3
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(2), // $, reduce: StatementList
			reduce(2), // terminator, reduce: StatementList
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S4
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(5), // $, reduce: Statement
			reduce(5), // terminator, reduce: Statement
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S5
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(6), // $, reduce: Statement
			reduce(6), // terminator, reduce: Statement
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S6
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(7), // $, reduce: Statement
			reduce(7), // terminator, reduce: Statement
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S7
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(63),  // {
			shift(64),  // }
			shift(65),  // kwdReturn
			shift(67),  // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(85),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(92),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(94),  // kwdIf
			nil,        // kwdElse
			shift(95),  // kwdFor
			shift(97),  // identifier
			shift(106), // kwdNull
			shift(107), // boolLit
			shift(108), // intLit
			shift(109), // floatLit
			shift(110), // stringLit
			shift(111), // kwdFn
		},
	},
	actionRow{ // S8
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(10), // $, reduce: ReturnStatement
			reduce(10), // terminator, reduce: ReturnStatement
			shift(112), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(28),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(37),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(39),  // kwdIf
			nil,        // kwdElse
			shift(40),  // kwdFor
			shift(42),  // identifier
			shift(51),  // kwdNull
			shift(52),  // boolLit
			shift(53),  // intLit
			shift(54),  // floatLit
			shift(55),  // stringLit
			shift(56),  // kwdFn
		},
	},
	actionRow{ // S9
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(12), // $, reduce: ExpressionStatement
			reduce(12), // terminator, reduce: ExpressionStatement
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S10
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(19), // $, reduce: Expression
			reduce(19), // terminator, reduce: Expression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			shift(114), // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S11
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(20), // $, reduce: Expression
			reduce(20), // terminator, reduce: Expression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S12
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(21), // $, reduce: Expression
			reduce(21), // terminator, reduce: Expression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S13
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(22), // $, reduce: Expression
			reduce(22), // terminator, reduce: Expression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S14
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(24), // $, reduce: Term1
			reduce(24), // terminator, reduce: Term1
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(24), // lOr, reduce: Term1
			shift(115), // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S15
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(26), // $, reduce: Term2
			reduce(26), // terminator, reduce: Term2
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(26), // lOr, reduce: Term2
			reduce(26), // lAnd, reduce: Term2
			shift(116), // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S16
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(28), // $, reduce: Term3
			reduce(28), // terminator, reduce: Term3
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(28), // lOr, reduce: Term3
			reduce(28), // lAnd, reduce: Term3
			reduce(28), // lNot, reduce: Term3
			shift(117), // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S17
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(30), // $, reduce: Term4
			reduce(30), // terminator, reduce: Term4
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(30), // lOr, reduce: Term4
			reduce(30), // lAnd, reduce: Term4
			reduce(30), // lNot, reduce: Term4
			reduce(30), // equals, reduce: Term4
			shift(118), // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S18
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(32), // $, reduce: Term5
			reduce(32), // terminator, reduce: Term5
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(32), // lOr, reduce: Term5
			reduce(32), // lAnd, reduce: Term5
			reduce(32), // lNot, reduce: Term5
			reduce(32), // equals, reduce: Term5
			reduce(32), // lessOrGreater, reduce: Term5
			shift(119), // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S19
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(34), // $, reduce: Term6
			reduce(34), // terminator, reduce: Term6
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(34), // lOr, reduce: Term6
			reduce(34), // lAnd, reduce: Term6
			reduce(34), // lNot, reduce: Term6
			reduce(34), // equals, reduce: Term6
			reduce(34), // lessOrGreater, reduce: Term6
			reduce(34), // or, reduce: Term6
			shift(120), // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S20
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(36), // $, reduce: Term7
			reduce(36), // terminator, reduce: Term7
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(36), // lOr, reduce: Term7
			reduce(36), // lAnd, reduce: Term7
			reduce(36), // lNot, reduce: Term7
			reduce(36), // equals, reduce: Term7
			reduce(36), // lessOrGreater, reduce: Term7
			reduce(36), // or, reduce: Term7
			reduce(36), // xor, reduce: Term7
			shift(121), // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S21
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(38), // $, reduce: Term8
			reduce(38), // terminator, reduce: Term8
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(38), // lOr, reduce: Term8
			reduce(38), // lAnd, reduce: Term8
			reduce(38), // lNot, reduce: Term8
			reduce(38), // equals, reduce: Term8
			reduce(38), // lessOrGreater, reduce: Term8
			reduce(38), // or, reduce: Term8
			reduce(38), // xor, reduce: Term8
			reduce(38), // and, reduce: Term8
			shift(122), // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S22
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(40), // $, reduce: Term9
			reduce(40), // terminator, reduce: Term9
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(40), // lOr, reduce: Term9
			reduce(40), // lAnd, reduce: Term9
			reduce(40), // lNot, reduce: Term9
			reduce(40), // equals, reduce: Term9
			reduce(40), // lessOrGreater, reduce: Term9
			reduce(40), // or, reduce: Term9
			reduce(40), // xor, reduce: Term9
			reduce(40), // and, reduce: Term9
			reduce(40), // shift, reduce: Term9
			shift(123), // +
			shift(124), // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S23
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(50), // {, reduce: PrefixOp
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			reduce(50), // +, reduce: PrefixOp
			reduce(50), // -, reduce: PrefixOp
			nil,        // product
			reduce(50), // (, reduce: PrefixOp
			nil,        // )
			reduce(50), // !, reduce: PrefixOp
			reduce(50), // ~, reduce: PrefixOp
			reduce(50), // [, reduce: PrefixOp
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			reduce(50), // identifier, reduce: PrefixOp
			reduce(50), // kwdNull, reduce: PrefixOp
			reduce(50), // boolLit, reduce: PrefixOp
			reduce(50), // intLit, reduce: PrefixOp
			reduce(50), // floatLit, reduce: PrefixOp
			reduce(50), // stringLit, reduce: PrefixOp
			reduce(50), // kwdFn, reduce: PrefixOp
		},
	},
	actionRow{ // S24
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(43), // $, reduce: Term10
			reduce(43), // terminator, reduce: Term10
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(43), // lOr, reduce: Term10
			reduce(43), // lAnd, reduce: Term10
			reduce(43), // lNot, reduce: Term10
			reduce(43), // equals, reduce: Term10
			reduce(43), // lessOrGreater, reduce: Term10
			reduce(43), // or, reduce: Term10
			reduce(43), // xor, reduce: Term10
			reduce(43), // and, reduce: Term10
			reduce(43), // shift, reduce: Term10
			reduce(43), // +, reduce: Term10
			reduce(43), // -, reduce: Term10
			shift(125), // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S25
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(51), // {, reduce: PrefixOp
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			reduce(51), // +, reduce: PrefixOp
			reduce(51), // -, reduce: PrefixOp
			nil,        // product
			reduce(51), // (, reduce: PrefixOp
			nil,        // )
			reduce(51), // !, reduce: PrefixOp
			reduce(51), // ~, reduce: PrefixOp
			reduce(51), // [, reduce: PrefixOp
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			reduce(51), // identifier, reduce: PrefixOp
			reduce(51), // kwdNull, reduce: PrefixOp
			reduce(51), // boolLit, reduce: PrefixOp
			reduce(51), // intLit, reduce: PrefixOp
			reduce(51), // floatLit, reduce: PrefixOp
			reduce(51), // stringLit, reduce: PrefixOp
			reduce(51), // kwdFn, reduce: PrefixOp
		},
	},
	actionRow{ // S26
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(45), // $, reduce: Term11
			reduce(45), // terminator, reduce: Term11
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(45), // lOr, reduce: Term11
			reduce(45), // lAnd, reduce: Term11
			reduce(45), // lNot, reduce: Term11
			reduce(45), // equals, reduce: Term11
			reduce(45), // lessOrGreater, reduce: Term11
			reduce(45), // or, reduce: Term11
			reduce(45), // xor, reduce: Term11
			reduce(45), // and, reduce: Term11
			reduce(45), // shift, reduce: Term11
			reduce(45), // +, reduce: Term11
			reduce(45), // -, reduce: Term11
			reduce(45), // product, reduce: Term11
			shift(126), // (
			nil,        // )
			nil,        // !
			nil,        // ~
			shift(127), // [
			nil,        // ]
			shift(128), // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S27
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(46), // $, reduce: Term12
			reduce(46), // terminator, reduce: Term12
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(46), // lOr, reduce: Term12
			reduce(46), // lAnd, reduce: Term12
			reduce(46), // lNot, reduce: Term12
			reduce(46), // equals, reduce: Term12
			reduce(46), // lessOrGreater, reduce: Term12
			reduce(46), // or, reduce: Term12
			reduce(46), // xor, reduce: Term12
			reduce(46), // and, reduce: Term12
			reduce(46), // shift, reduce: Term12
			reduce(46), // +, reduce: Term12
			reduce(46), // -, reduce: Term12
			reduce(46), // product, reduce: Term12
			reduce(46), // (, reduce: Term12
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(46), // [, reduce: Term12
			nil,        // ]
			reduce(46), // ., reduce: Term12
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S28
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(129), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(147), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(154), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(156), // kwdIf
			nil,        // kwdElse
			shift(157), // kwdFor
			shift(159), // identifier
			shift(168), // kwdNull
			shift(169), // boolLit
			shift(170), // intLit
			shift(171), // floatLit
			shift(172), // stringLit
			shift(173), // kwdFn
		},
	},
	actionRow{ // S29
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(48), // $, reduce: PrefixExpression
			reduce(48), // terminator, reduce: PrefixExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(48), // lOr, reduce: PrefixExpression
			reduce(48), // lAnd, reduce: PrefixExpression
			reduce(48), // lNot, reduce: PrefixExpression
			reduce(48), // equals, reduce: PrefixExpression
			reduce(48), // lessOrGreater, reduce: PrefixExpression
			reduce(48), // or, reduce: PrefixExpression
			reduce(48), // xor, reduce: PrefixExpression
			reduce(48), // and, reduce: PrefixExpression
			reduce(48), // shift, reduce: PrefixExpression
			reduce(48), // +, reduce: PrefixExpression
			reduce(48), // -, reduce: PrefixExpression
			reduce(48), // product, reduce: PrefixExpression
			reduce(48), // (, reduce: PrefixExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(48), // [, reduce: PrefixExpression
			nil,        // ]
			reduce(48), // ., reduce: PrefixExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S30
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(112), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(176), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(37),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(182), // identifier
			shift(51),  // kwdNull
			shift(52),  // boolLit
			shift(53),  // intLit
			shift(54),  // floatLit
			shift(55),  // stringLit
			shift(56),  // kwdFn
		},
	},
	actionRow{ // S31
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(52), // {, reduce: PrefixOp
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			reduce(52), // +, reduce: PrefixOp
			reduce(52), // -, reduce: PrefixOp
			nil,        // product
			reduce(52), // (, reduce: PrefixOp
			nil,        // )
			reduce(52), // !, reduce: PrefixOp
			reduce(52), // ~, reduce: PrefixOp
			reduce(52), // [, reduce: PrefixOp
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			reduce(52), // identifier, reduce: PrefixOp
			reduce(52), // kwdNull, reduce: PrefixOp
			reduce(52), // boolLit, reduce: PrefixOp
			reduce(52), // intLit, reduce: PrefixOp
			reduce(52), // floatLit, reduce: PrefixOp
			reduce(52), // stringLit, reduce: PrefixOp
			reduce(52), // kwdFn, reduce: PrefixOp
		},
	},
	actionRow{ // S32
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(53), // {, reduce: PrefixOp
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			reduce(53), // +, reduce: PrefixOp
			reduce(53), // -, reduce: PrefixOp
			nil,        // product
			reduce(53), // (, reduce: PrefixOp
			nil,        // )
			reduce(53), // !, reduce: PrefixOp
			reduce(53), // ~, reduce: PrefixOp
			reduce(53), // [, reduce: PrefixOp
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			reduce(53), // identifier, reduce: PrefixOp
			reduce(53), // kwdNull, reduce: PrefixOp
			reduce(53), // boolLit, reduce: PrefixOp
			reduce(53), // intLit, reduce: PrefixOp
			reduce(53), // floatLit, reduce: PrefixOp
			reduce(53), // stringLit, reduce: PrefixOp
			reduce(53), // kwdFn, reduce: PrefixOp
		},
	},
	actionRow{ // S33
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(54), // $, reduce: PrimaryExpr
			reduce(54), // terminator, reduce: PrimaryExpr
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(54), // lOr, reduce: PrimaryExpr
			reduce(54), // lAnd, reduce: PrimaryExpr
			reduce(54), // lNot, reduce: PrimaryExpr
			reduce(54), // equals, reduce: PrimaryExpr
			reduce(54), // lessOrGreater, reduce: PrimaryExpr
			reduce(54), // or, reduce: PrimaryExpr
			reduce(54), // xor, reduce: PrimaryExpr
			reduce(54), // and, reduce: PrimaryExpr
			reduce(54), // shift, reduce: PrimaryExpr
			reduce(54), // +, reduce: PrimaryExpr
			reduce(54), // -, reduce: PrimaryExpr
			reduce(54), // product, reduce: PrimaryExpr
			reduce(54), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(54), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(54), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S34
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(55), // $, reduce: PrimaryExpr
			reduce(55), // terminator, reduce: PrimaryExpr
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(55), // lOr, reduce: PrimaryExpr
			reduce(55), // lAnd, reduce: PrimaryExpr
			reduce(55), // lNot, reduce: PrimaryExpr
			reduce(55), // equals, reduce: PrimaryExpr
			reduce(55), // lessOrGreater, reduce: PrimaryExpr
			reduce(55), // or, reduce: PrimaryExpr
			reduce(55), // xor, reduce: PrimaryExpr
			reduce(55), // and, reduce: PrimaryExpr
			reduce(55), // shift, reduce: PrimaryExpr
			reduce(55), // +, reduce: PrimaryExpr
			reduce(55), // -, reduce: PrimaryExpr
			reduce(55), // product, reduce: PrimaryExpr
			reduce(55), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(55), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(55), // ., reduce: PrimaryExpr
			shift(183), // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S35
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(56), // $, reduce: PrimaryExpr
			reduce(56), // terminator, reduce: PrimaryExpr
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(56), // lOr, reduce: PrimaryExpr
			reduce(56), // lAnd, reduce: PrimaryExpr
			reduce(56), // lNot, reduce: PrimaryExpr
			reduce(56), // equals, reduce: PrimaryExpr
			reduce(56), // lessOrGreater, reduce: PrimaryExpr
			reduce(56), // or, reduce: PrimaryExpr
			reduce(56), // xor, reduce: PrimaryExpr
			reduce(56), // and, reduce: PrimaryExpr
			reduce(56), // shift, reduce: PrimaryExpr
			reduce(56), // +, reduce: PrimaryExpr
			reduce(56), // -, reduce: PrimaryExpr
			reduce(56), // product, reduce: PrimaryExpr
			reduce(56), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(56), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(56), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S36
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(57), // $, reduce: PrimaryExpr
			reduce(57), // terminator, reduce: PrimaryExpr
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(57), // lOr, reduce: PrimaryExpr
			reduce(57), // lAnd, reduce: PrimaryExpr
			reduce(57), // lNot, reduce: PrimaryExpr
			reduce(57), // equals, reduce: PrimaryExpr
			reduce(57), // lessOrGreater, reduce: PrimaryExpr
			reduce(57), // or, reduce: PrimaryExpr
			reduce(57), // xor, reduce: PrimaryExpr
			reduce(57), // and, reduce: PrimaryExpr
			reduce(57), // shift, reduce: PrimaryExpr
			reduce(57), // +, reduce: PrimaryExpr
			reduce(57), // -, reduce: PrimaryExpr
			reduce(57), // product, reduce: PrimaryExpr
			reduce(57), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(57), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(57), // ., reduce: PrimaryExpr
			shift(184), // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S37
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(185), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(204), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(211), // [
			shift(212), // ]
			nil,        // .
			nil,        // assign
			shift(214), // kwdIf
			nil,        // kwdElse
			shift(215), // kwdFor
			shift(217), // identifier
			shift(226), // kwdNull
			shift(227), // boolLit
			shift(228), // intLit
			shift(229), // floatLit
			shift(230), // stringLit
			shift(231), // kwdFn
		},
	},
	actionRow{ // S38
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(79), // $, reduce: Operand
			reduce(79), // terminator, reduce: Operand
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(79), // lOr, reduce: Operand
			reduce(79), // lAnd, reduce: Operand
			reduce(79), // lNot, reduce: Operand
			reduce(79), // equals, reduce: Operand
			reduce(79), // lessOrGreater, reduce: Operand
			reduce(79), // or, reduce: Operand
			reduce(79), // xor, reduce: Operand
			reduce(79), // and, reduce: Operand
			reduce(79), // shift, reduce: Operand
			reduce(79), // +, reduce: Operand
			reduce(79), // -, reduce: Operand
			reduce(79), // product, reduce: Operand
			reduce(79), // (, reduce: Operand
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(79), // [, reduce: Operand
			nil,        // ]
			reduce(79), // ., reduce: Operand
			shift(232), // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S39
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(233), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(251), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(258), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(260), // kwdIf
			nil,        // kwdElse
			shift(261), // kwdFor
			shift(263), // identifier
			shift(272), // kwdNull
			shift(273), // boolLit
			shift(274), // intLit
			shift(275), // floatLit
			shift(276), // stringLit
			shift(277), // kwdFn
		},
	},
	actionRow{ // S40
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			shift(278), // terminator
			shift(280), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(298), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(305), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(307), // kwdIf
			nil,        // kwdElse
			shift(308), // kwdFor
			shift(310), // identifier
			shift(319), // kwdNull
			shift(320), // boolLit
			shift(321), // intLit
			shift(322), // floatLit
			shift(323), // stringLit
			shift(324), // kwdFn
		},
	},
	actionRow{ // S41
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(78), // $, reduce: Operand
			reduce(78), // terminator, reduce: Operand
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(78), // lOr, reduce: Operand
			reduce(78), // lAnd, reduce: Operand
			reduce(78), // lNot, reduce: Operand
			reduce(78), // equals, reduce: Operand
			reduce(78), // lessOrGreater, reduce: Operand
			reduce(78), // or, reduce: Operand
			reduce(78), // xor, reduce: Operand
			reduce(78), // and, reduce: Operand
			reduce(78), // shift, reduce: Operand
			reduce(78), // +, reduce: Operand
			reduce(78), // -, reduce: Operand
			reduce(78), // product, reduce: Operand
			reduce(78), // (, reduce: Operand
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(78), // [, reduce: Operand
			nil,        // ]
			reduce(78), // ., reduce: Operand
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S42
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(82), // $, reduce: Identifier
			reduce(82), // terminator, reduce: Identifier
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(82), // lOr, reduce: Identifier
			reduce(82), // lAnd, reduce: Identifier
			reduce(82), // lNot, reduce: Identifier
			reduce(82), // equals, reduce: Identifier
			reduce(82), // lessOrGreater, reduce: Identifier
			reduce(82), // or, reduce: Identifier
			reduce(82), // xor, reduce: Identifier
			reduce(82), // and, reduce: Identifier
			reduce(82), // shift, reduce: Identifier
			reduce(82), // +, reduce: Identifier
			reduce(82), // -, reduce: Identifier
			reduce(82), // product, reduce: Identifier
			reduce(82), // (, reduce: Identifier
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(82), // [, reduce: Identifier
			nil,        // ]
			reduce(82), // ., reduce: Identifier
			reduce(82), // assign, reduce: Identifier
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S43
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(83), // $, reduce: Literal
			reduce(83), // terminator, reduce: Literal
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(83), // lOr, reduce: Literal
			reduce(83), // lAnd, reduce: Literal
			reduce(83), // lNot, reduce: Literal
			reduce(83), // equals, reduce: Literal
			reduce(83), // lessOrGreater, reduce: Literal
			reduce(83), // or, reduce: Literal
			reduce(83), // xor, reduce: Literal
			reduce(83), // and, reduce: Literal
			reduce(83), // shift, reduce: Literal
			reduce(83), // +, reduce: Literal
			reduce(83), // -, reduce: Literal
			reduce(83), // product, reduce: Literal
			reduce(83), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(83), // [, reduce: Literal
			nil,        // ]
			reduce(83), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S44
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(84), // $, reduce: Literal
			reduce(84), // terminator, reduce: Literal
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(84), // lOr, reduce: Literal
			reduce(84), // lAnd, reduce: Literal
			reduce(84), // lNot, reduce: Literal
			reduce(84), // equals, reduce: Literal
			reduce(84), // lessOrGreater, reduce: Literal
			reduce(84), // or, reduce: Literal
			reduce(84), // xor, reduce: Literal
			reduce(84), // and, reduce: Literal
			reduce(84), // shift, reduce: Literal
			reduce(84), // +, reduce: Literal
			reduce(84), // -, reduce: Literal
			reduce(84), // product, reduce: Literal
			reduce(84), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(84), // [, reduce: Literal
			nil,        // ]
			reduce(84), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S45
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(85), // $, reduce: Literal
			reduce(85), // terminator, reduce: Literal
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(85), // lOr, reduce: Literal
			reduce(85), // lAnd, reduce: Literal
			reduce(85), // lNot, reduce: Literal
			reduce(85), // equals, reduce: Literal
			reduce(85), // lessOrGreater, reduce: Literal
			reduce(85), // or, reduce: Literal
			reduce(85), // xor, reduce: Literal
			reduce(85), // and, reduce: Literal
			reduce(85), // shift, reduce: Literal
			reduce(85), // +, reduce: Literal
			reduce(85), // -, reduce: Literal
			reduce(85), // product, reduce: Literal
			reduce(85), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(85), // [, reduce: Literal
			nil,        // ]
			reduce(85), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S46
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(86), // $, reduce: Literal
			reduce(86), // terminator, reduce: Literal
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(86), // lOr, reduce: Literal
			reduce(86), // lAnd, reduce: Literal
			reduce(86), // lNot, reduce: Literal
			reduce(86), // equals, reduce: Literal
			reduce(86), // lessOrGreater, reduce: Literal
			reduce(86), // or, reduce: Literal
			reduce(86), // xor, reduce: Literal
			reduce(86), // and, reduce: Literal
			reduce(86), // shift, reduce: Literal
			reduce(86), // +, reduce: Literal
			reduce(86), // -, reduce: Literal
			reduce(86), // product, reduce: Literal
			reduce(86), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(86), // [, reduce: Literal
			nil,        // ]
			reduce(86), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S47
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(87), // $, reduce: Literal
			reduce(87), // terminator, reduce: Literal
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(87), // lOr, reduce: Literal
			reduce(87), // lAnd, reduce: Literal
			reduce(87), // lNot, reduce: Literal
			reduce(87), // equals, reduce: Literal
			reduce(87), // lessOrGreater, reduce: Literal
			reduce(87), // or, reduce: Literal
			reduce(87), // xor, reduce: Literal
			reduce(87), // and, reduce: Literal
			reduce(87), // shift, reduce: Literal
			reduce(87), // +, reduce: Literal
			reduce(87), // -, reduce: Literal
			reduce(87), // product, reduce: Literal
			reduce(87), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(87), // [, reduce: Literal
			nil,        // ]
			reduce(87), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S48
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(88), // $, reduce: Literal
			reduce(88), // terminator, reduce: Literal
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(88), // lOr, reduce: Literal
			reduce(88), // lAnd, reduce: Literal
			reduce(88), // lNot, reduce: Literal
			reduce(88), // equals, reduce: Literal
			reduce(88), // lessOrGreater, reduce: Literal
			reduce(88), // or, reduce: Literal
			reduce(88), // xor, reduce: Literal
			reduce(88), // and, reduce: Literal
			reduce(88), // shift, reduce: Literal
			reduce(88), // +, reduce: Literal
			reduce(88), // -, reduce: Literal
			reduce(88), // product, reduce: Literal
			reduce(88), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(88), // [, reduce: Literal
			nil,        // ]
			reduce(88), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S49
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(89), // $, reduce: Literal
			reduce(89), // terminator, reduce: Literal
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(89), // lOr, reduce: Literal
			reduce(89), // lAnd, reduce: Literal
			reduce(89), // lNot, reduce: Literal
			reduce(89), // equals, reduce: Literal
			reduce(89), // lessOrGreater, reduce: Literal
			reduce(89), // or, reduce: Literal
			reduce(89), // xor, reduce: Literal
			reduce(89), // and, reduce: Literal
			reduce(89), // shift, reduce: Literal
			reduce(89), // +, reduce: Literal
			reduce(89), // -, reduce: Literal
			reduce(89), // product, reduce: Literal
			reduce(89), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(89), // [, reduce: Literal
			nil,        // ]
			reduce(89), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S50
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(90), // $, reduce: Literal
			reduce(90), // terminator, reduce: Literal
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(90), // lOr, reduce: Literal
			reduce(90), // lAnd, reduce: Literal
			reduce(90), // lNot, reduce: Literal
			reduce(90), // equals, reduce: Literal
			reduce(90), // lessOrGreater, reduce: Literal
			reduce(90), // or, reduce: Literal
			reduce(90), // xor, reduce: Literal
			reduce(90), // and, reduce: Literal
			reduce(90), // shift, reduce: Literal
			reduce(90), // +, reduce: Literal
			reduce(90), // -, reduce: Literal
			reduce(90), // product, reduce: Literal
			reduce(90), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(90), // [, reduce: Literal
			nil,        // ]
			reduce(90), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S51
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(91), // $, reduce: Null
			reduce(91), // terminator, reduce: Null
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(91), // lOr, reduce: Null
			reduce(91), // lAnd, reduce: Null
			reduce(91), // lNot, reduce: Null
			reduce(91), // equals, reduce: Null
			reduce(91), // lessOrGreater, reduce: Null
			reduce(91), // or, reduce: Null
			reduce(91), // xor, reduce: Null
			reduce(91), // and, reduce: Null
			reduce(91), // shift, reduce: Null
			reduce(91), // +, reduce: Null
			reduce(91), // -, reduce: Null
			reduce(91), // product, reduce: Null
			reduce(91), // (, reduce: Null
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(91), // [, reduce: Null
			nil,        // ]
			reduce(91), // ., reduce: Null
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S52
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(92), // $, reduce: BooleanLiteral
			reduce(92), // terminator, reduce: BooleanLiteral
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(92), // lOr, reduce: BooleanLiteral
			reduce(92), // lAnd, reduce: BooleanLiteral
			reduce(92), // lNot, reduce: BooleanLiteral
			reduce(92), // equals, reduce: BooleanLiteral
			reduce(92), // lessOrGreater, reduce: BooleanLiteral
			reduce(92), // or, reduce: BooleanLiteral
			reduce(92), // xor, reduce: BooleanLiteral
			reduce(92), // and, reduce: BooleanLiteral
			reduce(92), // shift, reduce: BooleanLiteral
			reduce(92), // +, reduce: BooleanLiteral
			reduce(92), // -, reduce: BooleanLiteral
			reduce(92), // product, reduce: BooleanLiteral
			reduce(92), // (, reduce: BooleanLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(92), // [, reduce: BooleanLiteral
			nil,        // ]
			reduce(92), // ., reduce: BooleanLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S53
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(93), // $, reduce: IntegerLiteral
			reduce(93), // terminator, reduce: IntegerLiteral
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(93), // lOr, reduce: IntegerLiteral
			reduce(93), // lAnd, reduce: IntegerLiteral
			reduce(93), // lNot, reduce: IntegerLiteral
			reduce(93), // equals, reduce: IntegerLiteral
			reduce(93), // lessOrGreater, reduce: IntegerLiteral
			reduce(93), // or, reduce: IntegerLiteral
			reduce(93), // xor, reduce: IntegerLiteral
			reduce(93), // and, reduce: IntegerLiteral
			reduce(93), // shift, reduce: IntegerLiteral
			reduce(93), // +, reduce: IntegerLiteral
			reduce(93), // -, reduce: IntegerLiteral
			reduce(93), // product, reduce: IntegerLiteral
			reduce(93), // (, reduce: IntegerLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(93), // [, reduce: IntegerLiteral
			nil,        // ]
			reduce(93), // ., reduce: IntegerLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S54
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(94), // $, reduce: FloatLiteral
			reduce(94), // terminator, reduce: FloatLiteral
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(94), // lOr, reduce: FloatLiteral
			reduce(94), // lAnd, reduce: FloatLiteral
			reduce(94), // lNot, reduce: FloatLiteral
			reduce(94), // equals, reduce: FloatLiteral
			reduce(94), // lessOrGreater, reduce: FloatLiteral
			reduce(94), // or, reduce: FloatLiteral
			reduce(94), // xor, reduce: FloatLiteral
			reduce(94), // and, reduce: FloatLiteral
			reduce(94), // shift, reduce: FloatLiteral
			reduce(94), // +, reduce: FloatLiteral
			reduce(94), // -, reduce: FloatLiteral
			reduce(94), // product, reduce: FloatLiteral
			reduce(94), // (, reduce: FloatLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(94), // [, reduce: FloatLiteral
			nil,        // ]
			reduce(94), // ., reduce: FloatLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S55
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(95), // $, reduce: StringLiteral
			reduce(95), // terminator, reduce: StringLiteral
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(95), // lOr, reduce: StringLiteral
			reduce(95), // lAnd, reduce: StringLiteral
			reduce(95), // lNot, reduce: StringLiteral
			reduce(95), // equals, reduce: StringLiteral
			reduce(95), // lessOrGreater, reduce: StringLiteral
			reduce(95), // or, reduce: StringLiteral
			reduce(95), // xor, reduce: StringLiteral
			reduce(95), // and, reduce: StringLiteral
			reduce(95), // shift, reduce: StringLiteral
			reduce(95), // +, reduce: StringLiteral
			reduce(95), // -, reduce: StringLiteral
			reduce(95), // product, reduce: StringLiteral
			reduce(95), // (, reduce: StringLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(95), // [, reduce: StringLiteral
			nil,        // ]
			reduce(95), // ., reduce: StringLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S56
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			shift(325), // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S57
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(4), // $, reduce: StatementList
			reduce(4), // terminator, reduce: StatementList
			shift(7),  // {
			nil,       // }
			shift(8),  // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			shift(23), // +
			shift(25), // -
			nil,       // product
			shift(28), // (
			nil,       // )
			shift(31), // !
			shift(32), // ~
			shift(37), // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			shift(39), // kwdIf
			nil,       // kwdElse
			shift(40), // kwdFor
			shift(42), // identifier
			shift(51), // kwdNull
			shift(52), // boolLit
			shift(53), // intLit
			shift(54), // floatLit
			shift(55), // stringLit
			shift(56), // kwdFn
		},
	},
	actionRow{ // S58
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			shift(327), // terminator
			nil,        // {
			shift(328), // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S59
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			reduce(2), // terminator, reduce: StatementList
			nil,       // {
			reduce(2), // }, reduce: StatementList
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S60
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			reduce(5), // terminator, reduce: Statement
			nil,       // {
			reduce(5), // }, reduce: Statement
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S61
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			reduce(6), // terminator, reduce: Statement
			nil,       // {
			reduce(6), // }, reduce: Statement
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S62
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			reduce(7), // terminator, reduce: Statement
			nil,       // {
			reduce(7), // }, reduce: Statement
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S63
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(63),  // {
			shift(330), // }
			shift(65),  // kwdReturn
			shift(331), // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(85),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(92),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(94),  // kwdIf
			nil,        // kwdElse
			shift(95),  // kwdFor
			shift(97),  // identifier
			shift(106), // kwdNull
			shift(107), // boolLit
			shift(108), // intLit
			shift(109), // floatLit
			shift(110), // stringLit
			shift(111), // kwdFn
		},
	},
	actionRow{ // S64
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(9), // $, reduce: BlockStatement
			reduce(9), // terminator, reduce: BlockStatement
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S65
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(10), // terminator, reduce: ReturnStatement
			shift(333), // {
			reduce(10), // }, reduce: ReturnStatement
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(351), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(358), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(360), // kwdIf
			nil,        // kwdElse
			shift(361), // kwdFor
			shift(363), // identifier
			shift(372), // kwdNull
			shift(373), // boolLit
			shift(374), // intLit
			shift(375), // floatLit
			shift(376), // stringLit
			shift(377), // kwdFn
		},
	},
	actionRow{ // S66
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(12), // terminator, reduce: ExpressionStatement
			nil,        // {
			reduce(12), // }, reduce: ExpressionStatement
			nil,        // kwdReturn
			nil,        // ,
			shift(378), // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S67
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			shift(379), // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S68
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			shift(380), // }
			nil,        // kwdReturn
			shift(381), // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S69
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(19), // terminator, reduce: Expression
			nil,        // {
			reduce(19), // }, reduce: Expression
			nil,        // kwdReturn
			nil,        // ,
			reduce(19), // :, reduce: Expression
			shift(382), // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S70
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(20), // terminator, reduce: Expression
			nil,        // {
			reduce(20), // }, reduce: Expression
			nil,        // kwdReturn
			nil,        // ,
			reduce(20), // :, reduce: Expression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S71
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(21), // terminator, reduce: Expression
			nil,        // {
			reduce(21), // }, reduce: Expression
			nil,        // kwdReturn
			nil,        // ,
			reduce(21), // :, reduce: Expression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S72
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(22), // terminator, reduce: Expression
			nil,        // {
			reduce(22), // }, reduce: Expression
			nil,        // kwdReturn
			nil,        // ,
			reduce(22), // :, reduce: Expression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S73
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(24), // terminator, reduce: Term1
			nil,        // {
			reduce(24), // }, reduce: Term1
			nil,        // kwdReturn
			nil,        // ,
			reduce(24), // :, reduce: Term1
			reduce(24), // lOr, reduce: Term1
			shift(383), // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S74
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(26), // terminator, reduce: Term2
			nil,        // {
			reduce(26), // }, reduce: Term2
			nil,        // kwdReturn
			nil,        // ,
			reduce(26), // :, reduce: Term2
			reduce(26), // lOr, reduce: Term2
			reduce(26), // lAnd, reduce: Term2
			shift(384), // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S75
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(28), // terminator, reduce: Term3
			nil,        // {
			reduce(28), // }, reduce: Term3
			nil,        // kwdReturn
			nil,        // ,
			reduce(28), // :, reduce: Term3
			reduce(28), // lOr, reduce: Term3
			reduce(28), // lAnd, reduce: Term3
			reduce(28), // lNot, reduce: Term3
			shift(385), // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S76
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(30), // terminator, reduce: Term4
			nil,        // {
			reduce(30), // }, reduce: Term4
			nil,        // kwdReturn
			nil,        // ,
			reduce(30), // :, reduce: Term4
			reduce(30), // lOr, reduce: Term4
			reduce(30), // lAnd, reduce: Term4
			reduce(30), // lNot, reduce: Term4
			reduce(30), // equals, reduce: Term4
			shift(386), // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S77
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(32), // terminator, reduce: Term5
			nil,        // {
			reduce(32), // }, reduce: Term5
			nil,        // kwdReturn
			nil,        // ,
			reduce(32), // :, reduce: Term5
			reduce(32), // lOr, reduce: Term5
			reduce(32), // lAnd, reduce: Term5
			reduce(32), // lNot, reduce: Term5
			reduce(32), // equals, reduce: Term5
			reduce(32), // lessOrGreater, reduce: Term5
			shift(387), // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S78
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(34), // terminator, reduce: Term6
			nil,        // {
			reduce(34), // }, reduce: Term6
			nil,        // kwdReturn
			nil,        // ,
			reduce(34), // :, reduce: Term6
			reduce(34), // lOr, reduce: Term6
			reduce(34), // lAnd, reduce: Term6
			reduce(34), // lNot, reduce: Term6
			reduce(34), // equals, reduce: Term6
			reduce(34), // lessOrGreater, reduce: Term6
			reduce(34), // or, reduce: Term6
			shift(388), // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S79
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(36), // terminator, reduce: Term7
			nil,        // {
			reduce(36), // }, reduce: Term7
			nil,        // kwdReturn
			nil,        // ,
			reduce(36), // :, reduce: Term7
			reduce(36), // lOr, reduce: Term7
			reduce(36), // lAnd, reduce: Term7
			reduce(36), // lNot, reduce: Term7
			reduce(36), // equals, reduce: Term7
			reduce(36), // lessOrGreater, reduce: Term7
			reduce(36), // or, reduce: Term7
			reduce(36), // xor, reduce: Term7
			shift(389), // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S80
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(38), // terminator, reduce: Term8
			nil,        // {
			reduce(38), // }, reduce: Term8
			nil,        // kwdReturn
			nil,        // ,
			reduce(38), // :, reduce: Term8
			reduce(38), // lOr, reduce: Term8
			reduce(38), // lAnd, reduce: Term8
			reduce(38), // lNot, reduce: Term8
			reduce(38), // equals, reduce: Term8
			reduce(38), // lessOrGreater, reduce: Term8
			reduce(38), // or, reduce: Term8
			reduce(38), // xor, reduce: Term8
			reduce(38), // and, reduce: Term8
			shift(390), // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S81
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(40), // terminator, reduce: Term9
			nil,        // {
			reduce(40), // }, reduce: Term9
			nil,        // kwdReturn
			nil,        // ,
			reduce(40), // :, reduce: Term9
			reduce(40), // lOr, reduce: Term9
			reduce(40), // lAnd, reduce: Term9
			reduce(40), // lNot, reduce: Term9
			reduce(40), // equals, reduce: Term9
			reduce(40), // lessOrGreater, reduce: Term9
			reduce(40), // or, reduce: Term9
			reduce(40), // xor, reduce: Term9
			reduce(40), // and, reduce: Term9
			reduce(40), // shift, reduce: Term9
			shift(391), // +
			shift(392), // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S82
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(43), // terminator, reduce: Term10
			nil,        // {
			reduce(43), // }, reduce: Term10
			nil,        // kwdReturn
			nil,        // ,
			reduce(43), // :, reduce: Term10
			reduce(43), // lOr, reduce: Term10
			reduce(43), // lAnd, reduce: Term10
			reduce(43), // lNot, reduce: Term10
			reduce(43), // equals, reduce: Term10
			reduce(43), // lessOrGreater, reduce: Term10
			reduce(43), // or, reduce: Term10
			reduce(43), // xor, reduce: Term10
			reduce(43), // and, reduce: Term10
			reduce(43), // shift, reduce: Term10
			reduce(43), // +, reduce: Term10
			reduce(43), // -, reduce: Term10
			shift(393), // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S83
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(45), // terminator, reduce: Term11
			nil,        // {
			reduce(45), // }, reduce: Term11
			nil,        // kwdReturn
			nil,        // ,
			reduce(45), // :, reduce: Term11
			reduce(45), // lOr, reduce: Term11
			reduce(45), // lAnd, reduce: Term11
			reduce(45), // lNot, reduce: Term11
			reduce(45), // equals, reduce: Term11
			reduce(45), // lessOrGreater, reduce: Term11
			reduce(45), // or, reduce: Term11
			reduce(45), // xor, reduce: Term11
			reduce(45), // and, reduce: Term11
			reduce(45), // shift, reduce: Term11
			reduce(45), // +, reduce: Term11
			reduce(45), // -, reduce: Term11
			reduce(45), // product, reduce: Term11
			shift(394), // (
			nil,        // )
			nil,        // !
			nil,        // ~
			shift(395), // [
			nil,        // ]
			shift(396), // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S84
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(46), // terminator, reduce: Term12
			nil,        // {
			reduce(46), // }, reduce: Term12
			nil,        // kwdReturn
			nil,        // ,
			reduce(46), // :, reduce: Term12
			reduce(46), // lOr, reduce: Term12
			reduce(46), // lAnd, reduce: Term12
			reduce(46), // lNot, reduce: Term12
			reduce(46), // equals, reduce: Term12
			reduce(46), // lessOrGreater, reduce: Term12
			reduce(46), // or, reduce: Term12
			reduce(46), // xor, reduce: Term12
			reduce(46), // and, reduce: Term12
			reduce(46), // shift, reduce: Term12
			reduce(46), // +, reduce: Term12
			reduce(46), // -, reduce: Term12
			reduce(46), // product, reduce: Term12
			reduce(46), // (, reduce: Term12
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(46), // [, reduce: Term12
			nil,        // ]
			reduce(46), // ., reduce: Term12
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S85
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(129), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(147), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(154), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(156), // kwdIf
			nil,        // kwdElse
			shift(157), // kwdFor
			shift(159), // identifier
			shift(168), // kwdNull
			shift(169), // boolLit
			shift(170), // intLit
			shift(171), // floatLit
			shift(172), // stringLit
			shift(173), // kwdFn
		},
	},
	actionRow{ // S86
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(48), // terminator, reduce: PrefixExpression
			nil,        // {
			reduce(48), // }, reduce: PrefixExpression
			nil,        // kwdReturn
			nil,        // ,
			reduce(48), // :, reduce: PrefixExpression
			reduce(48), // lOr, reduce: PrefixExpression
			reduce(48), // lAnd, reduce: PrefixExpression
			reduce(48), // lNot, reduce: PrefixExpression
			reduce(48), // equals, reduce: PrefixExpression
			reduce(48), // lessOrGreater, reduce: PrefixExpression
			reduce(48), // or, reduce: PrefixExpression
			reduce(48), // xor, reduce: PrefixExpression
			reduce(48), // and, reduce: PrefixExpression
			reduce(48), // shift, reduce: PrefixExpression
			reduce(48), // +, reduce: PrefixExpression
			reduce(48), // -, reduce: PrefixExpression
			reduce(48), // product, reduce: PrefixExpression
			reduce(48), // (, reduce: PrefixExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(48), // [, reduce: PrefixExpression
			nil,        // ]
			reduce(48), // ., reduce: PrefixExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S87
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(398), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(176), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(92),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(404), // identifier
			shift(106), // kwdNull
			shift(107), // boolLit
			shift(108), // intLit
			shift(109), // floatLit
			shift(110), // stringLit
			shift(111), // kwdFn
		},
	},
	actionRow{ // S88
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(54), // terminator, reduce: PrimaryExpr
			nil,        // {
			reduce(54), // }, reduce: PrimaryExpr
			nil,        // kwdReturn
			nil,        // ,
			reduce(54), // :, reduce: PrimaryExpr
			reduce(54), // lOr, reduce: PrimaryExpr
			reduce(54), // lAnd, reduce: PrimaryExpr
			reduce(54), // lNot, reduce: PrimaryExpr
			reduce(54), // equals, reduce: PrimaryExpr
			reduce(54), // lessOrGreater, reduce: PrimaryExpr
			reduce(54), // or, reduce: PrimaryExpr
			reduce(54), // xor, reduce: PrimaryExpr
			reduce(54), // and, reduce: PrimaryExpr
			reduce(54), // shift, reduce: PrimaryExpr
			reduce(54), // +, reduce: PrimaryExpr
			reduce(54), // -, reduce: PrimaryExpr
			reduce(54), // product, reduce: PrimaryExpr
			reduce(54), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(54), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(54), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S89
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(55), // terminator, reduce: PrimaryExpr
			nil,        // {
			reduce(55), // }, reduce: PrimaryExpr
			nil,        // kwdReturn
			nil,        // ,
			reduce(55), // :, reduce: PrimaryExpr
			reduce(55), // lOr, reduce: PrimaryExpr
			reduce(55), // lAnd, reduce: PrimaryExpr
			reduce(55), // lNot, reduce: PrimaryExpr
			reduce(55), // equals, reduce: PrimaryExpr
			reduce(55), // lessOrGreater, reduce: PrimaryExpr
			reduce(55), // or, reduce: PrimaryExpr
			reduce(55), // xor, reduce: PrimaryExpr
			reduce(55), // and, reduce: PrimaryExpr
			reduce(55), // shift, reduce: PrimaryExpr
			reduce(55), // +, reduce: PrimaryExpr
			reduce(55), // -, reduce: PrimaryExpr
			reduce(55), // product, reduce: PrimaryExpr
			reduce(55), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(55), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(55), // ., reduce: PrimaryExpr
			shift(405), // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S90
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(56), // terminator, reduce: PrimaryExpr
			nil,        // {
			reduce(56), // }, reduce: PrimaryExpr
			nil,        // kwdReturn
			nil,        // ,
			reduce(56), // :, reduce: PrimaryExpr
			reduce(56), // lOr, reduce: PrimaryExpr
			reduce(56), // lAnd, reduce: PrimaryExpr
			reduce(56), // lNot, reduce: PrimaryExpr
			reduce(56), // equals, reduce: PrimaryExpr
			reduce(56), // lessOrGreater, reduce: PrimaryExpr
			reduce(56), // or, reduce: PrimaryExpr
			reduce(56), // xor, reduce: PrimaryExpr
			reduce(56), // and, reduce: PrimaryExpr
			reduce(56), // shift, reduce: PrimaryExpr
			reduce(56), // +, reduce: PrimaryExpr
			reduce(56), // -, reduce: PrimaryExpr
			reduce(56), // product, reduce: PrimaryExpr
			reduce(56), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(56), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(56), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S91
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(57), // terminator, reduce: PrimaryExpr
			nil,        // {
			reduce(57), // }, reduce: PrimaryExpr
			nil,        // kwdReturn
			nil,        // ,
			reduce(57), // :, reduce: PrimaryExpr
			reduce(57), // lOr, reduce: PrimaryExpr
			reduce(57), // lAnd, reduce: PrimaryExpr
			reduce(57), // lNot, reduce: PrimaryExpr
			reduce(57), // equals, reduce: PrimaryExpr
			reduce(57), // lessOrGreater, reduce: PrimaryExpr
			reduce(57), // or, reduce: PrimaryExpr
			reduce(57), // xor, reduce: PrimaryExpr
			reduce(57), // and, reduce: PrimaryExpr
			reduce(57), // shift, reduce: PrimaryExpr
			reduce(57), // +, reduce: PrimaryExpr
			reduce(57), // -, reduce: PrimaryExpr
			reduce(57), // product, reduce: PrimaryExpr
			reduce(57), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(57), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(57), // ., reduce: PrimaryExpr
			shift(406), // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S92
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(185), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(204), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(211), // [
			shift(408), // ]
			nil,        // .
			nil,        // assign
			shift(214), // kwdIf
			nil,        // kwdElse
			shift(215), // kwdFor
			shift(217), // identifier
			shift(226), // kwdNull
			shift(227), // boolLit
			shift(228), // intLit
			shift(229), // floatLit
			shift(230), // stringLit
			shift(231), // kwdFn
		},
	},
	actionRow{ // S93
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(79), // terminator, reduce: Operand
			nil,        // {
			reduce(79), // }, reduce: Operand
			nil,        // kwdReturn
			nil,        // ,
			reduce(79), // :, reduce: Operand
			reduce(79), // lOr, reduce: Operand
			reduce(79), // lAnd, reduce: Operand
			reduce(79), // lNot, reduce: Operand
			reduce(79), // equals, reduce: Operand
			reduce(79), // lessOrGreater, reduce: Operand
			reduce(79), // or, reduce: Operand
			reduce(79), // xor, reduce: Operand
			reduce(79), // and, reduce: Operand
			reduce(79), // shift, reduce: Operand
			reduce(79), // +, reduce: Operand
			reduce(79), // -, reduce: Operand
			reduce(79), // product, reduce: Operand
			reduce(79), // (, reduce: Operand
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(79), // [, reduce: Operand
			nil,        // ]
			reduce(79), // ., reduce: Operand
			shift(409), // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S94
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(233), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(251), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(258), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(260), // kwdIf
			nil,        // kwdElse
			shift(261), // kwdFor
			shift(263), // identifier
			shift(272), // kwdNull
			shift(273), // boolLit
			shift(274), // intLit
			shift(275), // floatLit
			shift(276), // stringLit
			shift(277), // kwdFn
		},
	},
	actionRow{ // S95
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			shift(411), // terminator
			shift(413), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(298), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(305), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(307), // kwdIf
			nil,        // kwdElse
			shift(308), // kwdFor
			shift(310), // identifier
			shift(319), // kwdNull
			shift(320), // boolLit
			shift(321), // intLit
			shift(322), // floatLit
			shift(323), // stringLit
			shift(324), // kwdFn
		},
	},
	actionRow{ // S96
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(78), // terminator, reduce: Operand
			nil,        // {
			reduce(78), // }, reduce: Operand
			nil,        // kwdReturn
			nil,        // ,
			reduce(78), // :, reduce: Operand
			reduce(78), // lOr, reduce: Operand
			reduce(78), // lAnd, reduce: Operand
			reduce(78), // lNot, reduce: Operand
			reduce(78), // equals, reduce: Operand
			reduce(78), // lessOrGreater, reduce: Operand
			reduce(78), // or, reduce: Operand
			reduce(78), // xor, reduce: Operand
			reduce(78), // and, reduce: Operand
			reduce(78), // shift, reduce: Operand
			reduce(78), // +, reduce: Operand
			reduce(78), // -, reduce: Operand
			reduce(78), // product, reduce: Operand
			reduce(78), // (, reduce: Operand
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(78), // [, reduce: Operand
			nil,        // ]
			reduce(78), // ., reduce: Operand
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S97
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(82), // terminator, reduce: Identifier
			nil,        // {
			reduce(82), // }, reduce: Identifier
			nil,        // kwdReturn
			nil,        // ,
			reduce(82), // :, reduce: Identifier
			reduce(82), // lOr, reduce: Identifier
			reduce(82), // lAnd, reduce: Identifier
			reduce(82), // lNot, reduce: Identifier
			reduce(82), // equals, reduce: Identifier
			reduce(82), // lessOrGreater, reduce: Identifier
			reduce(82), // or, reduce: Identifier
			reduce(82), // xor, reduce: Identifier
			reduce(82), // and, reduce: Identifier
			reduce(82), // shift, reduce: Identifier
			reduce(82), // +, reduce: Identifier
			reduce(82), // -, reduce: Identifier
			reduce(82), // product, reduce: Identifier
			reduce(82), // (, reduce: Identifier
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(82), // [, reduce: Identifier
			nil,        // ]
			reduce(82), // ., reduce: Identifier
			reduce(82), // assign, reduce: Identifier
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S98
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(83), // terminator, reduce: Literal
			nil,        // {
			reduce(83), // }, reduce: Literal
			nil,        // kwdReturn
			nil,        // ,
			reduce(83), // :, reduce: Literal
			reduce(83), // lOr, reduce: Literal
			reduce(83), // lAnd, reduce: Literal
			reduce(83), // lNot, reduce: Literal
			reduce(83), // equals, reduce: Literal
			reduce(83), // lessOrGreater, reduce: Literal
			reduce(83), // or, reduce: Literal
			reduce(83), // xor, reduce: Literal
			reduce(83), // and, reduce: Literal
			reduce(83), // shift, reduce: Literal
			reduce(83), // +, reduce: Literal
			reduce(83), // -, reduce: Literal
			reduce(83), // product, reduce: Literal
			reduce(83), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(83), // [, reduce: Literal
			nil,        // ]
			reduce(83), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S99
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(84), // terminator, reduce: Literal
			nil,        // {
			reduce(84), // }, reduce: Literal
			nil,        // kwdReturn
			nil,        // ,
			reduce(84), // :, reduce: Literal
			reduce(84), // lOr, reduce: Literal
			reduce(84), // lAnd, reduce: Literal
			reduce(84), // lNot, reduce: Literal
			reduce(84), // equals, reduce: Literal
			reduce(84), // lessOrGreater, reduce: Literal
			reduce(84), // or, reduce: Literal
			reduce(84), // xor, reduce: Literal
			reduce(84), // and, reduce: Literal
			reduce(84), // shift, reduce: Literal
			reduce(84), // +, reduce: Literal
			reduce(84), // -, reduce: Literal
			reduce(84), // product, reduce: Literal
			reduce(84), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(84), // [, reduce: Literal
			nil,        // ]
			reduce(84), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S100
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(85), // terminator, reduce: Literal
			nil,        // {
			reduce(85), // }, reduce: Literal
			nil,        // kwdReturn
			nil,        // ,
			reduce(85), // :, reduce: Literal
			reduce(85), // lOr, reduce: Literal
			reduce(85), // lAnd, reduce: Literal
			reduce(85), // lNot, reduce: Literal
			reduce(85), // equals, reduce: Literal
			reduce(85), // lessOrGreater, reduce: Literal
			reduce(85), // or, reduce: Literal
			reduce(85), // xor, reduce: Literal
			reduce(85), // and, reduce: Literal
			reduce(85), // shift, reduce: Literal
			reduce(85), // +, reduce: Literal
			reduce(85), // -, reduce: Literal
			reduce(85), // product, reduce: Literal
			reduce(85), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(85), // [, reduce: Literal
			nil,        // ]
			reduce(85), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S101
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(86), // terminator, reduce: Literal
			nil,        // {
			reduce(86), // }, reduce: Literal
			nil,        // kwdReturn
			nil,        // ,
			reduce(86), // :, reduce: Literal
			reduce(86), // lOr, reduce: Literal
			reduce(86), // lAnd, reduce: Literal
			reduce(86), // lNot, reduce: Literal
			reduce(86), // equals, reduce: Literal
			reduce(86), // lessOrGreater, reduce: Literal
			reduce(86), // or, reduce: Literal
			reduce(86), // xor, reduce: Literal
			reduce(86), // and, reduce: Literal
			reduce(86), // shift, reduce: Literal
			reduce(86), // +, reduce: Literal
			reduce(86), // -, reduce: Literal
			reduce(86), // product, reduce: Literal
			reduce(86), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(86), // [, reduce: Literal
			nil,        // ]
			reduce(86), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S102
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(87), // terminator, reduce: Literal
			nil,        // {
			reduce(87), // }, reduce: Literal
			nil,        // kwdReturn
			nil,        // ,
			reduce(87), // :, reduce: Literal
			reduce(87), // lOr, reduce: Literal
			reduce(87), // lAnd, reduce: Literal
			reduce(87), // lNot, reduce: Literal
			reduce(87), // equals, reduce: Literal
			reduce(87), // lessOrGreater, reduce: Literal
			reduce(87), // or, reduce: Literal
			reduce(87), // xor, reduce: Literal
			reduce(87), // and, reduce: Literal
			reduce(87), // shift, reduce: Literal
			reduce(87), // +, reduce: Literal
			reduce(87), // -, reduce: Literal
			reduce(87), // product, reduce: Literal
			reduce(87), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(87), // [, reduce: Literal
			nil,        // ]
			reduce(87), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S103
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(88), // terminator, reduce: Literal
			nil,        // {
			reduce(88), // }, reduce: Literal
			nil,        // kwdReturn
			nil,        // ,
			reduce(88), // :, reduce: Literal
			reduce(88), // lOr, reduce: Literal
			reduce(88), // lAnd, reduce: Literal
			reduce(88), // lNot, reduce: Literal
			reduce(88), // equals, reduce: Literal
			reduce(88), // lessOrGreater, reduce: Literal
			reduce(88), // or, reduce: Literal
			reduce(88), // xor, reduce: Literal
			reduce(88), // and, reduce: Literal
			reduce(88), // shift, reduce: Literal
			reduce(88), // +, reduce: Literal
			reduce(88), // -, reduce: Literal
			reduce(88), // product, reduce: Literal
			reduce(88), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(88), // [, reduce: Literal
			nil,        // ]
			reduce(88), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S104
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(89), // terminator, reduce: Literal
			nil,        // {
			reduce(89), // }, reduce: Literal
			nil,        // kwdReturn
			nil,        // ,
			reduce(89), // :, reduce: Literal
			reduce(89), // lOr, reduce: Literal
			reduce(89), // lAnd, reduce: Literal
			reduce(89), // lNot, reduce: Literal
			reduce(89), // equals, reduce: Literal
			reduce(89), // lessOrGreater, reduce: Literal
			reduce(89), // or, reduce: Literal
			reduce(89), // xor, reduce: Literal
			reduce(89), // and, reduce: Literal
			reduce(89), // shift, reduce: Literal
			reduce(89), // +, reduce: Literal
			reduce(89), // -, reduce: Literal
			reduce(89), // product, reduce: Literal
			reduce(89), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(89), // [, reduce: Literal
			nil,        // ]
			reduce(89), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S105
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(90), // terminator, reduce: Literal
			nil,        // {
			reduce(90), // }, reduce: Literal
			nil,        // kwdReturn
			nil,        // ,
			reduce(90), // :, reduce: Literal
			reduce(90), // lOr, reduce: Literal
			reduce(90), // lAnd, reduce: Literal
			reduce(90), // lNot, reduce: Literal
			reduce(90), // equals, reduce: Literal
			reduce(90), // lessOrGreater, reduce: Literal
			reduce(90), // or, reduce: Literal
			reduce(90), // xor, reduce: Literal
			reduce(90), // and, reduce: Literal
			reduce(90), // shift, reduce: Literal
			reduce(90), // +, reduce: Literal
			reduce(90), // -, reduce: Literal
			reduce(90), // product, reduce: Literal
			reduce(90), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(90), // [, reduce: Literal
			nil,        // ]
			reduce(90), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S106
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(91), // terminator, reduce: Null
			nil,        // {
			reduce(91), // }, reduce: Null
			nil,        // kwdReturn
			nil,        // ,
			reduce(91), // :, reduce: Null
			reduce(91), // lOr, reduce: Null
			reduce(91), // lAnd, reduce: Null
			reduce(91), // lNot, reduce: Null
			reduce(91), // equals, reduce: Null
			reduce(91), // lessOrGreater, reduce: Null
			reduce(91), // or, reduce: Null
			reduce(91), // xor, reduce: Null
			reduce(91), // and, reduce: Null
			reduce(91), // shift, reduce: Null
			reduce(91), // +, reduce: Null
			reduce(91), // -, reduce: Null
			reduce(91), // product, reduce: Null
			reduce(91), // (, reduce: Null
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(91), // [, reduce: Null
			nil,        // ]
			reduce(91), // ., reduce: Null
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S107
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(92), // terminator, reduce: BooleanLiteral
			nil,        // {
			reduce(92), // }, reduce: BooleanLiteral
			nil,        // kwdReturn
			nil,        // ,
			reduce(92), // :, reduce: BooleanLiteral
			reduce(92), // lOr, reduce: BooleanLiteral
			reduce(92), // lAnd, reduce: BooleanLiteral
			reduce(92), // lNot, reduce: BooleanLiteral
			reduce(92), // equals, reduce: BooleanLiteral
			reduce(92), // lessOrGreater, reduce: BooleanLiteral
			reduce(92), // or, reduce: BooleanLiteral
			reduce(92), // xor, reduce: BooleanLiteral
			reduce(92), // and, reduce: BooleanLiteral
			reduce(92), // shift, reduce: BooleanLiteral
			reduce(92), // +, reduce: BooleanLiteral
			reduce(92), // -, reduce: BooleanLiteral
			reduce(92), // product, reduce: BooleanLiteral
			reduce(92), // (, reduce: BooleanLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(92), // [, reduce: BooleanLiteral
			nil,        // ]
			reduce(92), // ., reduce: BooleanLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S108
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(93), // terminator, reduce: IntegerLiteral
			nil,        // {
			reduce(93), // }, reduce: IntegerLiteral
			nil,        // kwdReturn
			nil,        // ,
			reduce(93), // :, reduce: IntegerLiteral
			reduce(93), // lOr, reduce: IntegerLiteral
			reduce(93), // lAnd, reduce: IntegerLiteral
			reduce(93), // lNot, reduce: IntegerLiteral
			reduce(93), // equals, reduce: IntegerLiteral
			reduce(93), // lessOrGreater, reduce: IntegerLiteral
			reduce(93), // or, reduce: IntegerLiteral
			reduce(93), // xor, reduce: IntegerLiteral
			reduce(93), // and, reduce: IntegerLiteral
			reduce(93), // shift, reduce: IntegerLiteral
			reduce(93), // +, reduce: IntegerLiteral
			reduce(93), // -, reduce: IntegerLiteral
			reduce(93), // product, reduce: IntegerLiteral
			reduce(93), // (, reduce: IntegerLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(93), // [, reduce: IntegerLiteral
			nil,        // ]
			reduce(93), // ., reduce: IntegerLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S109
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(94), // terminator, reduce: FloatLiteral
			nil,        // {
			reduce(94), // }, reduce: FloatLiteral
			nil,        // kwdReturn
			nil,        // ,
			reduce(94), // :, reduce: FloatLiteral
			reduce(94), // lOr, reduce: FloatLiteral
			reduce(94), // lAnd, reduce: FloatLiteral
			reduce(94), // lNot, reduce: FloatLiteral
			reduce(94), // equals, reduce: FloatLiteral
			reduce(94), // lessOrGreater, reduce: FloatLiteral
			reduce(94), // or, reduce: FloatLiteral
			reduce(94), // xor, reduce: FloatLiteral
			reduce(94), // and, reduce: FloatLiteral
			reduce(94), // shift, reduce: FloatLiteral
			reduce(94), // +, reduce: FloatLiteral
			reduce(94), // -, reduce: FloatLiteral
			reduce(94), // product, reduce: FloatLiteral
			reduce(94), // (, reduce: FloatLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(94), // [, reduce: FloatLiteral
			nil,        // ]
			reduce(94), // ., reduce: FloatLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S110
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(95), // terminator, reduce: StringLiteral
			nil,        // {
			reduce(95), // }, reduce: StringLiteral
			nil,        // kwdReturn
			nil,        // ,
			reduce(95), // :, reduce: StringLiteral
			reduce(95), // lOr, reduce: StringLiteral
			reduce(95), // lAnd, reduce: StringLiteral
			reduce(95), // lNot, reduce: StringLiteral
			reduce(95), // equals, reduce: StringLiteral
			reduce(95), // lessOrGreater, reduce: StringLiteral
			reduce(95), // or, reduce: StringLiteral
			reduce(95), // xor, reduce: StringLiteral
			reduce(95), // and, reduce: StringLiteral
			reduce(95), // shift, reduce: StringLiteral
			reduce(95), // +, reduce: StringLiteral
			reduce(95), // -, reduce: StringLiteral
			reduce(95), // product, reduce: StringLiteral
			reduce(95), // (, reduce: StringLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(95), // [, reduce: StringLiteral
			nil,        // ]
			reduce(95), // ., reduce: StringLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S111
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			shift(415), // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S112
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(416), // {
			nil,        // }
			nil,        // kwdReturn
			shift(67),  // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(434), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(441), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(443), // kwdIf
			nil,        // kwdElse
			shift(444), // kwdFor
			shift(446), // identifier
			shift(455), // kwdNull
			shift(456), // boolLit
			shift(457), // intLit
			shift(458), // floatLit
			shift(459), // stringLit
			shift(460), // kwdFn
		},
	},
	actionRow{ // S113
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(11), // $, reduce: ReturnStatement
			reduce(11), // terminator, reduce: ReturnStatement
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S114
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(112), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(28),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(37),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(182), // identifier
			shift(51),  // kwdNull
			shift(52),  // boolLit
			shift(53),  // intLit
			shift(54),  // floatLit
			shift(55),  // stringLit
			shift(56),  // kwdFn
		},
	},
	actionRow{ // S115
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(112), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(28),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(37),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(182), // identifier
			shift(51),  // kwdNull
			shift(52),  // boolLit
			shift(53),  // intLit
			shift(54),  // floatLit
			shift(55),  // stringLit
			shift(56),  // kwdFn
		},
	},
	actionRow{ // S116
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(112), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(28),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(37),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(182), // identifier
			shift(51),  // kwdNull
			shift(52),  // boolLit
			shift(53),  // intLit
			shift(54),  // floatLit
			shift(55),  // stringLit
			shift(56),  // kwdFn
		},
	},
	actionRow{ // S117
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(112), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(28),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(37),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(182), // identifier
			shift(51),  // kwdNull
			shift(52),  // boolLit
			shift(53),  // intLit
			shift(54),  // floatLit
			shift(55),  // stringLit
			shift(56),  // kwdFn
		},
	},
	actionRow{ // S118
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(112), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(28),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(37),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(182), // identifier
			shift(51),  // kwdNull
			shift(52),  // boolLit
			shift(53),  // intLit
			shift(54),  // floatLit
			shift(55),  // stringLit
			shift(56),  // kwdFn
		},
	},
	actionRow{ // S119
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(112), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(28),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(37),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(182), // identifier
			shift(51),  // kwdNull
			shift(52),  // boolLit
			shift(53),  // intLit
			shift(54),  // floatLit
			shift(55),  // stringLit
			shift(56),  // kwdFn
		},
	},
	actionRow{ // S120
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(112), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(28),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(37),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(182), // identifier
			shift(51),  // kwdNull
			shift(52),  // boolLit
			shift(53),  // intLit
			shift(54),  // floatLit
			shift(55),  // stringLit
			shift(56),  // kwdFn
		},
	},
	actionRow{ // S121
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(112), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(28),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(37),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(182), // identifier
			shift(51),  // kwdNull
			shift(52),  // boolLit
			shift(53),  // intLit
			shift(54),  // floatLit
			shift(55),  // stringLit
			shift(56),  // kwdFn
		},
	},
	actionRow{ // S122
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(112), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(28),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(37),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(182), // identifier
			shift(51),  // kwdNull
			shift(52),  // boolLit
			shift(53),  // intLit
			shift(54),  // floatLit
			shift(55),  // stringLit
			shift(56),  // kwdFn
		},
	},
	actionRow{ // S123
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(112), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(28),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(37),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(182), // identifier
			shift(51),  // kwdNull
			shift(52),  // boolLit
			shift(53),  // intLit
			shift(54),  // floatLit
			shift(55),  // stringLit
			shift(56),  // kwdFn
		},
	},
	actionRow{ // S124
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(112), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(28),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(37),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(182), // identifier
			shift(51),  // kwdNull
			shift(52),  // boolLit
			shift(53),  // intLit
			shift(54),  // floatLit
			shift(55),  // stringLit
			shift(56),  // kwdFn
		},
	},
	actionRow{ // S125
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(112), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(28),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(37),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(182), // identifier
			shift(51),  // kwdNull
			shift(52),  // boolLit
			shift(53),  // intLit
			shift(54),  // floatLit
			shift(55),  // stringLit
			shift(56),  // kwdFn
		},
	},
	actionRow{ // S126
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(474), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(493), // (
			shift(494), // )
			shift(31),  // !
			shift(32),  // ~
			shift(501), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(503), // kwdIf
			nil,        // kwdElse
			shift(504), // kwdFor
			shift(506), // identifier
			shift(515), // kwdNull
			shift(516), // boolLit
			shift(517), // intLit
			shift(518), // floatLit
			shift(519), // stringLit
			shift(520), // kwdFn
		},
	},
	actionRow{ // S127
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(521), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(539), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(546), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(548), // kwdIf
			nil,        // kwdElse
			shift(549), // kwdFor
			shift(551), // identifier
			shift(560), // kwdNull
			shift(561), // boolLit
			shift(562), // intLit
			shift(563), // floatLit
			shift(564), // stringLit
			shift(565), // kwdFn
		},
	},
	actionRow{ // S128
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			shift(42), // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S129
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(416), // {
			nil,        // }
			nil,        // kwdReturn
			shift(567), // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(434), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(441), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(443), // kwdIf
			nil,        // kwdElse
			shift(444), // kwdFor
			shift(446), // identifier
			shift(455), // kwdNull
			shift(456), // boolLit
			shift(457), // intLit
			shift(458), // floatLit
			shift(459), // stringLit
			shift(460), // kwdFn
		},
	},
	actionRow{ // S130
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			shift(569), // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S131
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			shift(570), // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(19), // ), reduce: Expression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S132
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(20), // ), reduce: Expression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S133
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(21), // ), reduce: Expression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S134
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(22), // ), reduce: Expression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S135
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(24), // lOr, reduce: Term1
			shift(571), // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(24), // ), reduce: Term1
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S136
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(26), // lOr, reduce: Term2
			reduce(26), // lAnd, reduce: Term2
			shift(572), // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(26), // ), reduce: Term2
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S137
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(28), // lOr, reduce: Term3
			reduce(28), // lAnd, reduce: Term3
			reduce(28), // lNot, reduce: Term3
			shift(573), // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(28), // ), reduce: Term3
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S138
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(30), // lOr, reduce: Term4
			reduce(30), // lAnd, reduce: Term4
			reduce(30), // lNot, reduce: Term4
			reduce(30), // equals, reduce: Term4
			shift(574), // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(30), // ), reduce: Term4
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S139
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(32), // lOr, reduce: Term5
			reduce(32), // lAnd, reduce: Term5
			reduce(32), // lNot, reduce: Term5
			reduce(32), // equals, reduce: Term5
			reduce(32), // lessOrGreater, reduce: Term5
			shift(575), // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(32), // ), reduce: Term5
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S140
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(34), // lOr, reduce: Term6
			reduce(34), // lAnd, reduce: Term6
			reduce(34), // lNot, reduce: Term6
			reduce(34), // equals, reduce: Term6
			reduce(34), // lessOrGreater, reduce: Term6
			reduce(34), // or, reduce: Term6
			shift(576), // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(34), // ), reduce: Term6
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S141
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(36), // lOr, reduce: Term7
			reduce(36), // lAnd, reduce: Term7
			reduce(36), // lNot, reduce: Term7
			reduce(36), // equals, reduce: Term7
			reduce(36), // lessOrGreater, reduce: Term7
			reduce(36), // or, reduce: Term7
			reduce(36), // xor, reduce: Term7
			shift(577), // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(36), // ), reduce: Term7
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S142
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(38), // lOr, reduce: Term8
			reduce(38), // lAnd, reduce: Term8
			reduce(38), // lNot, reduce: Term8
			reduce(38), // equals, reduce: Term8
			reduce(38), // lessOrGreater, reduce: Term8
			reduce(38), // or, reduce: Term8
			reduce(38), // xor, reduce: Term8
			reduce(38), // and, reduce: Term8
			shift(578), // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(38), // ), reduce: Term8
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S143
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(40), // lOr, reduce: Term9
			reduce(40), // lAnd, reduce: Term9
			reduce(40), // lNot, reduce: Term9
			reduce(40), // equals, reduce: Term9
			reduce(40), // lessOrGreater, reduce: Term9
			reduce(40), // or, reduce: Term9
			reduce(40), // xor, reduce: Term9
			reduce(40), // and, reduce: Term9
			reduce(40), // shift, reduce: Term9
			shift(579), // +
			shift(580), // -
			nil,        // product
			nil,        // (
			reduce(40), // ), reduce: Term9
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S144
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(43), // lOr, reduce: Term10
			reduce(43), // lAnd, reduce: Term10
			reduce(43), // lNot, reduce: Term10
			reduce(43), // equals, reduce: Term10
			reduce(43), // lessOrGreater, reduce: Term10
			reduce(43), // or, reduce: Term10
			reduce(43), // xor, reduce: Term10
			reduce(43), // and, reduce: Term10
			reduce(43), // shift, reduce: Term10
			reduce(43), // +, reduce: Term10
			reduce(43), // -, reduce: Term10
			shift(581), // product
			nil,        // (
			reduce(43), // ), reduce: Term10
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S145
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(45), // lOr, reduce: Term11
			reduce(45), // lAnd, reduce: Term11
			reduce(45), // lNot, reduce: Term11
			reduce(45), // equals, reduce: Term11
			reduce(45), // lessOrGreater, reduce: Term11
			reduce(45), // or, reduce: Term11
			reduce(45), // xor, reduce: Term11
			reduce(45), // and, reduce: Term11
			reduce(45), // shift, reduce: Term11
			reduce(45), // +, reduce: Term11
			reduce(45), // -, reduce: Term11
			reduce(45), // product, reduce: Term11
			shift(582), // (
			reduce(45), // ), reduce: Term11
			nil,        // !
			nil,        // ~
			shift(583), // [
			nil,        // ]
			shift(584), // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S146
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(46), // lOr, reduce: Term12
			reduce(46), // lAnd, reduce: Term12
			reduce(46), // lNot, reduce: Term12
			reduce(46), // equals, reduce: Term12
			reduce(46), // lessOrGreater, reduce: Term12
			reduce(46), // or, reduce: Term12
			reduce(46), // xor, reduce: Term12
			reduce(46), // and, reduce: Term12
			reduce(46), // shift, reduce: Term12
			reduce(46), // +, reduce: Term12
			reduce(46), // -, reduce: Term12
			reduce(46), // product, reduce: Term12
			reduce(46), // (, reduce: Term12
			reduce(46), // ), reduce: Term12
			nil,        // !
			nil,        // ~
			reduce(46), // [, reduce: Term12
			nil,        // ]
			reduce(46), // ., reduce: Term12
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S147
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(129), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(147), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(154), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(156), // kwdIf
			nil,        // kwdElse
			shift(157), // kwdFor
			shift(159), // identifier
			shift(168), // kwdNull
			shift(169), // boolLit
			shift(170), // intLit
			shift(171), // floatLit
			shift(172), // stringLit
			shift(173), // kwdFn
		},
	},
	actionRow{ // S148
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(48), // lOr, reduce: PrefixExpression
			reduce(48), // lAnd, reduce: PrefixExpression
			reduce(48), // lNot, reduce: PrefixExpression
			reduce(48), // equals, reduce: PrefixExpression
			reduce(48), // lessOrGreater, reduce: PrefixExpression
			reduce(48), // or, reduce: PrefixExpression
			reduce(48), // xor, reduce: PrefixExpression
			reduce(48), // and, reduce: PrefixExpression
			reduce(48), // shift, reduce: PrefixExpression
			reduce(48), // +, reduce: PrefixExpression
			reduce(48), // -, reduce: PrefixExpression
			reduce(48), // product, reduce: PrefixExpression
			reduce(48), // (, reduce: PrefixExpression
			reduce(48), // ), reduce: PrefixExpression
			nil,        // !
			nil,        // ~
			reduce(48), // [, reduce: PrefixExpression
			nil,        // ]
			reduce(48), // ., reduce: PrefixExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S149
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(129), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(176), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(154), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(591), // identifier
			shift(168), // kwdNull
			shift(169), // boolLit
			shift(170), // intLit
			shift(171), // floatLit
			shift(172), // stringLit
			shift(173), // kwdFn
		},
	},
	actionRow{ // S150
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(54), // lOr, reduce: PrimaryExpr
			reduce(54), // lAnd, reduce: PrimaryExpr
			reduce(54), // lNot, reduce: PrimaryExpr
			reduce(54), // equals, reduce: PrimaryExpr
			reduce(54), // lessOrGreater, reduce: PrimaryExpr
			reduce(54), // or, reduce: PrimaryExpr
			reduce(54), // xor, reduce: PrimaryExpr
			reduce(54), // and, reduce: PrimaryExpr
			reduce(54), // shift, reduce: PrimaryExpr
			reduce(54), // +, reduce: PrimaryExpr
			reduce(54), // -, reduce: PrimaryExpr
			reduce(54), // product, reduce: PrimaryExpr
			reduce(54), // (, reduce: PrimaryExpr
			reduce(54), // ), reduce: PrimaryExpr
			nil,        // !
			nil,        // ~
			reduce(54), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(54), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S151
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(55), // lOr, reduce: PrimaryExpr
			reduce(55), // lAnd, reduce: PrimaryExpr
			reduce(55), // lNot, reduce: PrimaryExpr
			reduce(55), // equals, reduce: PrimaryExpr
			reduce(55), // lessOrGreater, reduce: PrimaryExpr
			reduce(55), // or, reduce: PrimaryExpr
			reduce(55), // xor, reduce: PrimaryExpr
			reduce(55), // and, reduce: PrimaryExpr
			reduce(55), // shift, reduce: PrimaryExpr
			reduce(55), // +, reduce: PrimaryExpr
			reduce(55), // -, reduce: PrimaryExpr
			reduce(55), // product, reduce: PrimaryExpr
			reduce(55), // (, reduce: PrimaryExpr
			reduce(55), // ), reduce: PrimaryExpr
			nil,        // !
			nil,        // ~
			reduce(55), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(55), // ., reduce: PrimaryExpr
			shift(592), // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S152
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(56), // lOr, reduce: PrimaryExpr
			reduce(56), // lAnd, reduce: PrimaryExpr
			reduce(56), // lNot, reduce: PrimaryExpr
			reduce(56), // equals, reduce: PrimaryExpr
			reduce(56), // lessOrGreater, reduce: PrimaryExpr
			reduce(56), // or, reduce: PrimaryExpr
			reduce(56), // xor, reduce: PrimaryExpr
			reduce(56), // and, reduce: PrimaryExpr
			reduce(56), // shift, reduce: PrimaryExpr
			reduce(56), // +, reduce: PrimaryExpr
			reduce(56), // -, reduce: PrimaryExpr
			reduce(56), // product, reduce: PrimaryExpr
			reduce(56), // (, reduce: PrimaryExpr
			reduce(56), // ), reduce: PrimaryExpr
			nil,        // !
			nil,        // ~
			reduce(56), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(56), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S153
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(57), // lOr, reduce: PrimaryExpr
			reduce(57), // lAnd, reduce: PrimaryExpr
			reduce(57), // lNot, reduce: PrimaryExpr
			reduce(57), // equals, reduce: PrimaryExpr
			reduce(57), // lessOrGreater, reduce: PrimaryExpr
			reduce(57), // or, reduce: PrimaryExpr
			reduce(57), // xor, reduce: PrimaryExpr
			reduce(57), // and, reduce: PrimaryExpr
			reduce(57), // shift, reduce: PrimaryExpr
			reduce(57), // +, reduce: PrimaryExpr
			reduce(57), // -, reduce: PrimaryExpr
			reduce(57), // product, reduce: PrimaryExpr
			reduce(57), // (, reduce: PrimaryExpr
			reduce(57), // ), reduce: PrimaryExpr
			nil,        // !
			nil,        // ~
			reduce(57), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(57), // ., reduce: PrimaryExpr
			shift(593), // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S154
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(185), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(204), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(211), // [
			shift(595), // ]
			nil,        // .
			nil,        // assign
			shift(214), // kwdIf
			nil,        // kwdElse
			shift(215), // kwdFor
			shift(217), // identifier
			shift(226), // kwdNull
			shift(227), // boolLit
			shift(228), // intLit
			shift(229), // floatLit
			shift(230), // stringLit
			shift(231), // kwdFn
		},
	},
	actionRow{ // S155
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(79), // lOr, reduce: Operand
			reduce(79), // lAnd, reduce: Operand
			reduce(79), // lNot, reduce: Operand
			reduce(79), // equals, reduce: Operand
			reduce(79), // lessOrGreater, reduce: Operand
			reduce(79), // or, reduce: Operand
			reduce(79), // xor, reduce: Operand
			reduce(79), // and, reduce: Operand
			reduce(79), // shift, reduce: Operand
			reduce(79), // +, reduce: Operand
			reduce(79), // -, reduce: Operand
			reduce(79), // product, reduce: Operand
			reduce(79), // (, reduce: Operand
			reduce(79), // ), reduce: Operand
			nil,        // !
			nil,        // ~
			reduce(79), // [, reduce: Operand
			nil,        // ]
			reduce(79), // ., reduce: Operand
			shift(596), // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S156
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(233), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(251), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(258), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(260), // kwdIf
			nil,        // kwdElse
			shift(261), // kwdFor
			shift(263), // identifier
			shift(272), // kwdNull
			shift(273), // boolLit
			shift(274), // intLit
			shift(275), // floatLit
			shift(276), // stringLit
			shift(277), // kwdFn
		},
	},
	actionRow{ // S157
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			shift(598), // terminator
			shift(600), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(298), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(305), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(307), // kwdIf
			nil,        // kwdElse
			shift(308), // kwdFor
			shift(310), // identifier
			shift(319), // kwdNull
			shift(320), // boolLit
			shift(321), // intLit
			shift(322), // floatLit
			shift(323), // stringLit
			shift(324), // kwdFn
		},
	},
	actionRow{ // S158
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(78), // lOr, reduce: Operand
			reduce(78), // lAnd, reduce: Operand
			reduce(78), // lNot, reduce: Operand
			reduce(78), // equals, reduce: Operand
			reduce(78), // lessOrGreater, reduce: Operand
			reduce(78), // or, reduce: Operand
			reduce(78), // xor, reduce: Operand
			reduce(78), // and, reduce: Operand
			reduce(78), // shift, reduce: Operand
			reduce(78), // +, reduce: Operand
			reduce(78), // -, reduce: Operand
			reduce(78), // product, reduce: Operand
			reduce(78), // (, reduce: Operand
			reduce(78), // ), reduce: Operand
			nil,        // !
			nil,        // ~
			reduce(78), // [, reduce: Operand
			nil,        // ]
			reduce(78), // ., reduce: Operand
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S159
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(82), // lOr, reduce: Identifier
			reduce(82), // lAnd, reduce: Identifier
			reduce(82), // lNot, reduce: Identifier
			reduce(82), // equals, reduce: Identifier
			reduce(82), // lessOrGreater, reduce: Identifier
			reduce(82), // or, reduce: Identifier
			reduce(82), // xor, reduce: Identifier
			reduce(82), // and, reduce: Identifier
			reduce(82), // shift, reduce: Identifier
			reduce(82), // +, reduce: Identifier
			reduce(82), // -, reduce: Identifier
			reduce(82), // product, reduce: Identifier
			reduce(82), // (, reduce: Identifier
			reduce(82), // ), reduce: Identifier
			nil,        // !
			nil,        // ~
			reduce(82), // [, reduce: Identifier
			nil,        // ]
			reduce(82), // ., reduce: Identifier
			reduce(82), // assign, reduce: Identifier
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S160
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(83), // lOr, reduce: Literal
			reduce(83), // lAnd, reduce: Literal
			reduce(83), // lNot, reduce: Literal
			reduce(83), // equals, reduce: Literal
			reduce(83), // lessOrGreater, reduce: Literal
			reduce(83), // or, reduce: Literal
			reduce(83), // xor, reduce: Literal
			reduce(83), // and, reduce: Literal
			reduce(83), // shift, reduce: Literal
			reduce(83), // +, reduce: Literal
			reduce(83), // -, reduce: Literal
			reduce(83), // product, reduce: Literal
			reduce(83), // (, reduce: Literal
			reduce(83), // ), reduce: Literal
			nil,        // !
			nil,        // ~
			reduce(83), // [, reduce: Literal
			nil,        // ]
			reduce(83), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S161
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(84), // lOr, reduce: Literal
			reduce(84), // lAnd, reduce: Literal
			reduce(84), // lNot, reduce: Literal
			reduce(84), // equals, reduce: Literal
			reduce(84), // lessOrGreater, reduce: Literal
			reduce(84), // or, reduce: Literal
			reduce(84), // xor, reduce: Literal
			reduce(84), // and, reduce: Literal
			reduce(84), // shift, reduce: Literal
			reduce(84), // +, reduce: Literal
			reduce(84), // -, reduce: Literal
			reduce(84), // product, reduce: Literal
			reduce(84), // (, reduce: Literal
			reduce(84), // ), reduce: Literal
			nil,        // !
			nil,        // ~
			reduce(84), // [, reduce: Literal
			nil,        // ]
			reduce(84), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S162
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(85), // lOr, reduce: Literal
			reduce(85), // lAnd, reduce: Literal
			reduce(85), // lNot, reduce: Literal
			reduce(85), // equals, reduce: Literal
			reduce(85), // lessOrGreater, reduce: Literal
			reduce(85), // or, reduce: Literal
			reduce(85), // xor, reduce: Literal
			reduce(85), // and, reduce: Literal
			reduce(85), // shift, reduce: Literal
			reduce(85), // +, reduce: Literal
			reduce(85), // -, reduce: Literal
			reduce(85), // product, reduce: Literal
			reduce(85), // (, reduce: Literal
			reduce(85), // ), reduce: Literal
			nil,        // !
			nil,        // ~
			reduce(85), // [, reduce: Literal
			nil,        // ]
			reduce(85), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S163
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(86), // lOr, reduce: Literal
			reduce(86), // lAnd, reduce: Literal
			reduce(86), // lNot, reduce: Literal
			reduce(86), // equals, reduce: Literal
			reduce(86), // lessOrGreater, reduce: Literal
			reduce(86), // or, reduce: Literal
			reduce(86), // xor, reduce: Literal
			reduce(86), // and, reduce: Literal
			reduce(86), // shift, reduce: Literal
			reduce(86), // +, reduce: Literal
			reduce(86), // -, reduce: Literal
			reduce(86), // product, reduce: Literal
			reduce(86), // (, reduce: Literal
			reduce(86), // ), reduce: Literal
			nil,        // !
			nil,        // ~
			reduce(86), // [, reduce: Literal
			nil,        // ]
			reduce(86), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S164
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(87), // lOr, reduce: Literal
			reduce(87), // lAnd, reduce: Literal
			reduce(87), // lNot, reduce: Literal
			reduce(87), // equals, reduce: Literal
			reduce(87), // lessOrGreater, reduce: Literal
			reduce(87), // or, reduce: Literal
			reduce(87), // xor, reduce: Literal
			reduce(87), // and, reduce: Literal
			reduce(87), // shift, reduce: Literal
			reduce(87), // +, reduce: Literal
			reduce(87), // -, reduce: Literal
			reduce(87), // product, reduce: Literal
			reduce(87), // (, reduce: Literal
			reduce(87), // ), reduce: Literal
			nil,        // !
			nil,        // ~
			reduce(87), // [, reduce: Literal
			nil,        // ]
			reduce(87), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S165
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(88), // lOr, reduce: Literal
			reduce(88), // lAnd, reduce: Literal
			reduce(88), // lNot, reduce: Literal
			reduce(88), // equals, reduce: Literal
			reduce(88), // lessOrGreater, reduce: Literal
			reduce(88), // or, reduce: Literal
			reduce(88), // xor, reduce: Literal
			reduce(88), // and, reduce: Literal
			reduce(88), // shift, reduce: Literal
			reduce(88), // +, reduce: Literal
			reduce(88), // -, reduce: Literal
			reduce(88), // product, reduce: Literal
			reduce(88), // (, reduce: Literal
			reduce(88), // ), reduce: Literal
			nil,        // !
			nil,        // ~
			reduce(88), // [, reduce: Literal
			nil,        // ]
			reduce(88), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S166
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(89), // lOr, reduce: Literal
			reduce(89), // lAnd, reduce: Literal
			reduce(89), // lNot, reduce: Literal
			reduce(89), // equals, reduce: Literal
			reduce(89), // lessOrGreater, reduce: Literal
			reduce(89), // or, reduce: Literal
			reduce(89), // xor, reduce: Literal
			reduce(89), // and, reduce: Literal
			reduce(89), // shift, reduce: Literal
			reduce(89), // +, reduce: Literal
			reduce(89), // -, reduce: Literal
			reduce(89), // product, reduce: Literal
			reduce(89), // (, reduce: Literal
			reduce(89), // ), reduce: Literal
			nil,        // !
			nil,        // ~
			reduce(89), // [, reduce: Literal
			nil,        // ]
			reduce(89), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S167
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(90), // lOr, reduce: Literal
			reduce(90), // lAnd, reduce: Literal
			reduce(90), // lNot, reduce: Literal
			reduce(90), // equals, reduce: Literal
			reduce(90), // lessOrGreater, reduce: Literal
			reduce(90), // or, reduce: Literal
			reduce(90), // xor, reduce: Literal
			reduce(90), // and, reduce: Literal
			reduce(90), // shift, reduce: Literal
			reduce(90), // +, reduce: Literal
			reduce(90), // -, reduce: Literal
			reduce(90), // product, reduce: Literal
			reduce(90), // (, reduce: Literal
			reduce(90), // ), reduce: Literal
			nil,        // !
			nil,        // ~
			reduce(90), // [, reduce: Literal
			nil,        // ]
			reduce(90), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S168
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(91), // lOr, reduce: Null
			reduce(91), // lAnd, reduce: Null
			reduce(91), // lNot, reduce: Null
			reduce(91), // equals, reduce: Null
			reduce(91), // lessOrGreater, reduce: Null
			reduce(91), // or, reduce: Null
			reduce(91), // xor, reduce: Null
			reduce(91), // and, reduce: Null
			reduce(91), // shift, reduce: Null
			reduce(91), // +, reduce: Null
			reduce(91), // -, reduce: Null
			reduce(91), // product, reduce: Null
			reduce(91), // (, reduce: Null
			reduce(91), // ), reduce: Null
			nil,        // !
			nil,        // ~
			reduce(91), // [, reduce: Null
			nil,        // ]
			reduce(91), // ., reduce: Null
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S169
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(92), // lOr, reduce: BooleanLiteral
			reduce(92), // lAnd, reduce: BooleanLiteral
			reduce(92), // lNot, reduce: BooleanLiteral
			reduce(92), // equals, reduce: BooleanLiteral
			reduce(92), // lessOrGreater, reduce: BooleanLiteral
			reduce(92), // or, reduce: BooleanLiteral
			reduce(92), // xor, reduce: BooleanLiteral
			reduce(92), // and, reduce: BooleanLiteral
			reduce(92), // shift, reduce: BooleanLiteral
			reduce(92), // +, reduce: BooleanLiteral
			reduce(92), // -, reduce: BooleanLiteral
			reduce(92), // product, reduce: BooleanLiteral
			reduce(92), // (, reduce: BooleanLiteral
			reduce(92), // ), reduce: BooleanLiteral
			nil,        // !
			nil,        // ~
			reduce(92), // [, reduce: BooleanLiteral
			nil,        // ]
			reduce(92), // ., reduce: BooleanLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S170
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(93), // lOr, reduce: IntegerLiteral
			reduce(93), // lAnd, reduce: IntegerLiteral
			reduce(93), // lNot, reduce: IntegerLiteral
			reduce(93), // equals, reduce: IntegerLiteral
			reduce(93), // lessOrGreater, reduce: IntegerLiteral
			reduce(93), // or, reduce: IntegerLiteral
			reduce(93), // xor, reduce: IntegerLiteral
			reduce(93), // and, reduce: IntegerLiteral
			reduce(93), // shift, reduce: IntegerLiteral
			reduce(93), // +, reduce: IntegerLiteral
			reduce(93), // -, reduce: IntegerLiteral
			reduce(93), // product, reduce: IntegerLiteral
			reduce(93), // (, reduce: IntegerLiteral
			reduce(93), // ), reduce: IntegerLiteral
			nil,        // !
			nil,        // ~
			reduce(93), // [, reduce: IntegerLiteral
			nil,        // ]
			reduce(93), // ., reduce: IntegerLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S171
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(94), // lOr, reduce: FloatLiteral
			reduce(94), // lAnd, reduce: FloatLiteral
			reduce(94), // lNot, reduce: FloatLiteral
			reduce(94), // equals, reduce: FloatLiteral
			reduce(94), // lessOrGreater, reduce: FloatLiteral
			reduce(94), // or, reduce: FloatLiteral
			reduce(94), // xor, reduce: FloatLiteral
			reduce(94), // and, reduce: FloatLiteral
			reduce(94), // shift, reduce: FloatLiteral
			reduce(94), // +, reduce: FloatLiteral
			reduce(94), // -, reduce: FloatLiteral
			reduce(94), // product, reduce: FloatLiteral
			reduce(94), // (, reduce: FloatLiteral
			reduce(94), // ), reduce: FloatLiteral
			nil,        // !
			nil,        // ~
			reduce(94), // [, reduce: FloatLiteral
			nil,        // ]
			reduce(94), // ., reduce: FloatLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S172
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(95), // lOr, reduce: StringLiteral
			reduce(95), // lAnd, reduce: StringLiteral
			reduce(95), // lNot, reduce: StringLiteral
			reduce(95), // equals, reduce: StringLiteral
			reduce(95), // lessOrGreater, reduce: StringLiteral
			reduce(95), // or, reduce: StringLiteral
			reduce(95), // xor, reduce: StringLiteral
			reduce(95), // and, reduce: StringLiteral
			reduce(95), // shift, reduce: StringLiteral
			reduce(95), // +, reduce: StringLiteral
			reduce(95), // -, reduce: StringLiteral
			reduce(95), // product, reduce: StringLiteral
			reduce(95), // (, reduce: StringLiteral
			reduce(95), // ), reduce: StringLiteral
			nil,        // !
			nil,        // ~
			reduce(95), // [, reduce: StringLiteral
			nil,        // ]
			reduce(95), // ., reduce: StringLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S173
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			shift(602), // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S174
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			shift(126), // (
			nil,        // )
			nil,        // !
			nil,        // ~
			shift(603), // [
			nil,        // ]
			shift(604), // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S175
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(46), // (, reduce: Term12
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(46), // [, reduce: Term12
			nil,        // ]
			reduce(46), // ., reduce: Term12
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S176
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(129), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(147), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(154), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(156), // kwdIf
			nil,        // kwdElse
			shift(157), // kwdFor
			shift(159), // identifier
			shift(168), // kwdNull
			shift(169), // boolLit
			shift(170), // intLit
			shift(171), // floatLit
			shift(172), // stringLit
			shift(173), // kwdFn
		},
	},
	actionRow{ // S177
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(49), // $, reduce: PrefixExpression
			reduce(49), // terminator, reduce: PrefixExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(49), // lOr, reduce: PrefixExpression
			reduce(49), // lAnd, reduce: PrefixExpression
			reduce(49), // lNot, reduce: PrefixExpression
			reduce(49), // equals, reduce: PrefixExpression
			reduce(49), // lessOrGreater, reduce: PrefixExpression
			reduce(49), // or, reduce: PrefixExpression
			reduce(49), // xor, reduce: PrefixExpression
			reduce(49), // and, reduce: PrefixExpression
			reduce(49), // shift, reduce: PrefixExpression
			reduce(49), // +, reduce: PrefixExpression
			reduce(49), // -, reduce: PrefixExpression
			reduce(49), // product, reduce: PrefixExpression
			reduce(48), // (, reduce: PrefixExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(48), // [, reduce: PrefixExpression
			nil,        // ]
			reduce(48), // ., reduce: PrefixExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S178
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(606), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(176), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(613), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(616), // identifier
			shift(625), // kwdNull
			shift(626), // boolLit
			shift(627), // intLit
			shift(628), // floatLit
			shift(629), // stringLit
			shift(630), // kwdFn
		},
	},
	actionRow{ // S179
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(55), // $, reduce: PrimaryExpr
			reduce(55), // terminator, reduce: PrimaryExpr
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(55), // lOr, reduce: PrimaryExpr
			reduce(55), // lAnd, reduce: PrimaryExpr
			reduce(55), // lNot, reduce: PrimaryExpr
			reduce(55), // equals, reduce: PrimaryExpr
			reduce(55), // lessOrGreater, reduce: PrimaryExpr
			reduce(55), // or, reduce: PrimaryExpr
			reduce(55), // xor, reduce: PrimaryExpr
			reduce(55), // and, reduce: PrimaryExpr
			reduce(55), // shift, reduce: PrimaryExpr
			reduce(55), // +, reduce: PrimaryExpr
			reduce(55), // -, reduce: PrimaryExpr
			reduce(55), // product, reduce: PrimaryExpr
			reduce(55), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(55), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(55), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S180
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(57), // $, reduce: PrimaryExpr
			reduce(57), // terminator, reduce: PrimaryExpr
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(57), // lOr, reduce: PrimaryExpr
			reduce(57), // lAnd, reduce: PrimaryExpr
			reduce(57), // lNot, reduce: PrimaryExpr
			reduce(57), // equals, reduce: PrimaryExpr
			reduce(57), // lessOrGreater, reduce: PrimaryExpr
			reduce(57), // or, reduce: PrimaryExpr
			reduce(57), // xor, reduce: PrimaryExpr
			reduce(57), // and, reduce: PrimaryExpr
			reduce(57), // shift, reduce: PrimaryExpr
			reduce(57), // +, reduce: PrimaryExpr
			reduce(57), // -, reduce: PrimaryExpr
			reduce(57), // product, reduce: PrimaryExpr
			reduce(57), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(57), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(57), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S181
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(79), // $, reduce: Operand
			reduce(79), // terminator, reduce: Operand
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(79), // lOr, reduce: Operand
			reduce(79), // lAnd, reduce: Operand
			reduce(79), // lNot, reduce: Operand
			reduce(79), // equals, reduce: Operand
			reduce(79), // lessOrGreater, reduce: Operand
			reduce(79), // or, reduce: Operand
			reduce(79), // xor, reduce: Operand
			reduce(79), // and, reduce: Operand
			reduce(79), // shift, reduce: Operand
			reduce(79), // +, reduce: Operand
			reduce(79), // -, reduce: Operand
			reduce(79), // product, reduce: Operand
			reduce(79), // (, reduce: Operand
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(79), // [, reduce: Operand
			nil,        // ]
			reduce(79), // ., reduce: Operand
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S182
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(82), // $, reduce: Identifier
			reduce(82), // terminator, reduce: Identifier
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(82), // lOr, reduce: Identifier
			reduce(82), // lAnd, reduce: Identifier
			reduce(82), // lNot, reduce: Identifier
			reduce(82), // equals, reduce: Identifier
			reduce(82), // lessOrGreater, reduce: Identifier
			reduce(82), // or, reduce: Identifier
			reduce(82), // xor, reduce: Identifier
			reduce(82), // and, reduce: Identifier
			reduce(82), // shift, reduce: Identifier
			reduce(82), // +, reduce: Identifier
			reduce(82), // -, reduce: Identifier
			reduce(82), // product, reduce: Identifier
			reduce(82), // (, reduce: Identifier
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(82), // [, reduce: Identifier
			nil,        // ]
			reduce(82), // ., reduce: Identifier
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S183
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(112), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(28),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(37),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(39),  // kwdIf
			nil,        // kwdElse
			shift(40),  // kwdFor
			shift(42),  // identifier
			shift(51),  // kwdNull
			shift(52),  // boolLit
			shift(53),  // intLit
			shift(54),  // floatLit
			shift(55),  // stringLit
			shift(56),  // kwdFn
		},
	},
	actionRow{ // S184
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(112), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(28),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(37),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(39),  // kwdIf
			nil,        // kwdElse
			shift(40),  // kwdFor
			shift(42),  // identifier
			shift(51),  // kwdNull
			shift(52),  // boolLit
			shift(53),  // intLit
			shift(54),  // floatLit
			shift(55),  // stringLit
			shift(56),  // kwdFn
		},
	},
	actionRow{ // S185
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(416), // {
			nil,        // }
			nil,        // kwdReturn
			shift(633), // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(434), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(441), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(443), // kwdIf
			nil,        // kwdElse
			shift(444), // kwdFor
			shift(446), // identifier
			shift(455), // kwdNull
			shift(456), // boolLit
			shift(457), // intLit
			shift(458), // floatLit
			shift(459), // stringLit
			shift(460), // kwdFn
		},
	},
	actionRow{ // S186
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(13), // ,, reduce: ExpressionList
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(13), // ], reduce: ExpressionList
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S187
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			shift(635), // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			shift(636), // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S188
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(19), // ,, reduce: Expression
			nil,        // :
			shift(637), // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(19), // ], reduce: Expression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S189
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(20), // ,, reduce: Expression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(20), // ], reduce: Expression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S190
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(21), // ,, reduce: Expression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(21), // ], reduce: Expression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S191
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(22), // ,, reduce: Expression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(22), // ], reduce: Expression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S192
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(24), // ,, reduce: Term1
			nil,        // :
			reduce(24), // lOr, reduce: Term1
			shift(638), // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(24), // ], reduce: Term1
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S193
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(26), // ,, reduce: Term2
			nil,        // :
			reduce(26), // lOr, reduce: Term2
			reduce(26), // lAnd, reduce: Term2
			shift(639), // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(26), // ], reduce: Term2
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S194
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(28), // ,, reduce: Term3
			nil,        // :
			reduce(28), // lOr, reduce: Term3
			reduce(28), // lAnd, reduce: Term3
			reduce(28), // lNot, reduce: Term3
			shift(640), // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(28), // ], reduce: Term3
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S195
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(30), // ,, reduce: Term4
			nil,        // :
			reduce(30), // lOr, reduce: Term4
			reduce(30), // lAnd, reduce: Term4
			reduce(30), // lNot, reduce: Term4
			reduce(30), // equals, reduce: Term4
			shift(641), // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(30), // ], reduce: Term4
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S196
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(32), // ,, reduce: Term5
			nil,        // :
			reduce(32), // lOr, reduce: Term5
			reduce(32), // lAnd, reduce: Term5
			reduce(32), // lNot, reduce: Term5
			reduce(32), // equals, reduce: Term5
			reduce(32), // lessOrGreater, reduce: Term5
			shift(642), // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(32), // ], reduce: Term5
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S197
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(34), // ,, reduce: Term6
			nil,        // :
			reduce(34), // lOr, reduce: Term6
			reduce(34), // lAnd, reduce: Term6
			reduce(34), // lNot, reduce: Term6
			reduce(34), // equals, reduce: Term6
			reduce(34), // lessOrGreater, reduce: Term6
			reduce(34), // or, reduce: Term6
			shift(643), // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(34), // ], reduce: Term6
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S198
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(36), // ,, reduce: Term7
			nil,        // :
			reduce(36), // lOr, reduce: Term7
			reduce(36), // lAnd, reduce: Term7
			reduce(36), // lNot, reduce: Term7
			reduce(36), // equals, reduce: Term7
			reduce(36), // lessOrGreater, reduce: Term7
			reduce(36), // or, reduce: Term7
			reduce(36), // xor, reduce: Term7
			shift(644), // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(36), // ], reduce: Term7
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S199
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(38), // ,, reduce: Term8
			nil,        // :
			reduce(38), // lOr, reduce: Term8
			reduce(38), // lAnd, reduce: Term8
			reduce(38), // lNot, reduce: Term8
			reduce(38), // equals, reduce: Term8
			reduce(38), // lessOrGreater, reduce: Term8
			reduce(38), // or, reduce: Term8
			reduce(38), // xor, reduce: Term8
			reduce(38), // and, reduce: Term8
			shift(645), // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(38), // ], reduce: Term8
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S200
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(40), // ,, reduce: Term9
			nil,        // :
			reduce(40), // lOr, reduce: Term9
			reduce(40), // lAnd, reduce: Term9
			reduce(40), // lNot, reduce: Term9
			reduce(40), // equals, reduce: Term9
			reduce(40), // lessOrGreater, reduce: Term9
			reduce(40), // or, reduce: Term9
			reduce(40), // xor, reduce: Term9
			reduce(40), // and, reduce: Term9
			reduce(40), // shift, reduce: Term9
			shift(646), // +
			shift(647), // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(40), // ], reduce: Term9
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S201
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(43), // ,, reduce: Term10
			nil,        // :
			reduce(43), // lOr, reduce: Term10
			reduce(43), // lAnd, reduce: Term10
			reduce(43), // lNot, reduce: Term10
			reduce(43), // equals, reduce: Term10
			reduce(43), // lessOrGreater, reduce: Term10
			reduce(43), // or, reduce: Term10
			reduce(43), // xor, reduce: Term10
			reduce(43), // and, reduce: Term10
			reduce(43), // shift, reduce: Term10
			reduce(43), // +, reduce: Term10
			reduce(43), // -, reduce: Term10
			shift(648), // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(43), // ], reduce: Term10
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S202
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(45), // ,, reduce: Term11
			nil,        // :
			reduce(45), // lOr, reduce: Term11
			reduce(45), // lAnd, reduce: Term11
			reduce(45), // lNot, reduce: Term11
			reduce(45), // equals, reduce: Term11
			reduce(45), // lessOrGreater, reduce: Term11
			reduce(45), // or, reduce: Term11
			reduce(45), // xor, reduce: Term11
			reduce(45), // and, reduce: Term11
			reduce(45), // shift, reduce: Term11
			reduce(45), // +, reduce: Term11
			reduce(45), // -, reduce: Term11
			reduce(45), // product, reduce: Term11
			shift(649), // (
			nil,        // )
			nil,        // !
			nil,        // ~
			shift(650), // [
			reduce(45), // ], reduce: Term11
			shift(651), // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S203
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(46), // ,, reduce: Term12
			nil,        // :
			reduce(46), // lOr, reduce: Term12
			reduce(46), // lAnd, reduce: Term12
			reduce(46), // lNot, reduce: Term12
			reduce(46), // equals, reduce: Term12
			reduce(46), // lessOrGreater, reduce: Term12
			reduce(46), // or, reduce: Term12
			reduce(46), // xor, reduce: Term12
			reduce(46), // and, reduce: Term12
			reduce(46), // shift, reduce: Term12
			reduce(46), // +, reduce: Term12
			reduce(46), // -, reduce: Term12
			reduce(46), // product, reduce: Term12
			reduce(46), // (, reduce: Term12
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(46), // [, reduce: Term12
			reduce(46), // ], reduce: Term12
			reduce(46), // ., reduce: Term12
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S204
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(129), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(147), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(154), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(156), // kwdIf
			nil,        // kwdElse
			shift(157), // kwdFor
			shift(159), // identifier
			shift(168), // kwdNull
			shift(169), // boolLit
			shift(170), // intLit
			shift(171), // floatLit
			shift(172), // stringLit
			shift(173), // kwdFn
		},
	},
	actionRow{ // S205
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(48), // ,, reduce: PrefixExpression
			nil,        // :
			reduce(48), // lOr, reduce: PrefixExpression
			reduce(48), // lAnd, reduce: PrefixExpression
			reduce(48), // lNot, reduce: PrefixExpression
			reduce(48), // equals, reduce: PrefixExpression
			reduce(48), // lessOrGreater, reduce: PrefixExpression
			reduce(48), // or, reduce: PrefixExpression
			reduce(48), // xor, reduce: PrefixExpression
			reduce(48), // and, reduce: PrefixExpression
			reduce(48), // shift, reduce: PrefixExpression
			reduce(48), // +, reduce: PrefixExpression
			reduce(48), // -, reduce: PrefixExpression
			reduce(48), // product, reduce: PrefixExpression
			reduce(48), // (, reduce: PrefixExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(48), // [, reduce: PrefixExpression
			reduce(48), // ], reduce: PrefixExpression
			reduce(48), // ., reduce: PrefixExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S206
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(185), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(176), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(211), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(658), // identifier
			shift(226), // kwdNull
			shift(227), // boolLit
			shift(228), // intLit
			shift(229), // floatLit
			shift(230), // stringLit
			shift(231), // kwdFn
		},
	},
	actionRow{ // S207
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(54), // ,, reduce: PrimaryExpr
			nil,        // :
			reduce(54), // lOr, reduce: PrimaryExpr
			reduce(54), // lAnd, reduce: PrimaryExpr
			reduce(54), // lNot, reduce: PrimaryExpr
			reduce(54), // equals, reduce: PrimaryExpr
			reduce(54), // lessOrGreater, reduce: PrimaryExpr
			reduce(54), // or, reduce: PrimaryExpr
			reduce(54), // xor, reduce: PrimaryExpr
			reduce(54), // and, reduce: PrimaryExpr
			reduce(54), // shift, reduce: PrimaryExpr
			reduce(54), // +, reduce: PrimaryExpr
			reduce(54), // -, reduce: PrimaryExpr
			reduce(54), // product, reduce: PrimaryExpr
			reduce(54), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(54), // [, reduce: PrimaryExpr
			reduce(54), // ], reduce: PrimaryExpr
			reduce(54), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S208
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(55), // ,, reduce: PrimaryExpr
			nil,        // :
			reduce(55), // lOr, reduce: PrimaryExpr
			reduce(55), // lAnd, reduce: PrimaryExpr
			reduce(55), // lNot, reduce: PrimaryExpr
			reduce(55), // equals, reduce: PrimaryExpr
			reduce(55), // lessOrGreater, reduce: PrimaryExpr
			reduce(55), // or, reduce: PrimaryExpr
			reduce(55), // xor, reduce: PrimaryExpr
			reduce(55), // and, reduce: PrimaryExpr
			reduce(55), // shift, reduce: PrimaryExpr
			reduce(55), // +, reduce: PrimaryExpr
			reduce(55), // -, reduce: PrimaryExpr
			reduce(55), // product, reduce: PrimaryExpr
			reduce(55), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(55), // [, reduce: PrimaryExpr
			reduce(55), // ], reduce: PrimaryExpr
			reduce(55), // ., reduce: PrimaryExpr
			shift(659), // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S209
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(56), // ,, reduce: PrimaryExpr
			nil,        // :
			reduce(56), // lOr, reduce: PrimaryExpr
			reduce(56), // lAnd, reduce: PrimaryExpr
			reduce(56), // lNot, reduce: PrimaryExpr
			reduce(56), // equals, reduce: PrimaryExpr
			reduce(56), // lessOrGreater, reduce: PrimaryExpr
			reduce(56), // or, reduce: PrimaryExpr
			reduce(56), // xor, reduce: PrimaryExpr
			reduce(56), // and, reduce: PrimaryExpr
			reduce(56), // shift, reduce: PrimaryExpr
			reduce(56), // +, reduce: PrimaryExpr
			reduce(56), // -, reduce: PrimaryExpr
			reduce(56), // product, reduce: PrimaryExpr
			reduce(56), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(56), // [, reduce: PrimaryExpr
			reduce(56), // ], reduce: PrimaryExpr
			reduce(56), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S210
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(57), // ,, reduce: PrimaryExpr
			nil,        // :
			reduce(57), // lOr, reduce: PrimaryExpr
			reduce(57), // lAnd, reduce: PrimaryExpr
			reduce(57), // lNot, reduce: PrimaryExpr
			reduce(57), // equals, reduce: PrimaryExpr
			reduce(57), // lessOrGreater, reduce: PrimaryExpr
			reduce(57), // or, reduce: PrimaryExpr
			reduce(57), // xor, reduce: PrimaryExpr
			reduce(57), // and, reduce: PrimaryExpr
			reduce(57), // shift, reduce: PrimaryExpr
			reduce(57), // +, reduce: PrimaryExpr
			reduce(57), // -, reduce: PrimaryExpr
			reduce(57), // product, reduce: PrimaryExpr
			reduce(57), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(57), // [, reduce: PrimaryExpr
			reduce(57), // ], reduce: PrimaryExpr
			reduce(57), // ., reduce: PrimaryExpr
			shift(660), // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S211
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(185), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(204), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(211), // [
			shift(662), // ]
			nil,        // .
			nil,        // assign
			shift(214), // kwdIf
			nil,        // kwdElse
			shift(215), // kwdFor
			shift(217), // identifier
			shift(226), // kwdNull
			shift(227), // boolLit
			shift(228), // intLit
			shift(229), // floatLit
			shift(230), // stringLit
			shift(231), // kwdFn
		},
	},
	actionRow{ // S212
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(98), // $, reduce: ArrayLiteral
			reduce(98), // terminator, reduce: ArrayLiteral
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(98), // lOr, reduce: ArrayLiteral
			reduce(98), // lAnd, reduce: ArrayLiteral
			reduce(98), // lNot, reduce: ArrayLiteral
			reduce(98), // equals, reduce: ArrayLiteral
			reduce(98), // lessOrGreater, reduce: ArrayLiteral
			reduce(98), // or, reduce: ArrayLiteral
			reduce(98), // xor, reduce: ArrayLiteral
			reduce(98), // and, reduce: ArrayLiteral
			reduce(98), // shift, reduce: ArrayLiteral
			reduce(98), // +, reduce: ArrayLiteral
			reduce(98), // -, reduce: ArrayLiteral
			reduce(98), // product, reduce: ArrayLiteral
			reduce(98), // (, reduce: ArrayLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(98), // [, reduce: ArrayLiteral
			nil,        // ]
			reduce(98), // ., reduce: ArrayLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S213
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(79), // ,, reduce: Operand
			nil,        // :
			reduce(79), // lOr, reduce: Operand
			reduce(79), // lAnd, reduce: Operand
			reduce(79), // lNot, reduce: Operand
			reduce(79), // equals, reduce: Operand
			reduce(79), // lessOrGreater, reduce: Operand
			reduce(79), // or, reduce: Operand
			reduce(79), // xor, reduce: Operand
			reduce(79), // and, reduce: Operand
			reduce(79), // shift, reduce: Operand
			reduce(79), // +, reduce: Operand
			reduce(79), // -, reduce: Operand
			reduce(79), // product, reduce: Operand
			reduce(79), // (, reduce: Operand
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(79), // [, reduce: Operand
			reduce(79), // ], reduce: Operand
			reduce(79), // ., reduce: Operand
			shift(663), // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S214
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(233), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(251), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(258), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(260), // kwdIf
			nil,        // kwdElse
			shift(261), // kwdFor
			shift(263), // identifier
			shift(272), // kwdNull
			shift(273), // boolLit
			shift(274), // intLit
			shift(275), // floatLit
			shift(276), // stringLit
			shift(277), // kwdFn
		},
	},
	actionRow{ // S215
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			shift(665), // terminator
			shift(667), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(298), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(305), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(307), // kwdIf
			nil,        // kwdElse
			shift(308), // kwdFor
			shift(310), // identifier
			shift(319), // kwdNull
			shift(320), // boolLit
			shift(321), // intLit
			shift(322), // floatLit
			shift(323), // stringLit
			shift(324), // kwdFn
		},
	},
	actionRow{ // S216
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(78), // ,, reduce: Operand
			nil,        // :
			reduce(78), // lOr, reduce: Operand
			reduce(78), // lAnd, reduce: Operand
			reduce(78), // lNot, reduce: Operand
			reduce(78), // equals, reduce: Operand
			reduce(78), // lessOrGreater, reduce: Operand
			reduce(78), // or, reduce: Operand
			reduce(78), // xor, reduce: Operand
			reduce(78), // and, reduce: Operand
			reduce(78), // shift, reduce: Operand
			reduce(78), // +, reduce: Operand
			reduce(78), // -, reduce: Operand
			reduce(78), // product, reduce: Operand
			reduce(78), // (, reduce: Operand
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(78), // [, reduce: Operand
			reduce(78), // ], reduce: Operand
			reduce(78), // ., reduce: Operand
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S217
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(82), // ,, reduce: Identifier
			nil,        // :
			reduce(82), // lOr, reduce: Identifier
			reduce(82), // lAnd, reduce: Identifier
			reduce(82), // lNot, reduce: Identifier
			reduce(82), // equals, reduce: Identifier
			reduce(82), // lessOrGreater, reduce: Identifier
			reduce(82), // or, reduce: Identifier
			reduce(82), // xor, reduce: Identifier
			reduce(82), // and, reduce: Identifier
			reduce(82), // shift, reduce: Identifier
			reduce(82), // +, reduce: Identifier
			reduce(82), // -, reduce: Identifier
			reduce(82), // product, reduce: Identifier
			reduce(82), // (, reduce: Identifier
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(82), // [, reduce: Identifier
			reduce(82), // ], reduce: Identifier
			reduce(82), // ., reduce: Identifier
			reduce(82), // assign, reduce: Identifier
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S218
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(83), // ,, reduce: Literal
			nil,        // :
			reduce(83), // lOr, reduce: Literal
			reduce(83), // lAnd, reduce: Literal
			reduce(83), // lNot, reduce: Literal
			reduce(83), // equals, reduce: Literal
			reduce(83), // lessOrGreater, reduce: Literal
			reduce(83), // or, reduce: Literal
			reduce(83), // xor, reduce: Literal
			reduce(83), // and, reduce: Literal
			reduce(83), // shift, reduce: Literal
			reduce(83), // +, reduce: Literal
			reduce(83), // -, reduce: Literal
			reduce(83), // product, reduce: Literal
			reduce(83), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(83), // [, reduce: Literal
			reduce(83), // ], reduce: Literal
			reduce(83), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S219
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(84), // ,, reduce: Literal
			nil,        // :
			reduce(84), // lOr, reduce: Literal
			reduce(84), // lAnd, reduce: Literal
			reduce(84), // lNot, reduce: Literal
			reduce(84), // equals, reduce: Literal
			reduce(84), // lessOrGreater, reduce: Literal
			reduce(84), // or, reduce: Literal
			reduce(84), // xor, reduce: Literal
			reduce(84), // and, reduce: Literal
			reduce(84), // shift, reduce: Literal
			reduce(84), // +, reduce: Literal
			reduce(84), // -, reduce: Literal
			reduce(84), // product, reduce: Literal
			reduce(84), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(84), // [, reduce: Literal
			reduce(84), // ], reduce: Literal
			reduce(84), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S220
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(85), // ,, reduce: Literal
			nil,        // :
			reduce(85), // lOr, reduce: Literal
			reduce(85), // lAnd, reduce: Literal
			reduce(85), // lNot, reduce: Literal
			reduce(85), // equals, reduce: Literal
			reduce(85), // lessOrGreater, reduce: Literal
			reduce(85), // or, reduce: Literal
			reduce(85), // xor, reduce: Literal
			reduce(85), // and, reduce: Literal
			reduce(85), // shift, reduce: Literal
			reduce(85), // +, reduce: Literal
			reduce(85), // -, reduce: Literal
			reduce(85), // product, reduce: Literal
			reduce(85), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(85), // [, reduce: Literal
			reduce(85), // ], reduce: Literal
			reduce(85), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S221
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(86), // ,, reduce: Literal
			nil,        // :
			reduce(86), // lOr, reduce: Literal
			reduce(86), // lAnd, reduce: Literal
			reduce(86), // lNot, reduce: Literal
			reduce(86), // equals, reduce: Literal
			reduce(86), // lessOrGreater, reduce: Literal
			reduce(86), // or, reduce: Literal
			reduce(86), // xor, reduce: Literal
			reduce(86), // and, reduce: Literal
			reduce(86), // shift, reduce: Literal
			reduce(86), // +, reduce: Literal
			reduce(86), // -, reduce: Literal
			reduce(86), // product, reduce: Literal
			reduce(86), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(86), // [, reduce: Literal
			reduce(86), // ], reduce: Literal
			reduce(86), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S222
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(87), // ,, reduce: Literal
			nil,        // :
			reduce(87), // lOr, reduce: Literal
			reduce(87), // lAnd, reduce: Literal
			reduce(87), // lNot, reduce: Literal
			reduce(87), // equals, reduce: Literal
			reduce(87), // lessOrGreater, reduce: Literal
			reduce(87), // or, reduce: Literal
			reduce(87), // xor, reduce: Literal
			reduce(87), // and, reduce: Literal
			reduce(87), // shift, reduce: Literal
			reduce(87), // +, reduce: Literal
			reduce(87), // -, reduce: Literal
			reduce(87), // product, reduce: Literal
			reduce(87), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(87), // [, reduce: Literal
			reduce(87), // ], reduce: Literal
			reduce(87), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S223
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(88), // ,, reduce: Literal
			nil,        // :
			reduce(88), // lOr, reduce: Literal
			reduce(88), // lAnd, reduce: Literal
			reduce(88), // lNot, reduce: Literal
			reduce(88), // equals, reduce: Literal
			reduce(88), // lessOrGreater, reduce: Literal
			reduce(88), // or, reduce: Literal
			reduce(88), // xor, reduce: Literal
			reduce(88), // and, reduce: Literal
			reduce(88), // shift, reduce: Literal
			reduce(88), // +, reduce: Literal
			reduce(88), // -, reduce: Literal
			reduce(88), // product, reduce: Literal
			reduce(88), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(88), // [, reduce: Literal
			reduce(88), // ], reduce: Literal
			reduce(88), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S224
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(89), // ,, reduce: Literal
			nil,        // :
			reduce(89), // lOr, reduce: Literal
			reduce(89), // lAnd, reduce: Literal
			reduce(89), // lNot, reduce: Literal
			reduce(89), // equals, reduce: Literal
			reduce(89), // lessOrGreater, reduce: Literal
			reduce(89), // or, reduce: Literal
			reduce(89), // xor, reduce: Literal
			reduce(89), // and, reduce: Literal
			reduce(89), // shift, reduce: Literal
			reduce(89), // +, reduce: Literal
			reduce(89), // -, reduce: Literal
			reduce(89), // product, reduce: Literal
			reduce(89), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(89), // [, reduce: Literal
			reduce(89), // ], reduce: Literal
			reduce(89), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S225
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(90), // ,, reduce: Literal
			nil,        // :
			reduce(90), // lOr, reduce: Literal
			reduce(90), // lAnd, reduce: Literal
			reduce(90), // lNot, reduce: Literal
			reduce(90), // equals, reduce: Literal
			reduce(90), // lessOrGreater, reduce: Literal
			reduce(90), // or, reduce: Literal
			reduce(90), // xor, reduce: Literal
			reduce(90), // and, reduce: Literal
			reduce(90), // shift, reduce: Literal
			reduce(90), // +, reduce: Literal
			reduce(90), // -, reduce: Literal
			reduce(90), // product, reduce: Literal
			reduce(90), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(90), // [, reduce: Literal
			reduce(90), // ], reduce: Literal
			reduce(90), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S226
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(91), // ,, reduce: Null
			nil,        // :
			reduce(91), // lOr, reduce: Null
			reduce(91), // lAnd, reduce: Null
			reduce(91), // lNot, reduce: Null
			reduce(91), // equals, reduce: Null
			reduce(91), // lessOrGreater, reduce: Null
			reduce(91), // or, reduce: Null
			reduce(91), // xor, reduce: Null
			reduce(91), // and, reduce: Null
			reduce(91), // shift, reduce: Null
			reduce(91), // +, reduce: Null
			reduce(91), // -, reduce: Null
			reduce(91), // product, reduce: Null
			reduce(91), // (, reduce: Null
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(91), // [, reduce: Null
			reduce(91), // ], reduce: Null
			reduce(91), // ., reduce: Null
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S227
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(92), // ,, reduce: BooleanLiteral
			nil,        // :
			reduce(92), // lOr, reduce: BooleanLiteral
			reduce(92), // lAnd, reduce: BooleanLiteral
			reduce(92), // lNot, reduce: BooleanLiteral
			reduce(92), // equals, reduce: BooleanLiteral
			reduce(92), // lessOrGreater, reduce: BooleanLiteral
			reduce(92), // or, reduce: BooleanLiteral
			reduce(92), // xor, reduce: BooleanLiteral
			reduce(92), // and, reduce: BooleanLiteral
			reduce(92), // shift, reduce: BooleanLiteral
			reduce(92), // +, reduce: BooleanLiteral
			reduce(92), // -, reduce: BooleanLiteral
			reduce(92), // product, reduce: BooleanLiteral
			reduce(92), // (, reduce: BooleanLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(92), // [, reduce: BooleanLiteral
			reduce(92), // ], reduce: BooleanLiteral
			reduce(92), // ., reduce: BooleanLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S228
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(93), // ,, reduce: IntegerLiteral
			nil,        // :
			reduce(93), // lOr, reduce: IntegerLiteral
			reduce(93), // lAnd, reduce: IntegerLiteral
			reduce(93), // lNot, reduce: IntegerLiteral
			reduce(93), // equals, reduce: IntegerLiteral
			reduce(93), // lessOrGreater, reduce: IntegerLiteral
			reduce(93), // or, reduce: IntegerLiteral
			reduce(93), // xor, reduce: IntegerLiteral
			reduce(93), // and, reduce: IntegerLiteral
			reduce(93), // shift, reduce: IntegerLiteral
			reduce(93), // +, reduce: IntegerLiteral
			reduce(93), // -, reduce: IntegerLiteral
			reduce(93), // product, reduce: IntegerLiteral
			reduce(93), // (, reduce: IntegerLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(93), // [, reduce: IntegerLiteral
			reduce(93), // ], reduce: IntegerLiteral
			reduce(93), // ., reduce: IntegerLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S229
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(94), // ,, reduce: FloatLiteral
			nil,        // :
			reduce(94), // lOr, reduce: FloatLiteral
			reduce(94), // lAnd, reduce: FloatLiteral
			reduce(94), // lNot, reduce: FloatLiteral
			reduce(94), // equals, reduce: FloatLiteral
			reduce(94), // lessOrGreater, reduce: FloatLiteral
			reduce(94), // or, reduce: FloatLiteral
			reduce(94), // xor, reduce: FloatLiteral
			reduce(94), // and, reduce: FloatLiteral
			reduce(94), // shift, reduce: FloatLiteral
			reduce(94), // +, reduce: FloatLiteral
			reduce(94), // -, reduce: FloatLiteral
			reduce(94), // product, reduce: FloatLiteral
			reduce(94), // (, reduce: FloatLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(94), // [, reduce: FloatLiteral
			reduce(94), // ], reduce: FloatLiteral
			reduce(94), // ., reduce: FloatLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S230
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(95), // ,, reduce: StringLiteral
			nil,        // :
			reduce(95), // lOr, reduce: StringLiteral
			reduce(95), // lAnd, reduce: StringLiteral
			reduce(95), // lNot, reduce: StringLiteral
			reduce(95), // equals, reduce: StringLiteral
			reduce(95), // lessOrGreater, reduce: StringLiteral
			reduce(95), // or, reduce: StringLiteral
			reduce(95), // xor, reduce: StringLiteral
			reduce(95), // and, reduce: StringLiteral
			reduce(95), // shift, reduce: StringLiteral
			reduce(95), // +, reduce: StringLiteral
			reduce(95), // -, reduce: StringLiteral
			reduce(95), // product, reduce: StringLiteral
			reduce(95), // (, reduce: StringLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(95), // [, reduce: StringLiteral
			reduce(95), // ], reduce: StringLiteral
			reduce(95), // ., reduce: StringLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S231
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			shift(669), // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S232
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(112), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(28),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(37),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(39),  // kwdIf
			nil,        // kwdElse
			shift(40),  // kwdFor
			shift(42),  // identifier
			shift(51),  // kwdNull
			shift(52),  // boolLit
			shift(53),  // intLit
			shift(54),  // floatLit
			shift(55),  // stringLit
			shift(56),  // kwdFn
		},
	},
	actionRow{ // S233
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(416), // {
			nil,        // }
			nil,        // kwdReturn
			shift(671), // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(434), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(441), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(443), // kwdIf
			nil,        // kwdElse
			shift(444), // kwdFor
			shift(446), // identifier
			shift(455), // kwdNull
			shift(456), // boolLit
			shift(457), // intLit
			shift(458), // floatLit
			shift(459), // stringLit
			shift(460), // kwdFn
		},
	},
	actionRow{ // S234
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(674), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S235
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(19), // {, reduce: Expression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			shift(675), // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S236
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(20), // {, reduce: Expression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S237
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(21), // {, reduce: Expression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S238
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(22), // {, reduce: Expression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S239
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(24), // {, reduce: Term1
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(24), // lOr, reduce: Term1
			shift(676), // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S240
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(26), // {, reduce: Term2
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(26), // lOr, reduce: Term2
			reduce(26), // lAnd, reduce: Term2
			shift(677), // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S241
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(28), // {, reduce: Term3
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(28), // lOr, reduce: Term3
			reduce(28), // lAnd, reduce: Term3
			reduce(28), // lNot, reduce: Term3
			shift(678), // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S242
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(30), // {, reduce: Term4
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(30), // lOr, reduce: Term4
			reduce(30), // lAnd, reduce: Term4
			reduce(30), // lNot, reduce: Term4
			reduce(30), // equals, reduce: Term4
			shift(679), // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S243
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(32), // {, reduce: Term5
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(32), // lOr, reduce: Term5
			reduce(32), // lAnd, reduce: Term5
			reduce(32), // lNot, reduce: Term5
			reduce(32), // equals, reduce: Term5
			reduce(32), // lessOrGreater, reduce: Term5
			shift(680), // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S244
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(34), // {, reduce: Term6
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(34), // lOr, reduce: Term6
			reduce(34), // lAnd, reduce: Term6
			reduce(34), // lNot, reduce: Term6
			reduce(34), // equals, reduce: Term6
			reduce(34), // lessOrGreater, reduce: Term6
			reduce(34), // or, reduce: Term6
			shift(681), // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S245
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(36), // {, reduce: Term7
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(36), // lOr, reduce: Term7
			reduce(36), // lAnd, reduce: Term7
			reduce(36), // lNot, reduce: Term7
			reduce(36), // equals, reduce: Term7
			reduce(36), // lessOrGreater, reduce: Term7
			reduce(36), // or, reduce: Term7
			reduce(36), // xor, reduce: Term7
			shift(682), // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S246
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(38), // {, reduce: Term8
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(38), // lOr, reduce: Term8
			reduce(38), // lAnd, reduce: Term8
			reduce(38), // lNot, reduce: Term8
			reduce(38), // equals, reduce: Term8
			reduce(38), // lessOrGreater, reduce: Term8
			reduce(38), // or, reduce: Term8
			reduce(38), // xor, reduce: Term8
			reduce(38), // and, reduce: Term8
			shift(683), // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S247
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(40), // {, reduce: Term9
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(40), // lOr, reduce: Term9
			reduce(40), // lAnd, reduce: Term9
			reduce(40), // lNot, reduce: Term9
			reduce(40), // equals, reduce: Term9
			reduce(40), // lessOrGreater, reduce: Term9
			reduce(40), // or, reduce: Term9
			reduce(40), // xor, reduce: Term9
			reduce(40), // and, reduce: Term9
			reduce(40), // shift, reduce: Term9
			shift(684), // +
			shift(685), // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S248
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(43), // {, reduce: Term10
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(43), // lOr, reduce: Term10
			reduce(43), // lAnd, reduce: Term10
			reduce(43), // lNot, reduce: Term10
			reduce(43), // equals, reduce: Term10
			reduce(43), // lessOrGreater, reduce: Term10
			reduce(43), // or, reduce: Term10
			reduce(43), // xor, reduce: Term10
			reduce(43), // and, reduce: Term10
			reduce(43), // shift, reduce: Term10
			reduce(43), // +, reduce: Term10
			reduce(43), // -, reduce: Term10
			shift(686), // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S249
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(45), // {, reduce: Term11
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(45), // lOr, reduce: Term11
			reduce(45), // lAnd, reduce: Term11
			reduce(45), // lNot, reduce: Term11
			reduce(45), // equals, reduce: Term11
			reduce(45), // lessOrGreater, reduce: Term11
			reduce(45), // or, reduce: Term11
			reduce(45), // xor, reduce: Term11
			reduce(45), // and, reduce: Term11
			reduce(45), // shift, reduce: Term11
			reduce(45), // +, reduce: Term11
			reduce(45), // -, reduce: Term11
			reduce(45), // product, reduce: Term11
			shift(687), // (
			nil,        // )
			nil,        // !
			nil,        // ~
			shift(688), // [
			nil,        // ]
			shift(689), // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S250
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(46), // {, reduce: Term12
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(46), // lOr, reduce: Term12
			reduce(46), // lAnd, reduce: Term12
			reduce(46), // lNot, reduce: Term12
			reduce(46), // equals, reduce: Term12
			reduce(46), // lessOrGreater, reduce: Term12
			reduce(46), // or, reduce: Term12
			reduce(46), // xor, reduce: Term12
			reduce(46), // and, reduce: Term12
			reduce(46), // shift, reduce: Term12
			reduce(46), // +, reduce: Term12
			reduce(46), // -, reduce: Term12
			reduce(46), // product, reduce: Term12
			reduce(46), // (, reduce: Term12
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(46), // [, reduce: Term12
			nil,        // ]
			reduce(46), // ., reduce: Term12
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S251
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(129), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(147), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(154), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(156), // kwdIf
			nil,        // kwdElse
			shift(157), // kwdFor
			shift(159), // identifier
			shift(168), // kwdNull
			shift(169), // boolLit
			shift(170), // intLit
			shift(171), // floatLit
			shift(172), // stringLit
			shift(173), // kwdFn
		},
	},
	actionRow{ // S252
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(48), // {, reduce: PrefixExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(48), // lOr, reduce: PrefixExpression
			reduce(48), // lAnd, reduce: PrefixExpression
			reduce(48), // lNot, reduce: PrefixExpression
			reduce(48), // equals, reduce: PrefixExpression
			reduce(48), // lessOrGreater, reduce: PrefixExpression
			reduce(48), // or, reduce: PrefixExpression
			reduce(48), // xor, reduce: PrefixExpression
			reduce(48), // and, reduce: PrefixExpression
			reduce(48), // shift, reduce: PrefixExpression
			reduce(48), // +, reduce: PrefixExpression
			reduce(48), // -, reduce: PrefixExpression
			reduce(48), // product, reduce: PrefixExpression
			reduce(48), // (, reduce: PrefixExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(48), // [, reduce: PrefixExpression
			nil,        // ]
			reduce(48), // ., reduce: PrefixExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S253
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(233), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(176), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(258), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(696), // identifier
			shift(272), // kwdNull
			shift(273), // boolLit
			shift(274), // intLit
			shift(275), // floatLit
			shift(276), // stringLit
			shift(277), // kwdFn
		},
	},
	actionRow{ // S254
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(54), // {, reduce: PrimaryExpr
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(54), // lOr, reduce: PrimaryExpr
			reduce(54), // lAnd, reduce: PrimaryExpr
			reduce(54), // lNot, reduce: PrimaryExpr
			reduce(54), // equals, reduce: PrimaryExpr
			reduce(54), // lessOrGreater, reduce: PrimaryExpr
			reduce(54), // or, reduce: PrimaryExpr
			reduce(54), // xor, reduce: PrimaryExpr
			reduce(54), // and, reduce: PrimaryExpr
			reduce(54), // shift, reduce: PrimaryExpr
			reduce(54), // +, reduce: PrimaryExpr
			reduce(54), // -, reduce: PrimaryExpr
			reduce(54), // product, reduce: PrimaryExpr
			reduce(54), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(54), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(54), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S255
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(55), // {, reduce: PrimaryExpr
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(55), // lOr, reduce: PrimaryExpr
			reduce(55), // lAnd, reduce: PrimaryExpr
			reduce(55), // lNot, reduce: PrimaryExpr
			reduce(55), // equals, reduce: PrimaryExpr
			reduce(55), // lessOrGreater, reduce: PrimaryExpr
			reduce(55), // or, reduce: PrimaryExpr
			reduce(55), // xor, reduce: PrimaryExpr
			reduce(55), // and, reduce: PrimaryExpr
			reduce(55), // shift, reduce: PrimaryExpr
			reduce(55), // +, reduce: PrimaryExpr
			reduce(55), // -, reduce: PrimaryExpr
			reduce(55), // product, reduce: PrimaryExpr
			reduce(55), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(55), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(55), // ., reduce: PrimaryExpr
			shift(697), // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S256
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(56), // {, reduce: PrimaryExpr
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(56), // lOr, reduce: PrimaryExpr
			reduce(56), // lAnd, reduce: PrimaryExpr
			reduce(56), // lNot, reduce: PrimaryExpr
			reduce(56), // equals, reduce: PrimaryExpr
			reduce(56), // lessOrGreater, reduce: PrimaryExpr
			reduce(56), // or, reduce: PrimaryExpr
			reduce(56), // xor, reduce: PrimaryExpr
			reduce(56), // and, reduce: PrimaryExpr
			reduce(56), // shift, reduce: PrimaryExpr
			reduce(56), // +, reduce: PrimaryExpr
			reduce(56), // -, reduce: PrimaryExpr
			reduce(56), // product, reduce: PrimaryExpr
			reduce(56), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(56), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(56), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S257
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(57), // {, reduce: PrimaryExpr
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(57), // lOr, reduce: PrimaryExpr
			reduce(57), // lAnd, reduce: PrimaryExpr
			reduce(57), // lNot, reduce: PrimaryExpr
			reduce(57), // equals, reduce: PrimaryExpr
			reduce(57), // lessOrGreater, reduce: PrimaryExpr
			reduce(57), // or, reduce: PrimaryExpr
			reduce(57), // xor, reduce: PrimaryExpr
			reduce(57), // and, reduce: PrimaryExpr
			reduce(57), // shift, reduce: PrimaryExpr
			reduce(57), // +, reduce: PrimaryExpr
			reduce(57), // -, reduce: PrimaryExpr
			reduce(57), // product, reduce: PrimaryExpr
			reduce(57), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(57), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(57), // ., reduce: PrimaryExpr
			shift(698), // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S258
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(185), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(204), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(211), // [
			shift(700), // ]
			nil,        // .
			nil,        // assign
			shift(214), // kwdIf
			nil,        // kwdElse
			shift(215), // kwdFor
			shift(217), // identifier
			shift(226), // kwdNull
			shift(227), // boolLit
			shift(228), // intLit
			shift(229), // floatLit
			shift(230), // stringLit
			shift(231), // kwdFn
		},
	},
	actionRow{ // S259
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(79), // {, reduce: Operand
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(79), // lOr, reduce: Operand
			reduce(79), // lAnd, reduce: Operand
			reduce(79), // lNot, reduce: Operand
			reduce(79), // equals, reduce: Operand
			reduce(79), // lessOrGreater, reduce: Operand
			reduce(79), // or, reduce: Operand
			reduce(79), // xor, reduce: Operand
			reduce(79), // and, reduce: Operand
			reduce(79), // shift, reduce: Operand
			reduce(79), // +, reduce: Operand
			reduce(79), // -, reduce: Operand
			reduce(79), // product, reduce: Operand
			reduce(79), // (, reduce: Operand
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(79), // [, reduce: Operand
			nil,        // ]
			reduce(79), // ., reduce: Operand
			shift(701), // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S260
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(233), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(251), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(258), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(260), // kwdIf
			nil,        // kwdElse
			shift(261), // kwdFor
			shift(263), // identifier
			shift(272), // kwdNull
			shift(273), // boolLit
			shift(274), // intLit
			shift(275), // floatLit
			shift(276), // stringLit
			shift(277), // kwdFn
		},
	},
	actionRow{ // S261
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			shift(703), // terminator
			shift(705), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(298), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(305), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(307), // kwdIf
			nil,        // kwdElse
			shift(308), // kwdFor
			shift(310), // identifier
			shift(319), // kwdNull
			shift(320), // boolLit
			shift(321), // intLit
			shift(322), // floatLit
			shift(323), // stringLit
			shift(324), // kwdFn
		},
	},
	actionRow{ // S262
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(78), // {, reduce: Operand
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(78), // lOr, reduce: Operand
			reduce(78), // lAnd, reduce: Operand
			reduce(78), // lNot, reduce: Operand
			reduce(78), // equals, reduce: Operand
			reduce(78), // lessOrGreater, reduce: Operand
			reduce(78), // or, reduce: Operand
			reduce(78), // xor, reduce: Operand
			reduce(78), // and, reduce: Operand
			reduce(78), // shift, reduce: Operand
			reduce(78), // +, reduce: Operand
			reduce(78), // -, reduce: Operand
			reduce(78), // product, reduce: Operand
			reduce(78), // (, reduce: Operand
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(78), // [, reduce: Operand
			nil,        // ]
			reduce(78), // ., reduce: Operand
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S263
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(82), // {, reduce: Identifier
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(82), // lOr, reduce: Identifier
			reduce(82), // lAnd, reduce: Identifier
			reduce(82), // lNot, reduce: Identifier
			reduce(82), // equals, reduce: Identifier
			reduce(82), // lessOrGreater, reduce: Identifier
			reduce(82), // or, reduce: Identifier
			reduce(82), // xor, reduce: Identifier
			reduce(82), // and, reduce: Identifier
			reduce(82), // shift, reduce: Identifier
			reduce(82), // +, reduce: Identifier
			reduce(82), // -, reduce: Identifier
			reduce(82), // product, reduce: Identifier
			reduce(82), // (, reduce: Identifier
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(82), // [, reduce: Identifier
			nil,        // ]
			reduce(82), // ., reduce: Identifier
			reduce(82), // assign, reduce: Identifier
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S264
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(83), // {, reduce: Literal
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(83), // lOr, reduce: Literal
			reduce(83), // lAnd, reduce: Literal
			reduce(83), // lNot, reduce: Literal
			reduce(83), // equals, reduce: Literal
			reduce(83), // lessOrGreater, reduce: Literal
			reduce(83), // or, reduce: Literal
			reduce(83), // xor, reduce: Literal
			reduce(83), // and, reduce: Literal
			reduce(83), // shift, reduce: Literal
			reduce(83), // +, reduce: Literal
			reduce(83), // -, reduce: Literal
			reduce(83), // product, reduce: Literal
			reduce(83), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(83), // [, reduce: Literal
			nil,        // ]
			reduce(83), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S265
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(84), // {, reduce: Literal
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(84), // lOr, reduce: Literal
			reduce(84), // lAnd, reduce: Literal
			reduce(84), // lNot, reduce: Literal
			reduce(84), // equals, reduce: Literal
			reduce(84), // lessOrGreater, reduce: Literal
			reduce(84), // or, reduce: Literal
			reduce(84), // xor, reduce: Literal
			reduce(84), // and, reduce: Literal
			reduce(84), // shift, reduce: Literal
			reduce(84), // +, reduce: Literal
			reduce(84), // -, reduce: Literal
			reduce(84), // product, reduce: Literal
			reduce(84), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(84), // [, reduce: Literal
			nil,        // ]
			reduce(84), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S266
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(85), // {, reduce: Literal
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(85), // lOr, reduce: Literal
			reduce(85), // lAnd, reduce: Literal
			reduce(85), // lNot, reduce: Literal
			reduce(85), // equals, reduce: Literal
			reduce(85), // lessOrGreater, reduce: Literal
			reduce(85), // or, reduce: Literal
			reduce(85), // xor, reduce: Literal
			reduce(85), // and, reduce: Literal
			reduce(85), // shift, reduce: Literal
			reduce(85), // +, reduce: Literal
			reduce(85), // -, reduce: Literal
			reduce(85), // product, reduce: Literal
			reduce(85), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(85), // [, reduce: Literal
			nil,        // ]
			reduce(85), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S267
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(86), // {, reduce: Literal
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(86), // lOr, reduce: Literal
			reduce(86), // lAnd, reduce: Literal
			reduce(86), // lNot, reduce: Literal
			reduce(86), // equals, reduce: Literal
			reduce(86), // lessOrGreater, reduce: Literal
			reduce(86), // or, reduce: Literal
			reduce(86), // xor, reduce: Literal
			reduce(86), // and, reduce: Literal
			reduce(86), // shift, reduce: Literal
			reduce(86), // +, reduce: Literal
			reduce(86), // -, reduce: Literal
			reduce(86), // product, reduce: Literal
			reduce(86), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(86), // [, reduce: Literal
			nil,        // ]
			reduce(86), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S268
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(87), // {, reduce: Literal
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(87), // lOr, reduce: Literal
			reduce(87), // lAnd, reduce: Literal
			reduce(87), // lNot, reduce: Literal
			reduce(87), // equals, reduce: Literal
			reduce(87), // lessOrGreater, reduce: Literal
			reduce(87), // or, reduce: Literal
			reduce(87), // xor, reduce: Literal
			reduce(87), // and, reduce: Literal
			reduce(87), // shift, reduce: Literal
			reduce(87), // +, reduce: Literal
			reduce(87), // -, reduce: Literal
			reduce(87), // product, reduce: Literal
			reduce(87), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(87), // [, reduce: Literal
			nil,        // ]
			reduce(87), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S269
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(88), // {, reduce: Literal
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(88), // lOr, reduce: Literal
			reduce(88), // lAnd, reduce: Literal
			reduce(88), // lNot, reduce: Literal
			reduce(88), // equals, reduce: Literal
			reduce(88), // lessOrGreater, reduce: Literal
			reduce(88), // or, reduce: Literal
			reduce(88), // xor, reduce: Literal
			reduce(88), // and, reduce: Literal
			reduce(88), // shift, reduce: Literal
			reduce(88), // +, reduce: Literal
			reduce(88), // -, reduce: Literal
			reduce(88), // product, reduce: Literal
			reduce(88), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(88), // [, reduce: Literal
			nil,        // ]
			reduce(88), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S270
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(89), // {, reduce: Literal
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(89), // lOr, reduce: Literal
			reduce(89), // lAnd, reduce: Literal
			reduce(89), // lNot, reduce: Literal
			reduce(89), // equals, reduce: Literal
			reduce(89), // lessOrGreater, reduce: Literal
			reduce(89), // or, reduce: Literal
			reduce(89), // xor, reduce: Literal
			reduce(89), // and, reduce: Literal
			reduce(89), // shift, reduce: Literal
			reduce(89), // +, reduce: Literal
			reduce(89), // -, reduce: Literal
			reduce(89), // product, reduce: Literal
			reduce(89), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(89), // [, reduce: Literal
			nil,        // ]
			reduce(89), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S271
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(90), // {, reduce: Literal
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(90), // lOr, reduce: Literal
			reduce(90), // lAnd, reduce: Literal
			reduce(90), // lNot, reduce: Literal
			reduce(90), // equals, reduce: Literal
			reduce(90), // lessOrGreater, reduce: Literal
			reduce(90), // or, reduce: Literal
			reduce(90), // xor, reduce: Literal
			reduce(90), // and, reduce: Literal
			reduce(90), // shift, reduce: Literal
			reduce(90), // +, reduce: Literal
			reduce(90), // -, reduce: Literal
			reduce(90), // product, reduce: Literal
			reduce(90), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(90), // [, reduce: Literal
			nil,        // ]
			reduce(90), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S272
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(91), // {, reduce: Null
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(91), // lOr, reduce: Null
			reduce(91), // lAnd, reduce: Null
			reduce(91), // lNot, reduce: Null
			reduce(91), // equals, reduce: Null
			reduce(91), // lessOrGreater, reduce: Null
			reduce(91), // or, reduce: Null
			reduce(91), // xor, reduce: Null
			reduce(91), // and, reduce: Null
			reduce(91), // shift, reduce: Null
			reduce(91), // +, reduce: Null
			reduce(91), // -, reduce: Null
			reduce(91), // product, reduce: Null
			reduce(91), // (, reduce: Null
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(91), // [, reduce: Null
			nil,        // ]
			reduce(91), // ., reduce: Null
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S273
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(92), // {, reduce: BooleanLiteral
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(92), // lOr, reduce: BooleanLiteral
			reduce(92), // lAnd, reduce: BooleanLiteral
			reduce(92), // lNot, reduce: BooleanLiteral
			reduce(92), // equals, reduce: BooleanLiteral
			reduce(92), // lessOrGreater, reduce: BooleanLiteral
			reduce(92), // or, reduce: BooleanLiteral
			reduce(92), // xor, reduce: BooleanLiteral
			reduce(92), // and, reduce: BooleanLiteral
			reduce(92), // shift, reduce: BooleanLiteral
			reduce(92), // +, reduce: BooleanLiteral
			reduce(92), // -, reduce: BooleanLiteral
			reduce(92), // product, reduce: BooleanLiteral
			reduce(92), // (, reduce: BooleanLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(92), // [, reduce: BooleanLiteral
			nil,        // ]
			reduce(92), // ., reduce: BooleanLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S274
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(93), // {, reduce: IntegerLiteral
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(93), // lOr, reduce: IntegerLiteral
			reduce(93), // lAnd, reduce: IntegerLiteral
			reduce(93), // lNot, reduce: IntegerLiteral
			reduce(93), // equals, reduce: IntegerLiteral
			reduce(93), // lessOrGreater, reduce: IntegerLiteral
			reduce(93), // or, reduce: IntegerLiteral
			reduce(93), // xor, reduce: IntegerLiteral
			reduce(93), // and, reduce: IntegerLiteral
			reduce(93), // shift, reduce: IntegerLiteral
			reduce(93), // +, reduce: IntegerLiteral
			reduce(93), // -, reduce: IntegerLiteral
			reduce(93), // product, reduce: IntegerLiteral
			reduce(93), // (, reduce: IntegerLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(93), // [, reduce: IntegerLiteral
			nil,        // ]
			reduce(93), // ., reduce: IntegerLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S275
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(94), // {, reduce: FloatLiteral
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(94), // lOr, reduce: FloatLiteral
			reduce(94), // lAnd, reduce: FloatLiteral
			reduce(94), // lNot, reduce: FloatLiteral
			reduce(94), // equals, reduce: FloatLiteral
			reduce(94), // lessOrGreater, reduce: FloatLiteral
			reduce(94), // or, reduce: FloatLiteral
			reduce(94), // xor, reduce: FloatLiteral
			reduce(94), // and, reduce: FloatLiteral
			reduce(94), // shift, reduce: FloatLiteral
			reduce(94), // +, reduce: FloatLiteral
			reduce(94), // -, reduce: FloatLiteral
			reduce(94), // product, reduce: FloatLiteral
			reduce(94), // (, reduce: FloatLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(94), // [, reduce: FloatLiteral
			nil,        // ]
			reduce(94), // ., reduce: FloatLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S276
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(95), // {, reduce: StringLiteral
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(95), // lOr, reduce: StringLiteral
			reduce(95), // lAnd, reduce: StringLiteral
			reduce(95), // lNot, reduce: StringLiteral
			reduce(95), // equals, reduce: StringLiteral
			reduce(95), // lessOrGreater, reduce: StringLiteral
			reduce(95), // or, reduce: StringLiteral
			reduce(95), // xor, reduce: StringLiteral
			reduce(95), // and, reduce: StringLiteral
			reduce(95), // shift, reduce: StringLiteral
			reduce(95), // +, reduce: StringLiteral
			reduce(95), // -, reduce: StringLiteral
			reduce(95), // product, reduce: StringLiteral
			reduce(95), // (, reduce: StringLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(95), // [, reduce: StringLiteral
			nil,        // ]
			reduce(95), // ., reduce: StringLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S277
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			shift(707), // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S278
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			shift(708), // terminator
			shift(709), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(727), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(734), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(736), // kwdIf
			nil,        // kwdElse
			shift(737), // kwdFor
			shift(739), // identifier
			shift(748), // kwdNull
			shift(749), // boolLit
			shift(750), // intLit
			shift(751), // floatLit
			shift(752), // stringLit
			shift(753), // kwdFn
		},
	},
	actionRow{ // S279
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(68), // $, reduce: ForExpression
			reduce(68), // terminator, reduce: ForExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S280
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(63),  // {
			shift(64),  // }
			shift(65),  // kwdReturn
			shift(754), // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(85),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(92),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(94),  // kwdIf
			nil,        // kwdElse
			shift(95),  // kwdFor
			shift(97),  // identifier
			shift(106), // kwdNull
			shift(107), // boolLit
			shift(108), // intLit
			shift(109), // floatLit
			shift(110), // stringLit
			shift(111), // kwdFn
		},
	},
	actionRow{ // S281
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			shift(756), // terminator
			shift(758), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S282
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(19), // terminator, reduce: Expression
			reduce(19), // {, reduce: Expression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			shift(759), // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S283
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(20), // terminator, reduce: Expression
			reduce(20), // {, reduce: Expression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S284
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(21), // terminator, reduce: Expression
			reduce(21), // {, reduce: Expression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S285
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(22), // terminator, reduce: Expression
			reduce(22), // {, reduce: Expression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S286
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(24), // terminator, reduce: Term1
			reduce(24), // {, reduce: Term1
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(24), // lOr, reduce: Term1
			shift(760), // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S287
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(26), // terminator, reduce: Term2
			reduce(26), // {, reduce: Term2
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(26), // lOr, reduce: Term2
			reduce(26), // lAnd, reduce: Term2
			shift(761), // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S288
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(28), // terminator, reduce: Term3
			reduce(28), // {, reduce: Term3
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(28), // lOr, reduce: Term3
			reduce(28), // lAnd, reduce: Term3
			reduce(28), // lNot, reduce: Term3
			shift(762), // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S289
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(30), // terminator, reduce: Term4
			reduce(30), // {, reduce: Term4
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(30), // lOr, reduce: Term4
			reduce(30), // lAnd, reduce: Term4
			reduce(30), // lNot, reduce: Term4
			reduce(30), // equals, reduce: Term4
			shift(763), // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S290
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(32), // terminator, reduce: Term5
			reduce(32), // {, reduce: Term5
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(32), // lOr, reduce: Term5
			reduce(32), // lAnd, reduce: Term5
			reduce(32), // lNot, reduce: Term5
			reduce(32), // equals, reduce: Term5
			reduce(32), // lessOrGreater, reduce: Term5
			shift(764), // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S291
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(34), // terminator, reduce: Term6
			reduce(34), // {, reduce: Term6
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(34), // lOr, reduce: Term6
			reduce(34), // lAnd, reduce: Term6
			reduce(34), // lNot, reduce: Term6
			reduce(34), // equals, reduce: Term6
			reduce(34), // lessOrGreater, reduce: Term6
			reduce(34), // or, reduce: Term6
			shift(765), // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S292
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(36), // terminator, reduce: Term7
			reduce(36), // {, reduce: Term7
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(36), // lOr, reduce: Term7
			reduce(36), // lAnd, reduce: Term7
			reduce(36), // lNot, reduce: Term7
			reduce(36), // equals, reduce: Term7
			reduce(36), // lessOrGreater, reduce: Term7
			reduce(36), // or, reduce: Term7
			reduce(36), // xor, reduce: Term7
			shift(766), // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S293
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(38), // terminator, reduce: Term8
			reduce(38), // {, reduce: Term8
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(38), // lOr, reduce: Term8
			reduce(38), // lAnd, reduce: Term8
			reduce(38), // lNot, reduce: Term8
			reduce(38), // equals, reduce: Term8
			reduce(38), // lessOrGreater, reduce: Term8
			reduce(38), // or, reduce: Term8
			reduce(38), // xor, reduce: Term8
			reduce(38), // and, reduce: Term8
			shift(767), // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S294
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(40), // terminator, reduce: Term9
			reduce(40), // {, reduce: Term9
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(40), // lOr, reduce: Term9
			reduce(40), // lAnd, reduce: Term9
			reduce(40), // lNot, reduce: Term9
			reduce(40), // equals, reduce: Term9
			reduce(40), // lessOrGreater, reduce: Term9
			reduce(40), // or, reduce: Term9
			reduce(40), // xor, reduce: Term9
			reduce(40), // and, reduce: Term9
			reduce(40), // shift, reduce: Term9
			shift(768), // +
			shift(769), // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S295
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(43), // terminator, reduce: Term10
			reduce(43), // {, reduce: Term10
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(43), // lOr, reduce: Term10
			reduce(43), // lAnd, reduce: Term10
			reduce(43), // lNot, reduce: Term10
			reduce(43), // equals, reduce: Term10
			reduce(43), // lessOrGreater, reduce: Term10
			reduce(43), // or, reduce: Term10
			reduce(43), // xor, reduce: Term10
			reduce(43), // and, reduce: Term10
			reduce(43), // shift, reduce: Term10
			reduce(43), // +, reduce: Term10
			reduce(43), // -, reduce: Term10
			shift(770), // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S296
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(45), // terminator, reduce: Term11
			reduce(45), // {, reduce: Term11
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(45), // lOr, reduce: Term11
			reduce(45), // lAnd, reduce: Term11
			reduce(45), // lNot, reduce: Term11
			reduce(45), // equals, reduce: Term11
			reduce(45), // lessOrGreater, reduce: Term11
			reduce(45), // or, reduce: Term11
			reduce(45), // xor, reduce: Term11
			reduce(45), // and, reduce: Term11
			reduce(45), // shift, reduce: Term11
			reduce(45), // +, reduce: Term11
			reduce(45), // -, reduce: Term11
			reduce(45), // product, reduce: Term11
			shift(771), // (
			nil,        // )
			nil,        // !
			nil,        // ~
			shift(772), // [
			nil,        // ]
			shift(773), // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S297
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(46), // terminator, reduce: Term12
			reduce(46), // {, reduce: Term12
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(46), // lOr, reduce: Term12
			reduce(46), // lAnd, reduce: Term12
			reduce(46), // lNot, reduce: Term12
			reduce(46), // equals, reduce: Term12
			reduce(46), // lessOrGreater, reduce: Term12
			reduce(46), // or, reduce: Term12
			reduce(46), // xor, reduce: Term12
			reduce(46), // and, reduce: Term12
			reduce(46), // shift, reduce: Term12
			reduce(46), // +, reduce: Term12
			reduce(46), // -, reduce: Term12
			reduce(46), // product, reduce: Term12
			reduce(46), // (, reduce: Term12
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(46), // [, reduce: Term12
			nil,        // ]
			reduce(46), // ., reduce: Term12
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S298
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(129), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(147), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(154), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(156), // kwdIf
			nil,        // kwdElse
			shift(157), // kwdFor
			shift(159), // identifier
			shift(168), // kwdNull
			shift(169), // boolLit
			shift(170), // intLit
			shift(171), // floatLit
			shift(172), // stringLit
			shift(173), // kwdFn
		},
	},
	actionRow{ // S299
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(48), // terminator, reduce: PrefixExpression
			reduce(48), // {, reduce: PrefixExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(48), // lOr, reduce: PrefixExpression
			reduce(48), // lAnd, reduce: PrefixExpression
			reduce(48), // lNot, reduce: PrefixExpression
			reduce(48), // equals, reduce: PrefixExpression
			reduce(48), // lessOrGreater, reduce: PrefixExpression
			reduce(48), // or, reduce: PrefixExpression
			reduce(48), // xor, reduce: PrefixExpression
			reduce(48), // and, reduce: PrefixExpression
			reduce(48), // shift, reduce: PrefixExpression
			reduce(48), // +, reduce: PrefixExpression
			reduce(48), // -, reduce: PrefixExpression
			reduce(48), // product, reduce: PrefixExpression
			reduce(48), // (, reduce: PrefixExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(48), // [, reduce: PrefixExpression
			nil,        // ]
			reduce(48), // ., reduce: PrefixExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S300
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(775), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(176), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(305), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(781), // identifier
			shift(319), // kwdNull
			shift(320), // boolLit
			shift(321), // intLit
			shift(322), // floatLit
			shift(323), // stringLit
			shift(324), // kwdFn
		},
	},
	actionRow{ // S301
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(54), // terminator, reduce: PrimaryExpr
			reduce(54), // {, reduce: PrimaryExpr
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(54), // lOr, reduce: PrimaryExpr
			reduce(54), // lAnd, reduce: PrimaryExpr
			reduce(54), // lNot, reduce: PrimaryExpr
			reduce(54), // equals, reduce: PrimaryExpr
			reduce(54), // lessOrGreater, reduce: PrimaryExpr
			reduce(54), // or, reduce: PrimaryExpr
			reduce(54), // xor, reduce: PrimaryExpr
			reduce(54), // and, reduce: PrimaryExpr
			reduce(54), // shift, reduce: PrimaryExpr
			reduce(54), // +, reduce: PrimaryExpr
			reduce(54), // -, reduce: PrimaryExpr
			reduce(54), // product, reduce: PrimaryExpr
			reduce(54), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(54), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(54), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S302
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(55), // terminator, reduce: PrimaryExpr
			reduce(55), // {, reduce: PrimaryExpr
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(55), // lOr, reduce: PrimaryExpr
			reduce(55), // lAnd, reduce: PrimaryExpr
			reduce(55), // lNot, reduce: PrimaryExpr
			reduce(55), // equals, reduce: PrimaryExpr
			reduce(55), // lessOrGreater, reduce: PrimaryExpr
			reduce(55), // or, reduce: PrimaryExpr
			reduce(55), // xor, reduce: PrimaryExpr
			reduce(55), // and, reduce: PrimaryExpr
			reduce(55), // shift, reduce: PrimaryExpr
			reduce(55), // +, reduce: PrimaryExpr
			reduce(55), // -, reduce: PrimaryExpr
			reduce(55), // product, reduce: PrimaryExpr
			reduce(55), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(55), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(55), // ., reduce: PrimaryExpr
			shift(782), // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S303
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(56), // terminator, reduce: PrimaryExpr
			reduce(56), // {, reduce: PrimaryExpr
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(56), // lOr, reduce: PrimaryExpr
			reduce(56), // lAnd, reduce: PrimaryExpr
			reduce(56), // lNot, reduce: PrimaryExpr
			reduce(56), // equals, reduce: PrimaryExpr
			reduce(56), // lessOrGreater, reduce: PrimaryExpr
			reduce(56), // or, reduce: PrimaryExpr
			reduce(56), // xor, reduce: PrimaryExpr
			reduce(56), // and, reduce: PrimaryExpr
			reduce(56), // shift, reduce: PrimaryExpr
			reduce(56), // +, reduce: PrimaryExpr
			reduce(56), // -, reduce: PrimaryExpr
			reduce(56), // product, reduce: PrimaryExpr
			reduce(56), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(56), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(56), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S304
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(57), // terminator, reduce: PrimaryExpr
			reduce(57), // {, reduce: PrimaryExpr
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(57), // lOr, reduce: PrimaryExpr
			reduce(57), // lAnd, reduce: PrimaryExpr
			reduce(57), // lNot, reduce: PrimaryExpr
			reduce(57), // equals, reduce: PrimaryExpr
			reduce(57), // lessOrGreater, reduce: PrimaryExpr
			reduce(57), // or, reduce: PrimaryExpr
			reduce(57), // xor, reduce: PrimaryExpr
			reduce(57), // and, reduce: PrimaryExpr
			reduce(57), // shift, reduce: PrimaryExpr
			reduce(57), // +, reduce: PrimaryExpr
			reduce(57), // -, reduce: PrimaryExpr
			reduce(57), // product, reduce: PrimaryExpr
			reduce(57), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(57), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(57), // ., reduce: PrimaryExpr
			shift(783), // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S305
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(185), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(204), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(211), // [
			shift(785), // ]
			nil,        // .
			nil,        // assign
			shift(214), // kwdIf
			nil,        // kwdElse
			shift(215), // kwdFor
			shift(217), // identifier
			shift(226), // kwdNull
			shift(227), // boolLit
			shift(228), // intLit
			shift(229), // floatLit
			shift(230), // stringLit
			shift(231), // kwdFn
		},
	},
	actionRow{ // S306
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(79), // terminator, reduce: Operand
			reduce(79), // {, reduce: Operand
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(79), // lOr, reduce: Operand
			reduce(79), // lAnd, reduce: Operand
			reduce(79), // lNot, reduce: Operand
			reduce(79), // equals, reduce: Operand
			reduce(79), // lessOrGreater, reduce: Operand
			reduce(79), // or, reduce: Operand
			reduce(79), // xor, reduce: Operand
			reduce(79), // and, reduce: Operand
			reduce(79), // shift, reduce: Operand
			reduce(79), // +, reduce: Operand
			reduce(79), // -, reduce: Operand
			reduce(79), // product, reduce: Operand
			reduce(79), // (, reduce: Operand
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(79), // [, reduce: Operand
			nil,        // ]
			reduce(79), // ., reduce: Operand
			shift(786), // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S307
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(233), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(251), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(258), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(260), // kwdIf
			nil,        // kwdElse
			shift(261), // kwdFor
			shift(263), // identifier
			shift(272), // kwdNull
			shift(273), // boolLit
			shift(274), // intLit
			shift(275), // floatLit
			shift(276), // stringLit
			shift(277), // kwdFn
		},
	},
	actionRow{ // S308
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			shift(788), // terminator
			shift(790), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(298), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(305), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(307), // kwdIf
			nil,        // kwdElse
			shift(308), // kwdFor
			shift(310), // identifier
			shift(319), // kwdNull
			shift(320), // boolLit
			shift(321), // intLit
			shift(322), // floatLit
			shift(323), // stringLit
			shift(324), // kwdFn
		},
	},
	actionRow{ // S309
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(78), // terminator, reduce: Operand
			reduce(78), // {, reduce: Operand
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(78), // lOr, reduce: Operand
			reduce(78), // lAnd, reduce: Operand
			reduce(78), // lNot, reduce: Operand
			reduce(78), // equals, reduce: Operand
			reduce(78), // lessOrGreater, reduce: Operand
			reduce(78), // or, reduce: Operand
			reduce(78), // xor, reduce: Operand
			reduce(78), // and, reduce: Operand
			reduce(78), // shift, reduce: Operand
			reduce(78), // +, reduce: Operand
			reduce(78), // -, reduce: Operand
			reduce(78), // product, reduce: Operand
			reduce(78), // (, reduce: Operand
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(78), // [, reduce: Operand
			nil,        // ]
			reduce(78), // ., reduce: Operand
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S310
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(82), // terminator, reduce: Identifier
			reduce(82), // {, reduce: Identifier
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(82), // lOr, reduce: Identifier
			reduce(82), // lAnd, reduce: Identifier
			reduce(82), // lNot, reduce: Identifier
			reduce(82), // equals, reduce: Identifier
			reduce(82), // lessOrGreater, reduce: Identifier
			reduce(82), // or, reduce: Identifier
			reduce(82), // xor, reduce: Identifier
			reduce(82), // and, reduce: Identifier
			reduce(82), // shift, reduce: Identifier
			reduce(82), // +, reduce: Identifier
			reduce(82), // -, reduce: Identifier
			reduce(82), // product, reduce: Identifier
			reduce(82), // (, reduce: Identifier
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(82), // [, reduce: Identifier
			nil,        // ]
			reduce(82), // ., reduce: Identifier
			reduce(82), // assign, reduce: Identifier
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S311
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(83), // terminator, reduce: Literal
			reduce(83), // {, reduce: Literal
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(83), // lOr, reduce: Literal
			reduce(83), // lAnd, reduce: Literal
			reduce(83), // lNot, reduce: Literal
			reduce(83), // equals, reduce: Literal
			reduce(83), // lessOrGreater, reduce: Literal
			reduce(83), // or, reduce: Literal
			reduce(83), // xor, reduce: Literal
			reduce(83), // and, reduce: Literal
			reduce(83), // shift, reduce: Literal
			reduce(83), // +, reduce: Literal
			reduce(83), // -, reduce: Literal
			reduce(83), // product, reduce: Literal
			reduce(83), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(83), // [, reduce: Literal
			nil,        // ]
			reduce(83), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S312
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(84), // terminator, reduce: Literal
			reduce(84), // {, reduce: Literal
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(84), // lOr, reduce: Literal
			reduce(84), // lAnd, reduce: Literal
			reduce(84), // lNot, reduce: Literal
			reduce(84), // equals, reduce: Literal
			reduce(84), // lessOrGreater, reduce: Literal
			reduce(84), // or, reduce: Literal
			reduce(84), // xor, reduce: Literal
			reduce(84), // and, reduce: Literal
			reduce(84), // shift, reduce: Literal
			reduce(84), // +, reduce: Literal
			reduce(84), // -, reduce: Literal
			reduce(84), // product, reduce: Literal
			reduce(84), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(84), // [, reduce: Literal
			nil,        // ]
			reduce(84), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S313
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(85), // terminator, reduce: Literal
			reduce(85), // {, reduce: Literal
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(85), // lOr, reduce: Literal
			reduce(85), // lAnd, reduce: Literal
			reduce(85), // lNot, reduce: Literal
			reduce(85), // equals, reduce: Literal
			reduce(85), // lessOrGreater, reduce: Literal
			reduce(85), // or, reduce: Literal
			reduce(85), // xor, reduce: Literal
			reduce(85), // and, reduce: Literal
			reduce(85), // shift, reduce: Literal
			reduce(85), // +, reduce: Literal
			reduce(85), // -, reduce: Literal
			reduce(85), // product, reduce: Literal
			reduce(85), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(85), // [, reduce: Literal
			nil,        // ]
			reduce(85), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S314
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(86), // terminator, reduce: Literal
			reduce(86), // {, reduce: Literal
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(86), // lOr, reduce: Literal
			reduce(86), // lAnd, reduce: Literal
			reduce(86), // lNot, reduce: Literal
			reduce(86), // equals, reduce: Literal
			reduce(86), // lessOrGreater, reduce: Literal
			reduce(86), // or, reduce: Literal
			reduce(86), // xor, reduce: Literal
			reduce(86), // and, reduce: Literal
			reduce(86), // shift, reduce: Literal
			reduce(86), // +, reduce: Literal
			reduce(86), // -, reduce: Literal
			reduce(86), // product, reduce: Literal
			reduce(86), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(86), // [, reduce: Literal
			nil,        // ]
			reduce(86), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S315
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(87), // terminator, reduce: Literal
			reduce(87), // {, reduce: Literal
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(87), // lOr, reduce: Literal
			reduce(87), // lAnd, reduce: Literal
			reduce(87), // lNot, reduce: Literal
			reduce(87), // equals, reduce: Literal
			reduce(87), // lessOrGreater, reduce: Literal
			reduce(87), // or, reduce: Literal
			reduce(87), // xor, reduce: Literal
			reduce(87), // and, reduce: Literal
			reduce(87), // shift, reduce: Literal
			reduce(87), // +, reduce: Literal
			reduce(87), // -, reduce: Literal
			reduce(87), // product, reduce: Literal
			reduce(87), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(87), // [, reduce: Literal
			nil,        // ]
			reduce(87), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S316
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(88), // terminator, reduce: Literal
			reduce(88), // {, reduce: Literal
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(88), // lOr, reduce: Literal
			reduce(88), // lAnd, reduce: Literal
			reduce(88), // lNot, reduce: Literal
			reduce(88), // equals, reduce: Literal
			reduce(88), // lessOrGreater, reduce: Literal
			reduce(88), // or, reduce: Literal
			reduce(88), // xor, reduce: Literal
			reduce(88), // and, reduce: Literal
			reduce(88), // shift, reduce: Literal
			reduce(88), // +, reduce: Literal
			reduce(88), // -, reduce: Literal
			reduce(88), // product, reduce: Literal
			reduce(88), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(88), // [, reduce: Literal
			nil,        // ]
			reduce(88), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S317
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(89), // terminator, reduce: Literal
			reduce(89), // {, reduce: Literal
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(89), // lOr, reduce: Literal
			reduce(89), // lAnd, reduce: Literal
			reduce(89), // lNot, reduce: Literal
			reduce(89), // equals, reduce: Literal
			reduce(89), // lessOrGreater, reduce: Literal
			reduce(89), // or, reduce: Literal
			reduce(89), // xor, reduce: Literal
			reduce(89), // and, reduce: Literal
			reduce(89), // shift, reduce: Literal
			reduce(89), // +, reduce: Literal
			reduce(89), // -, reduce: Literal
			reduce(89), // product, reduce: Literal
			reduce(89), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(89), // [, reduce: Literal
			nil,        // ]
			reduce(89), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S318
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(90), // terminator, reduce: Literal
			reduce(90), // {, reduce: Literal
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(90), // lOr, reduce: Literal
			reduce(90), // lAnd, reduce: Literal
			reduce(90), // lNot, reduce: Literal
			reduce(90), // equals, reduce: Literal
			reduce(90), // lessOrGreater, reduce: Literal
			reduce(90), // or, reduce: Literal
			reduce(90), // xor, reduce: Literal
			reduce(90), // and, reduce: Literal
			reduce(90), // shift, reduce: Literal
			reduce(90), // +, reduce: Literal
			reduce(90), // -, reduce: Literal
			reduce(90), // product, reduce: Literal
			reduce(90), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(90), // [, reduce: Literal
			nil,        // ]
			reduce(90), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S319
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(91), // terminator, reduce: Null
			reduce(91), // {, reduce: Null
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(91), // lOr, reduce: Null
			reduce(91), // lAnd, reduce: Null
			reduce(91), // lNot, reduce: Null
			reduce(91), // equals, reduce: Null
			reduce(91), // lessOrGreater, reduce: Null
			reduce(91), // or, reduce: Null
			reduce(91), // xor, reduce: Null
			reduce(91), // and, reduce: Null
			reduce(91), // shift, reduce: Null
			reduce(91), // +, reduce: Null
			reduce(91), // -, reduce: Null
			reduce(91), // product, reduce: Null
			reduce(91), // (, reduce: Null
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(91), // [, reduce: Null
			nil,        // ]
			reduce(91), // ., reduce: Null
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S320
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(92), // terminator, reduce: BooleanLiteral
			reduce(92), // {, reduce: BooleanLiteral
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(92), // lOr, reduce: BooleanLiteral
			reduce(92), // lAnd, reduce: BooleanLiteral
			reduce(92), // lNot, reduce: BooleanLiteral
			reduce(92), // equals, reduce: BooleanLiteral
			reduce(92), // lessOrGreater, reduce: BooleanLiteral
			reduce(92), // or, reduce: BooleanLiteral
			reduce(92), // xor, reduce: BooleanLiteral
			reduce(92), // and, reduce: BooleanLiteral
			reduce(92), // shift, reduce: BooleanLiteral
			reduce(92), // +, reduce: BooleanLiteral
			reduce(92), // -, reduce: BooleanLiteral
			reduce(92), // product, reduce: BooleanLiteral
			reduce(92), // (, reduce: BooleanLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(92), // [, reduce: BooleanLiteral
			nil,        // ]
			reduce(92), // ., reduce: BooleanLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S321
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(93), // terminator, reduce: IntegerLiteral
			reduce(93), // {, reduce: IntegerLiteral
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(93), // lOr, reduce: IntegerLiteral
			reduce(93), // lAnd, reduce: IntegerLiteral
			reduce(93), // lNot, reduce: IntegerLiteral
			reduce(93), // equals, reduce: IntegerLiteral
			reduce(93), // lessOrGreater, reduce: IntegerLiteral
			reduce(93), // or, reduce: IntegerLiteral
			reduce(93), // xor, reduce: IntegerLiteral
			reduce(93), // and, reduce: IntegerLiteral
			reduce(93), // shift, reduce: IntegerLiteral
			reduce(93), // +, reduce: IntegerLiteral
			reduce(93), // -, reduce: IntegerLiteral
			reduce(93), // product, reduce: IntegerLiteral
			reduce(93), // (, reduce: IntegerLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(93), // [, reduce: IntegerLiteral
			nil,        // ]
			reduce(93), // ., reduce: IntegerLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S322
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(94), // terminator, reduce: FloatLiteral
			reduce(94), // {, reduce: FloatLiteral
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(94), // lOr, reduce: FloatLiteral
			reduce(94), // lAnd, reduce: FloatLiteral
			reduce(94), // lNot, reduce: FloatLiteral
			reduce(94), // equals, reduce: FloatLiteral
			reduce(94), // lessOrGreater, reduce: FloatLiteral
			reduce(94), // or, reduce: FloatLiteral
			reduce(94), // xor, reduce: FloatLiteral
			reduce(94), // and, reduce: FloatLiteral
			reduce(94), // shift, reduce: FloatLiteral
			reduce(94), // +, reduce: FloatLiteral
			reduce(94), // -, reduce: FloatLiteral
			reduce(94), // product, reduce: FloatLiteral
			reduce(94), // (, reduce: FloatLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(94), // [, reduce: FloatLiteral
			nil,        // ]
			reduce(94), // ., reduce: FloatLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S323
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(95), // terminator, reduce: StringLiteral
			reduce(95), // {, reduce: StringLiteral
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(95), // lOr, reduce: StringLiteral
			reduce(95), // lAnd, reduce: StringLiteral
			reduce(95), // lNot, reduce: StringLiteral
			reduce(95), // equals, reduce: StringLiteral
			reduce(95), // lessOrGreater, reduce: StringLiteral
			reduce(95), // or, reduce: StringLiteral
			reduce(95), // xor, reduce: StringLiteral
			reduce(95), // and, reduce: StringLiteral
			reduce(95), // shift, reduce: StringLiteral
			reduce(95), // +, reduce: StringLiteral
			reduce(95), // -, reduce: StringLiteral
			reduce(95), // product, reduce: StringLiteral
			reduce(95), // (, reduce: StringLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(95), // [, reduce: StringLiteral
			nil,        // ]
			reduce(95), // ., reduce: StringLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S324
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			shift(792), // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S325
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			shift(793), // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(796), // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S326
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(3), // $, reduce: StatementList
			reduce(3), // terminator, reduce: StatementList
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S327
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(4),  // terminator, reduce: StatementList
			shift(798), // {
			reduce(4),  // }, reduce: StatementList
			shift(65),  // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(351), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(358), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(360), // kwdIf
			nil,        // kwdElse
			shift(361), // kwdFor
			shift(363), // identifier
			shift(372), // kwdNull
			shift(373), // boolLit
			shift(374), // intLit
			shift(375), // floatLit
			shift(376), // stringLit
			shift(377), // kwdFn
		},
	},
	actionRow{ // S328
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(8), // $, reduce: BlockStatement
			reduce(8), // terminator, reduce: BlockStatement
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S329
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			shift(327), // terminator
			nil,        // {
			shift(800), // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S330
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			reduce(9), // terminator, reduce: BlockStatement
			nil,       // {
			reduce(9), // }, reduce: BlockStatement
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S331
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			shift(801), // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S332
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			shift(802), // }
			nil,        // kwdReturn
			shift(381), // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S333
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(416), // {
			nil,        // }
			nil,        // kwdReturn
			shift(803), // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(434), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(441), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(443), // kwdIf
			nil,        // kwdElse
			shift(444), // kwdFor
			shift(446), // identifier
			shift(455), // kwdNull
			shift(456), // boolLit
			shift(457), // intLit
			shift(458), // floatLit
			shift(459), // stringLit
			shift(460), // kwdFn
		},
	},
	actionRow{ // S334
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(11), // terminator, reduce: ReturnStatement
			nil,        // {
			reduce(11), // }, reduce: ReturnStatement
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S335
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(19), // terminator, reduce: Expression
			nil,        // {
			reduce(19), // }, reduce: Expression
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			shift(805), // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S336
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(20), // terminator, reduce: Expression
			nil,        // {
			reduce(20), // }, reduce: Expression
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S337
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(21), // terminator, reduce: Expression
			nil,        // {
			reduce(21), // }, reduce: Expression
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S338
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(22), // terminator, reduce: Expression
			nil,        // {
			reduce(22), // }, reduce: Expression
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S339
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(24), // terminator, reduce: Term1
			nil,        // {
			reduce(24), // }, reduce: Term1
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(24), // lOr, reduce: Term1
			shift(806), // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S340
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(26), // terminator, reduce: Term2
			nil,        // {
			reduce(26), // }, reduce: Term2
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(26), // lOr, reduce: Term2
			reduce(26), // lAnd, reduce: Term2
			shift(807), // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S341
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(28), // terminator, reduce: Term3
			nil,        // {
			reduce(28), // }, reduce: Term3
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(28), // lOr, reduce: Term3
			reduce(28), // lAnd, reduce: Term3
			reduce(28), // lNot, reduce: Term3
			shift(808), // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S342
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(30), // terminator, reduce: Term4
			nil,        // {
			reduce(30), // }, reduce: Term4
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(30), // lOr, reduce: Term4
			reduce(30), // lAnd, reduce: Term4
			reduce(30), // lNot, reduce: Term4
			reduce(30), // equals, reduce: Term4
			shift(809), // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S343
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(32), // terminator, reduce: Term5
			nil,        // {
			reduce(32), // }, reduce: Term5
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(32), // lOr, reduce: Term5
			reduce(32), // lAnd, reduce: Term5
			reduce(32), // lNot, reduce: Term5
			reduce(32), // equals, reduce: Term5
			reduce(32), // lessOrGreater, reduce: Term5
			shift(810), // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S344
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(34), // terminator, reduce: Term6
			nil,        // {
			reduce(34), // }, reduce: Term6
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(34), // lOr, reduce: Term6
			reduce(34), // lAnd, reduce: Term6
			reduce(34), // lNot, reduce: Term6
			reduce(34), // equals, reduce: Term6
			reduce(34), // lessOrGreater, reduce: Term6
			reduce(34), // or, reduce: Term6
			shift(811), // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S345
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(36), // terminator, reduce: Term7
			nil,        // {
			reduce(36), // }, reduce: Term7
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(36), // lOr, reduce: Term7
			reduce(36), // lAnd, reduce: Term7
			reduce(36), // lNot, reduce: Term7
			reduce(36), // equals, reduce: Term7
			reduce(36), // lessOrGreater, reduce: Term7
			reduce(36), // or, reduce: Term7
			reduce(36), // xor, reduce: Term7
			shift(812), // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S346
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(38), // terminator, reduce: Term8
			nil,        // {
			reduce(38), // }, reduce: Term8
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(38), // lOr, reduce: Term8
			reduce(38), // lAnd, reduce: Term8
			reduce(38), // lNot, reduce: Term8
			reduce(38), // equals, reduce: Term8
			reduce(38), // lessOrGreater, reduce: Term8
			reduce(38), // or, reduce: Term8
			reduce(38), // xor, reduce: Term8
			reduce(38), // and, reduce: Term8
			shift(813), // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S347
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(40), // terminator, reduce: Term9
			nil,        // {
			reduce(40), // }, reduce: Term9
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(40), // lOr, reduce: Term9
			reduce(40), // lAnd, reduce: Term9
			reduce(40), // lNot, reduce: Term9
			reduce(40), // equals, reduce: Term9
			reduce(40), // lessOrGreater, reduce: Term9
			reduce(40), // or, reduce: Term9
			reduce(40), // xor, reduce: Term9
			reduce(40), // and, reduce: Term9
			reduce(40), // shift, reduce: Term9
			shift(814), // +
			shift(815), // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S348
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(43), // terminator, reduce: Term10
			nil,        // {
			reduce(43), // }, reduce: Term10
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(43), // lOr, reduce: Term10
			reduce(43), // lAnd, reduce: Term10
			reduce(43), // lNot, reduce: Term10
			reduce(43), // equals, reduce: Term10
			reduce(43), // lessOrGreater, reduce: Term10
			reduce(43), // or, reduce: Term10
			reduce(43), // xor, reduce: Term10
			reduce(43), // and, reduce: Term10
			reduce(43), // shift, reduce: Term10
			reduce(43), // +, reduce: Term10
			reduce(43), // -, reduce: Term10
			shift(816), // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S349
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(45), // terminator, reduce: Term11
			nil,        // {
			reduce(45), // }, reduce: Term11
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(45), // lOr, reduce: Term11
			reduce(45), // lAnd, reduce: Term11
			reduce(45), // lNot, reduce: Term11
			reduce(45), // equals, reduce: Term11
			reduce(45), // lessOrGreater, reduce: Term11
			reduce(45), // or, reduce: Term11
			reduce(45), // xor, reduce: Term11
			reduce(45), // and, reduce: Term11
			reduce(45), // shift, reduce: Term11
			reduce(45), // +, reduce: Term11
			reduce(45), // -, reduce: Term11
			reduce(45), // product, reduce: Term11
			shift(817), // (
			nil,        // )
			nil,        // !
			nil,        // ~
			shift(818), // [
			nil,        // ]
			shift(819), // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S350
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(46), // terminator, reduce: Term12
			nil,        // {
			reduce(46), // }, reduce: Term12
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(46), // lOr, reduce: Term12
			reduce(46), // lAnd, reduce: Term12
			reduce(46), // lNot, reduce: Term12
			reduce(46), // equals, reduce: Term12
			reduce(46), // lessOrGreater, reduce: Term12
			reduce(46), // or, reduce: Term12
			reduce(46), // xor, reduce: Term12
			reduce(46), // and, reduce: Term12
			reduce(46), // shift, reduce: Term12
			reduce(46), // +, reduce: Term12
			reduce(46), // -, reduce: Term12
			reduce(46), // product, reduce: Term12
			reduce(46), // (, reduce: Term12
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(46), // [, reduce: Term12
			nil,        // ]
			reduce(46), // ., reduce: Term12
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S351
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(129), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(147), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(154), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(156), // kwdIf
			nil,        // kwdElse
			shift(157), // kwdFor
			shift(159), // identifier
			shift(168), // kwdNull
			shift(169), // boolLit
			shift(170), // intLit
			shift(171), // floatLit
			shift(172), // stringLit
			shift(173), // kwdFn
		},
	},
	actionRow{ // S352
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(48), // terminator, reduce: PrefixExpression
			nil,        // {
			reduce(48), // }, reduce: PrefixExpression
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(48), // lOr, reduce: PrefixExpression
			reduce(48), // lAnd, reduce: PrefixExpression
			reduce(48), // lNot, reduce: PrefixExpression
			reduce(48), // equals, reduce: PrefixExpression
			reduce(48), // lessOrGreater, reduce: PrefixExpression
			reduce(48), // or, reduce: PrefixExpression
			reduce(48), // xor, reduce: PrefixExpression
			reduce(48), // and, reduce: PrefixExpression
			reduce(48), // shift, reduce: PrefixExpression
			reduce(48), // +, reduce: PrefixExpression
			reduce(48), // -, reduce: PrefixExpression
			reduce(48), // product, reduce: PrefixExpression
			reduce(48), // (, reduce: PrefixExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(48), // [, reduce: PrefixExpression
			nil,        // ]
			reduce(48), // ., reduce: PrefixExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S353
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(333), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(176), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(358), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(826), // identifier
			shift(372), // kwdNull
			shift(373), // boolLit
			shift(374), // intLit
			shift(375), // floatLit
			shift(376), // stringLit
			shift(377), // kwdFn
		},
	},
	actionRow{ // S354
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(54), // terminator, reduce: PrimaryExpr
			nil,        // {
			reduce(54), // }, reduce: PrimaryExpr
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(54), // lOr, reduce: PrimaryExpr
			reduce(54), // lAnd, reduce: PrimaryExpr
			reduce(54), // lNot, reduce: PrimaryExpr
			reduce(54), // equals, reduce: PrimaryExpr
			reduce(54), // lessOrGreater, reduce: PrimaryExpr
			reduce(54), // or, reduce: PrimaryExpr
			reduce(54), // xor, reduce: PrimaryExpr
			reduce(54), // and, reduce: PrimaryExpr
			reduce(54), // shift, reduce: PrimaryExpr
			reduce(54), // +, reduce: PrimaryExpr
			reduce(54), // -, reduce: PrimaryExpr
			reduce(54), // product, reduce: PrimaryExpr
			reduce(54), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(54), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(54), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S355
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(55), // terminator, reduce: PrimaryExpr
			nil,        // {
			reduce(55), // }, reduce: PrimaryExpr
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(55), // lOr, reduce: PrimaryExpr
			reduce(55), // lAnd, reduce: PrimaryExpr
			reduce(55), // lNot, reduce: PrimaryExpr
			reduce(55), // equals, reduce: PrimaryExpr
			reduce(55), // lessOrGreater, reduce: PrimaryExpr
			reduce(55), // or, reduce: PrimaryExpr
			reduce(55), // xor, reduce: PrimaryExpr
			reduce(55), // and, reduce: PrimaryExpr
			reduce(55), // shift, reduce: PrimaryExpr
			reduce(55), // +, reduce: PrimaryExpr
			reduce(55), // -, reduce: PrimaryExpr
			reduce(55), // product, reduce: PrimaryExpr
			reduce(55), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(55), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(55), // ., reduce: PrimaryExpr
			shift(827), // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S356
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(56), // terminator, reduce: PrimaryExpr
			nil,        // {
			reduce(56), // }, reduce: PrimaryExpr
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(56), // lOr, reduce: PrimaryExpr
			reduce(56), // lAnd, reduce: PrimaryExpr
			reduce(56), // lNot, reduce: PrimaryExpr
			reduce(56), // equals, reduce: PrimaryExpr
			reduce(56), // lessOrGreater, reduce: PrimaryExpr
			reduce(56), // or, reduce: PrimaryExpr
			reduce(56), // xor, reduce: PrimaryExpr
			reduce(56), // and, reduce: PrimaryExpr
			reduce(56), // shift, reduce: PrimaryExpr
			reduce(56), // +, reduce: PrimaryExpr
			reduce(56), // -, reduce: PrimaryExpr
			reduce(56), // product, reduce: PrimaryExpr
			reduce(56), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(56), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(56), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S357
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(57), // terminator, reduce: PrimaryExpr
			nil,        // {
			reduce(57), // }, reduce: PrimaryExpr
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(57), // lOr, reduce: PrimaryExpr
			reduce(57), // lAnd, reduce: PrimaryExpr
			reduce(57), // lNot, reduce: PrimaryExpr
			reduce(57), // equals, reduce: PrimaryExpr
			reduce(57), // lessOrGreater, reduce: PrimaryExpr
			reduce(57), // or, reduce: PrimaryExpr
			reduce(57), // xor, reduce: PrimaryExpr
			reduce(57), // and, reduce: PrimaryExpr
			reduce(57), // shift, reduce: PrimaryExpr
			reduce(57), // +, reduce: PrimaryExpr
			reduce(57), // -, reduce: PrimaryExpr
			reduce(57), // product, reduce: PrimaryExpr
			reduce(57), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(57), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(57), // ., reduce: PrimaryExpr
			shift(828), // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S358
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(185), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(204), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(211), // [
			shift(830), // ]
			nil,        // .
			nil,        // assign
			shift(214), // kwdIf
			nil,        // kwdElse
			shift(215), // kwdFor
			shift(217), // identifier
			shift(226), // kwdNull
			shift(227), // boolLit
			shift(228), // intLit
			shift(229), // floatLit
			shift(230), // stringLit
			shift(231), // kwdFn
		},
	},
	actionRow{ // S359
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(79), // terminator, reduce: Operand
			nil,        // {
			reduce(79), // }, reduce: Operand
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(79), // lOr, reduce: Operand
			reduce(79), // lAnd, reduce: Operand
			reduce(79), // lNot, reduce: Operand
			reduce(79), // equals, reduce: Operand
			reduce(79), // lessOrGreater, reduce: Operand
			reduce(79), // or, reduce: Operand
			reduce(79), // xor, reduce: Operand
			reduce(79), // and, reduce: Operand
			reduce(79), // shift, reduce: Operand
			reduce(79), // +, reduce: Operand
			reduce(79), // -, reduce: Operand
			reduce(79), // product, reduce: Operand
			reduce(79), // (, reduce: Operand
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(79), // [, reduce: Operand
			nil,        // ]
			reduce(79), // ., reduce: Operand
			shift(831), // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S360
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(233), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(251), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(258), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(260), // kwdIf
			nil,        // kwdElse
			shift(261), // kwdFor
			shift(263), // identifier
			shift(272), // kwdNull
			shift(273), // boolLit
			shift(274), // intLit
			shift(275), // floatLit
			shift(276), // stringLit
			shift(277), // kwdFn
		},
	},
	actionRow{ // S361
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			shift(833), // terminator
			shift(835), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(298), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(305), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(307), // kwdIf
			nil,        // kwdElse
			shift(308), // kwdFor
			shift(310), // identifier
			shift(319), // kwdNull
			shift(320), // boolLit
			shift(321), // intLit
			shift(322), // floatLit
			shift(323), // stringLit
			shift(324), // kwdFn
		},
	},
	actionRow{ // S362
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(78), // terminator, reduce: Operand
			nil,        // {
			reduce(78), // }, reduce: Operand
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(78), // lOr, reduce: Operand
			reduce(78), // lAnd, reduce: Operand
			reduce(78), // lNot, reduce: Operand
			reduce(78), // equals, reduce: Operand
			reduce(78), // lessOrGreater, reduce: Operand
			reduce(78), // or, reduce: Operand
			reduce(78), // xor, reduce: Operand
			reduce(78), // and, reduce: Operand
			reduce(78), // shift, reduce: Operand
			reduce(78), // +, reduce: Operand
			reduce(78), // -, reduce: Operand
			reduce(78), // product, reduce: Operand
			reduce(78), // (, reduce: Operand
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(78), // [, reduce: Operand
			nil,        // ]
			reduce(78), // ., reduce: Operand
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S363
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(82), // terminator, reduce: Identifier
			nil,        // {
			reduce(82), // }, reduce: Identifier
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(82), // lOr, reduce: Identifier
			reduce(82), // lAnd, reduce: Identifier
			reduce(82), // lNot, reduce: Identifier
			reduce(82), // equals, reduce: Identifier
			reduce(82), // lessOrGreater, reduce: Identifier
			reduce(82), // or, reduce: Identifier
			reduce(82), // xor, reduce: Identifier
			reduce(82), // and, reduce: Identifier
			reduce(82), // shift, reduce: Identifier
			reduce(82), // +, reduce: Identifier
			reduce(82), // -, reduce: Identifier
			reduce(82), // product, reduce: Identifier
			reduce(82), // (, reduce: Identifier
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(82), // [, reduce: Identifier
			nil,        // ]
			reduce(82), // ., reduce: Identifier
			reduce(82), // assign, reduce: Identifier
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S364
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(83), // terminator, reduce: Literal
			nil,        // {
			reduce(83), // }, reduce: Literal
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(83), // lOr, reduce: Literal
			reduce(83), // lAnd, reduce: Literal
			reduce(83), // lNot, reduce: Literal
			reduce(83), // equals, reduce: Literal
			reduce(83), // lessOrGreater, reduce: Literal
			reduce(83), // or, reduce: Literal
			reduce(83), // xor, reduce: Literal
			reduce(83), // and, reduce: Literal
			reduce(83), // shift, reduce: Literal
			reduce(83), // +, reduce: Literal
			reduce(83), // -, reduce: Literal
			reduce(83), // product, reduce: Literal
			reduce(83), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(83), // [, reduce: Literal
			nil,        // ]
			reduce(83), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S365
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(84), // terminator, reduce: Literal
			nil,        // {
			reduce(84), // }, reduce: Literal
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(84), // lOr, reduce: Literal
			reduce(84), // lAnd, reduce: Literal
			reduce(84), // lNot, reduce: Literal
			reduce(84), // equals, reduce: Literal
			reduce(84), // lessOrGreater, reduce: Literal
			reduce(84), // or, reduce: Literal
			reduce(84), // xor, reduce: Literal
			reduce(84), // and, reduce: Literal
			reduce(84), // shift, reduce: Literal
			reduce(84), // +, reduce: Literal
			reduce(84), // -, reduce: Literal
			reduce(84), // product, reduce: Literal
			reduce(84), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(84), // [, reduce: Literal
			nil,        // ]
			reduce(84), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S366
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(85), // terminator, reduce: Literal
			nil,        // {
			reduce(85), // }, reduce: Literal
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(85), // lOr, reduce: Literal
			reduce(85), // lAnd, reduce: Literal
			reduce(85), // lNot, reduce: Literal
			reduce(85), // equals, reduce: Literal
			reduce(85), // lessOrGreater, reduce: Literal
			reduce(85), // or, reduce: Literal
			reduce(85), // xor, reduce: Literal
			reduce(85), // and, reduce: Literal
			reduce(85), // shift, reduce: Literal
			reduce(85), // +, reduce: Literal
			reduce(85), // -, reduce: Literal
			reduce(85), // product, reduce: Literal
			reduce(85), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(85), // [, reduce: Literal
			nil,        // ]
			reduce(85), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S367
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(86), // terminator, reduce: Literal
			nil,        // {
			reduce(86), // }, reduce: Literal
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(86), // lOr, reduce: Literal
			reduce(86), // lAnd, reduce: Literal
			reduce(86), // lNot, reduce: Literal
			reduce(86), // equals, reduce: Literal
			reduce(86), // lessOrGreater, reduce: Literal
			reduce(86), // or, reduce: Literal
			reduce(86), // xor, reduce: Literal
			reduce(86), // and, reduce: Literal
			reduce(86), // shift, reduce: Literal
			reduce(86), // +, reduce: Literal
			reduce(86), // -, reduce: Literal
			reduce(86), // product, reduce: Literal
			reduce(86), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(86), // [, reduce: Literal
			nil,        // ]
			reduce(86), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S368
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(87), // terminator, reduce: Literal
			nil,        // {
			reduce(87), // }, reduce: Literal
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(87), // lOr, reduce: Literal
			reduce(87), // lAnd, reduce: Literal
			reduce(87), // lNot, reduce: Literal
			reduce(87), // equals, reduce: Literal
			reduce(87), // lessOrGreater, reduce: Literal
			reduce(87), // or, reduce: Literal
			reduce(87), // xor, reduce: Literal
			reduce(87), // and, reduce: Literal
			reduce(87), // shift, reduce: Literal
			reduce(87), // +, reduce: Literal
			reduce(87), // -, reduce: Literal
			reduce(87), // product, reduce: Literal
			reduce(87), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(87), // [, reduce: Literal
			nil,        // ]
			reduce(87), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S369
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(88), // terminator, reduce: Literal
			nil,        // {
			reduce(88), // }, reduce: Literal
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(88), // lOr, reduce: Literal
			reduce(88), // lAnd, reduce: Literal
			reduce(88), // lNot, reduce: Literal
			reduce(88), // equals, reduce: Literal
			reduce(88), // lessOrGreater, reduce: Literal
			reduce(88), // or, reduce: Literal
			reduce(88), // xor, reduce: Literal
			reduce(88), // and, reduce: Literal
			reduce(88), // shift, reduce: Literal
			reduce(88), // +, reduce: Literal
			reduce(88), // -, reduce: Literal
			reduce(88), // product, reduce: Literal
			reduce(88), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(88), // [, reduce: Literal
			nil,        // ]
			reduce(88), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S370
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(89), // terminator, reduce: Literal
			nil,        // {
			reduce(89), // }, reduce: Literal
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(89), // lOr, reduce: Literal
			reduce(89), // lAnd, reduce: Literal
			reduce(89), // lNot, reduce: Literal
			reduce(89), // equals, reduce: Literal
			reduce(89), // lessOrGreater, reduce: Literal
			reduce(89), // or, reduce: Literal
			reduce(89), // xor, reduce: Literal
			reduce(89), // and, reduce: Literal
			reduce(89), // shift, reduce: Literal
			reduce(89), // +, reduce: Literal
			reduce(89), // -, reduce: Literal
			reduce(89), // product, reduce: Literal
			reduce(89), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(89), // [, reduce: Literal
			nil,        // ]
			reduce(89), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S371
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(90), // terminator, reduce: Literal
			nil,        // {
			reduce(90), // }, reduce: Literal
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(90), // lOr, reduce: Literal
			reduce(90), // lAnd, reduce: Literal
			reduce(90), // lNot, reduce: Literal
			reduce(90), // equals, reduce: Literal
			reduce(90), // lessOrGreater, reduce: Literal
			reduce(90), // or, reduce: Literal
			reduce(90), // xor, reduce: Literal
			reduce(90), // and, reduce: Literal
			reduce(90), // shift, reduce: Literal
			reduce(90), // +, reduce: Literal
			reduce(90), // -, reduce: Literal
			reduce(90), // product, reduce: Literal
			reduce(90), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(90), // [, reduce: Literal
			nil,        // ]
			reduce(90), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S372
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(91), // terminator, reduce: Null
			nil,        // {
			reduce(91), // }, reduce: Null
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(91), // lOr, reduce: Null
			reduce(91), // lAnd, reduce: Null
			reduce(91), // lNot, reduce: Null
			reduce(91), // equals, reduce: Null
			reduce(91), // lessOrGreater, reduce: Null
			reduce(91), // or, reduce: Null
			reduce(91), // xor, reduce: Null
			reduce(91), // and, reduce: Null
			reduce(91), // shift, reduce: Null
			reduce(91), // +, reduce: Null
			reduce(91), // -, reduce: Null
			reduce(91), // product, reduce: Null
			reduce(91), // (, reduce: Null
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(91), // [, reduce: Null
			nil,        // ]
			reduce(91), // ., reduce: Null
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S373
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(92), // terminator, reduce: BooleanLiteral
			nil,        // {
			reduce(92), // }, reduce: BooleanLiteral
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(92), // lOr, reduce: BooleanLiteral
			reduce(92), // lAnd, reduce: BooleanLiteral
			reduce(92), // lNot, reduce: BooleanLiteral
			reduce(92), // equals, reduce: BooleanLiteral
			reduce(92), // lessOrGreater, reduce: BooleanLiteral
			reduce(92), // or, reduce: BooleanLiteral
			reduce(92), // xor, reduce: BooleanLiteral
			reduce(92), // and, reduce: BooleanLiteral
			reduce(92), // shift, reduce: BooleanLiteral
			reduce(92), // +, reduce: BooleanLiteral
			reduce(92), // -, reduce: BooleanLiteral
			reduce(92), // product, reduce: BooleanLiteral
			reduce(92), // (, reduce: BooleanLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(92), // [, reduce: BooleanLiteral
			nil,        // ]
			reduce(92), // ., reduce: BooleanLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S374
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(93), // terminator, reduce: IntegerLiteral
			nil,        // {
			reduce(93), // }, reduce: IntegerLiteral
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(93), // lOr, reduce: IntegerLiteral
			reduce(93), // lAnd, reduce: IntegerLiteral
			reduce(93), // lNot, reduce: IntegerLiteral
			reduce(93), // equals, reduce: IntegerLiteral
			reduce(93), // lessOrGreater, reduce: IntegerLiteral
			reduce(93), // or, reduce: IntegerLiteral
			reduce(93), // xor, reduce: IntegerLiteral
			reduce(93), // and, reduce: IntegerLiteral
			reduce(93), // shift, reduce: IntegerLiteral
			reduce(93), // +, reduce: IntegerLiteral
			reduce(93), // -, reduce: IntegerLiteral
			reduce(93), // product, reduce: IntegerLiteral
			reduce(93), // (, reduce: IntegerLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(93), // [, reduce: IntegerLiteral
			nil,        // ]
			reduce(93), // ., reduce: IntegerLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S375
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(94), // terminator, reduce: FloatLiteral
			nil,        // {
			reduce(94), // }, reduce: FloatLiteral
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(94), // lOr, reduce: FloatLiteral
			reduce(94), // lAnd, reduce: FloatLiteral
			reduce(94), // lNot, reduce: FloatLiteral
			reduce(94), // equals, reduce: FloatLiteral
			reduce(94), // lessOrGreater, reduce: FloatLiteral
			reduce(94), // or, reduce: FloatLiteral
			reduce(94), // xor, reduce: FloatLiteral
			reduce(94), // and, reduce: FloatLiteral
			reduce(94), // shift, reduce: FloatLiteral
			reduce(94), // +, reduce: FloatLiteral
			reduce(94), // -, reduce: FloatLiteral
			reduce(94), // product, reduce: FloatLiteral
			reduce(94), // (, reduce: FloatLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(94), // [, reduce: FloatLiteral
			nil,        // ]
			reduce(94), // ., reduce: FloatLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S376
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(95), // terminator, reduce: StringLiteral
			nil,        // {
			reduce(95), // }, reduce: StringLiteral
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(95), // lOr, reduce: StringLiteral
			reduce(95), // lAnd, reduce: StringLiteral
			reduce(95), // lNot, reduce: StringLiteral
			reduce(95), // equals, reduce: StringLiteral
			reduce(95), // lessOrGreater, reduce: StringLiteral
			reduce(95), // or, reduce: StringLiteral
			reduce(95), // xor, reduce: StringLiteral
			reduce(95), // and, reduce: StringLiteral
			reduce(95), // shift, reduce: StringLiteral
			reduce(95), // +, reduce: StringLiteral
			reduce(95), // -, reduce: StringLiteral
			reduce(95), // product, reduce: StringLiteral
			reduce(95), // (, reduce: StringLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(95), // [, reduce: StringLiteral
			nil,        // ]
			reduce(95), // ., reduce: StringLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S377
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			shift(837), // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S378
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(838), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(856), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(863), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(865), // kwdIf
			nil,        // kwdElse
			shift(866), // kwdFor
			shift(868), // identifier
			shift(877), // kwdNull
			shift(878), // boolLit
			shift(879), // intLit
			shift(880), // floatLit
			shift(881), // stringLit
			shift(882), // kwdFn
		},
	},
	actionRow{ // S379
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			reduce(100), // $, reduce: HashLiteral
			reduce(100), // terminator, reduce: HashLiteral
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(100), // lOr, reduce: HashLiteral
			reduce(100), // lAnd, reduce: HashLiteral
			reduce(100), // lNot, reduce: HashLiteral
			reduce(100), // equals, reduce: HashLiteral
			reduce(100), // lessOrGreater, reduce: HashLiteral
			reduce(100), // or, reduce: HashLiteral
			reduce(100), // xor, reduce: HashLiteral
			reduce(100), // and, reduce: HashLiteral
			reduce(100), // shift, reduce: HashLiteral
			reduce(100), // +, reduce: HashLiteral
			reduce(100), // -, reduce: HashLiteral
			reduce(100), // product, reduce: HashLiteral
			reduce(100), // (, reduce: HashLiteral
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(100), // [, reduce: HashLiteral
			nil,         // ]
			reduce(100), // ., reduce: HashLiteral
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S380
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			reduce(101), // $, reduce: HashLiteral
			reduce(101), // terminator, reduce: HashLiteral
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(101), // lOr, reduce: HashLiteral
			reduce(101), // lAnd, reduce: HashLiteral
			reduce(101), // lNot, reduce: HashLiteral
			reduce(101), // equals, reduce: HashLiteral
			reduce(101), // lessOrGreater, reduce: HashLiteral
			reduce(101), // or, reduce: HashLiteral
			reduce(101), // xor, reduce: HashLiteral
			reduce(101), // and, reduce: HashLiteral
			reduce(101), // shift, reduce: HashLiteral
			reduce(101), // +, reduce: HashLiteral
			reduce(101), // -, reduce: HashLiteral
			reduce(101), // product, reduce: HashLiteral
			reduce(101), // (, reduce: HashLiteral
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(101), // [, reduce: HashLiteral
			nil,         // ]
			reduce(101), // ., reduce: HashLiteral
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S381
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(416), // {
			reduce(18), // }, reduce: ExpressionMap
			nil,        // kwdReturn
			reduce(18), // ,, reduce: ExpressionMap
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(434), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(441), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(443), // kwdIf
			nil,        // kwdElse
			shift(444), // kwdFor
			shift(446), // identifier
			shift(455), // kwdNull
			shift(456), // boolLit
			shift(457), // intLit
			shift(458), // floatLit
			shift(459), // stringLit
			shift(460), // kwdFn
		},
	},
	actionRow{ // S382
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(398), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(85),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(92),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(404), // identifier
			shift(106), // kwdNull
			shift(107), // boolLit
			shift(108), // intLit
			shift(109), // floatLit
			shift(110), // stringLit
			shift(111), // kwdFn
		},
	},
	actionRow{ // S383
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(398), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(85),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(92),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(404), // identifier
			shift(106), // kwdNull
			shift(107), // boolLit
			shift(108), // intLit
			shift(109), // floatLit
			shift(110), // stringLit
			shift(111), // kwdFn
		},
	},
	actionRow{ // S384
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(398), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(85),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(92),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(404), // identifier
			shift(106), // kwdNull
			shift(107), // boolLit
			shift(108), // intLit
			shift(109), // floatLit
			shift(110), // stringLit
			shift(111), // kwdFn
		},
	},
	actionRow{ // S385
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(398), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(85),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(92),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(404), // identifier
			shift(106), // kwdNull
			shift(107), // boolLit
			shift(108), // intLit
			shift(109), // floatLit
			shift(110), // stringLit
			shift(111), // kwdFn
		},
	},
	actionRow{ // S386
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(398), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(85),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(92),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(404), // identifier
			shift(106), // kwdNull
			shift(107), // boolLit
			shift(108), // intLit
			shift(109), // floatLit
			shift(110), // stringLit
			shift(111), // kwdFn
		},
	},
	actionRow{ // S387
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(398), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(85),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(92),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(404), // identifier
			shift(106), // kwdNull
			shift(107), // boolLit
			shift(108), // intLit
			shift(109), // floatLit
			shift(110), // stringLit
			shift(111), // kwdFn
		},
	},
	actionRow{ // S388
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(398), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(85),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(92),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(404), // identifier
			shift(106), // kwdNull
			shift(107), // boolLit
			shift(108), // intLit
			shift(109), // floatLit
			shift(110), // stringLit
			shift(111), // kwdFn
		},
	},
	actionRow{ // S389
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(398), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(85),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(92),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(404), // identifier
			shift(106), // kwdNull
			shift(107), // boolLit
			shift(108), // intLit
			shift(109), // floatLit
			shift(110), // stringLit
			shift(111), // kwdFn
		},
	},
	actionRow{ // S390
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(398), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(85),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(92),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(404), // identifier
			shift(106), // kwdNull
			shift(107), // boolLit
			shift(108), // intLit
			shift(109), // floatLit
			shift(110), // stringLit
			shift(111), // kwdFn
		},
	},
	actionRow{ // S391
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(398), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(85),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(92),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(404), // identifier
			shift(106), // kwdNull
			shift(107), // boolLit
			shift(108), // intLit
			shift(109), // floatLit
			shift(110), // stringLit
			shift(111), // kwdFn
		},
	},
	actionRow{ // S392
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(398), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(85),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(92),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(404), // identifier
			shift(106), // kwdNull
			shift(107), // boolLit
			shift(108), // intLit
			shift(109), // floatLit
			shift(110), // stringLit
			shift(111), // kwdFn
		},
	},
	actionRow{ // S393
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(398), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(85),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(92),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(404), // identifier
			shift(106), // kwdNull
			shift(107), // boolLit
			shift(108), // intLit
			shift(109), // floatLit
			shift(110), // stringLit
			shift(111), // kwdFn
		},
	},
	actionRow{ // S394
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(474), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(493), // (
			shift(898), // )
			shift(31),  // !
			shift(32),  // ~
			shift(501), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(503), // kwdIf
			nil,        // kwdElse
			shift(504), // kwdFor
			shift(506), // identifier
			shift(515), // kwdNull
			shift(516), // boolLit
			shift(517), // intLit
			shift(518), // floatLit
			shift(519), // stringLit
			shift(520), // kwdFn
		},
	},
	actionRow{ // S395
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(521), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(539), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(546), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(548), // kwdIf
			nil,        // kwdElse
			shift(549), // kwdFor
			shift(551), // identifier
			shift(560), // kwdNull
			shift(561), // boolLit
			shift(562), // intLit
			shift(563), // floatLit
			shift(564), // stringLit
			shift(565), // kwdFn
		},
	},
	actionRow{ // S396
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			shift(97), // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S397
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			shift(901), // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S398
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(416), // {
			nil,        // }
			nil,        // kwdReturn
			shift(331), // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(434), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(441), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(443), // kwdIf
			nil,        // kwdElse
			shift(444), // kwdFor
			shift(446), // identifier
			shift(455), // kwdNull
			shift(456), // boolLit
			shift(457), // intLit
			shift(458), // floatLit
			shift(459), // stringLit
			shift(460), // kwdFn
		},
	},
	actionRow{ // S399
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			shift(394), // (
			nil,        // )
			nil,        // !
			nil,        // ~
			shift(902), // [
			nil,        // ]
			shift(903), // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S400
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(49), // terminator, reduce: PrefixExpression
			nil,        // {
			reduce(49), // }, reduce: PrefixExpression
			nil,        // kwdReturn
			nil,        // ,
			reduce(49), // :, reduce: PrefixExpression
			reduce(49), // lOr, reduce: PrefixExpression
			reduce(49), // lAnd, reduce: PrefixExpression
			reduce(49), // lNot, reduce: PrefixExpression
			reduce(49), // equals, reduce: PrefixExpression
			reduce(49), // lessOrGreater, reduce: PrefixExpression
			reduce(49), // or, reduce: PrefixExpression
			reduce(49), // xor, reduce: PrefixExpression
			reduce(49), // and, reduce: PrefixExpression
			reduce(49), // shift, reduce: PrefixExpression
			reduce(49), // +, reduce: PrefixExpression
			reduce(49), // -, reduce: PrefixExpression
			reduce(49), // product, reduce: PrefixExpression
			reduce(48), // (, reduce: PrefixExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(48), // [, reduce: PrefixExpression
			nil,        // ]
			reduce(48), // ., reduce: PrefixExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S401
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(55), // terminator, reduce: PrimaryExpr
			nil,        // {
			reduce(55), // }, reduce: PrimaryExpr
			nil,        // kwdReturn
			nil,        // ,
			reduce(55), // :, reduce: PrimaryExpr
			reduce(55), // lOr, reduce: PrimaryExpr
			reduce(55), // lAnd, reduce: PrimaryExpr
			reduce(55), // lNot, reduce: PrimaryExpr
			reduce(55), // equals, reduce: PrimaryExpr
			reduce(55), // lessOrGreater, reduce: PrimaryExpr
			reduce(55), // or, reduce: PrimaryExpr
			reduce(55), // xor, reduce: PrimaryExpr
			reduce(55), // and, reduce: PrimaryExpr
			reduce(55), // shift, reduce: PrimaryExpr
			reduce(55), // +, reduce: PrimaryExpr
			reduce(55), // -, reduce: PrimaryExpr
			reduce(55), // product, reduce: PrimaryExpr
			reduce(55), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(55), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(55), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S402
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(57), // terminator, reduce: PrimaryExpr
			nil,        // {
			reduce(57), // }, reduce: PrimaryExpr
			nil,        // kwdReturn
			nil,        // ,
			reduce(57), // :, reduce: PrimaryExpr
			reduce(57), // lOr, reduce: PrimaryExpr
			reduce(57), // lAnd, reduce: PrimaryExpr
			reduce(57), // lNot, reduce: PrimaryExpr
			reduce(57), // equals, reduce: PrimaryExpr
			reduce(57), // lessOrGreater, reduce: PrimaryExpr
			reduce(57), // or, reduce: PrimaryExpr
			reduce(57), // xor, reduce: PrimaryExpr
			reduce(57), // and, reduce: PrimaryExpr
			reduce(57), // shift, reduce: PrimaryExpr
			reduce(57), // +, reduce: PrimaryExpr
			reduce(57), // -, reduce: PrimaryExpr
			reduce(57), // product, reduce: PrimaryExpr
			reduce(57), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(57), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(57), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S403
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(79), // terminator, reduce: Operand
			nil,        // {
			reduce(79), // }, reduce: Operand
			nil,        // kwdReturn
			nil,        // ,
			reduce(79), // :, reduce: Operand
			reduce(79), // lOr, reduce: Operand
			reduce(79), // lAnd, reduce: Operand
			reduce(79), // lNot, reduce: Operand
			reduce(79), // equals, reduce: Operand
			reduce(79), // lessOrGreater, reduce: Operand
			reduce(79), // or, reduce: Operand
			reduce(79), // xor, reduce: Operand
			reduce(79), // and, reduce: Operand
			reduce(79), // shift, reduce: Operand
			reduce(79), // +, reduce: Operand
			reduce(79), // -, reduce: Operand
			reduce(79), // product, reduce: Operand
			reduce(79), // (, reduce: Operand
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(79), // [, reduce: Operand
			nil,        // ]
			reduce(79), // ., reduce: Operand
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S404
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(82), // terminator, reduce: Identifier
			nil,        // {
			reduce(82), // }, reduce: Identifier
			nil,        // kwdReturn
			nil,        // ,
			reduce(82), // :, reduce: Identifier
			reduce(82), // lOr, reduce: Identifier
			reduce(82), // lAnd, reduce: Identifier
			reduce(82), // lNot, reduce: Identifier
			reduce(82), // equals, reduce: Identifier
			reduce(82), // lessOrGreater, reduce: Identifier
			reduce(82), // or, reduce: Identifier
			reduce(82), // xor, reduce: Identifier
			reduce(82), // and, reduce: Identifier
			reduce(82), // shift, reduce: Identifier
			reduce(82), // +, reduce: Identifier
			reduce(82), // -, reduce: Identifier
			reduce(82), // product, reduce: Identifier
			reduce(82), // (, reduce: Identifier
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(82), // [, reduce: Identifier
			nil,        // ]
			reduce(82), // ., reduce: Identifier
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S405
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(398), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(85),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(92),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(94),  // kwdIf
			nil,        // kwdElse
			shift(95),  // kwdFor
			shift(97),  // identifier
			shift(106), // kwdNull
			shift(107), // boolLit
			shift(108), // intLit
			shift(109), // floatLit
			shift(110), // stringLit
			shift(111), // kwdFn
		},
	},
	actionRow{ // S406
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(398), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(85),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(92),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(94),  // kwdIf
			nil,        // kwdElse
			shift(95),  // kwdFor
			shift(97),  // identifier
			shift(106), // kwdNull
			shift(107), // boolLit
			shift(108), // intLit
			shift(109), // floatLit
			shift(110), // stringLit
			shift(111), // kwdFn
		},
	},
	actionRow{ // S407
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			shift(635), // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			shift(906), // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S408
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(98), // terminator, reduce: ArrayLiteral
			nil,        // {
			reduce(98), // }, reduce: ArrayLiteral
			nil,        // kwdReturn
			nil,        // ,
			reduce(98), // :, reduce: ArrayLiteral
			reduce(98), // lOr, reduce: ArrayLiteral
			reduce(98), // lAnd, reduce: ArrayLiteral
			reduce(98), // lNot, reduce: ArrayLiteral
			reduce(98), // equals, reduce: ArrayLiteral
			reduce(98), // lessOrGreater, reduce: ArrayLiteral
			reduce(98), // or, reduce: ArrayLiteral
			reduce(98), // xor, reduce: ArrayLiteral
			reduce(98), // and, reduce: ArrayLiteral
			reduce(98), // shift, reduce: ArrayLiteral
			reduce(98), // +, reduce: ArrayLiteral
			reduce(98), // -, reduce: ArrayLiteral
			reduce(98), // product, reduce: ArrayLiteral
			reduce(98), // (, reduce: ArrayLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(98), // [, reduce: ArrayLiteral
			nil,        // ]
			reduce(98), // ., reduce: ArrayLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S409
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(398), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(85),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(92),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(94),  // kwdIf
			nil,        // kwdElse
			shift(95),  // kwdFor
			shift(97),  // identifier
			shift(106), // kwdNull
			shift(107), // boolLit
			shift(108), // intLit
			shift(109), // floatLit
			shift(110), // stringLit
			shift(111), // kwdFn
		},
	},
	actionRow{ // S410
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(909), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S411
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			shift(910), // terminator
			shift(709), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(727), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(734), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(736), // kwdIf
			nil,        // kwdElse
			shift(737), // kwdFor
			shift(739), // identifier
			shift(748), // kwdNull
			shift(749), // boolLit
			shift(750), // intLit
			shift(751), // floatLit
			shift(752), // stringLit
			shift(753), // kwdFn
		},
	},
	actionRow{ // S412
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(68), // terminator, reduce: ForExpression
			nil,        // {
			reduce(68), // }, reduce: ForExpression
			nil,        // kwdReturn
			nil,        // ,
			reduce(68), // :, reduce: ForExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S413
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(63),  // {
			shift(913), // }
			shift(65),  // kwdReturn
			shift(754), // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(85),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(92),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(94),  // kwdIf
			nil,        // kwdElse
			shift(95),  // kwdFor
			shift(97),  // identifier
			shift(106), // kwdNull
			shift(107), // boolLit
			shift(108), // intLit
			shift(109), // floatLit
			shift(110), // stringLit
			shift(111), // kwdFn
		},
	},
	actionRow{ // S414
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			shift(914), // terminator
			shift(916), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S415
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			shift(917), // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(796), // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S416
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(416), // {
			nil,        // }
			nil,        // kwdReturn
			shift(919), // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(434), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(441), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(443), // kwdIf
			nil,        // kwdElse
			shift(444), // kwdFor
			shift(446), // identifier
			shift(455), // kwdNull
			shift(456), // boolLit
			shift(457), // intLit
			shift(458), // floatLit
			shift(459), // stringLit
			shift(460), // kwdFn
		},
	},
	actionRow{ // S417
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			shift(378), // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S418
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(19), // :, reduce: Expression
			shift(921), // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S419
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(20), // :, reduce: Expression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S420
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(21), // :, reduce: Expression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S421
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(22), // :, reduce: Expression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S422
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(24), // :, reduce: Term1
			reduce(24), // lOr, reduce: Term1
			shift(922), // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S423
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(26), // :, reduce: Term2
			reduce(26), // lOr, reduce: Term2
			reduce(26), // lAnd, reduce: Term2
			shift(923), // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S424
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(28), // :, reduce: Term3
			reduce(28), // lOr, reduce: Term3
			reduce(28), // lAnd, reduce: Term3
			reduce(28), // lNot, reduce: Term3
			shift(924), // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S425
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(30), // :, reduce: Term4
			reduce(30), // lOr, reduce: Term4
			reduce(30), // lAnd, reduce: Term4
			reduce(30), // lNot, reduce: Term4
			reduce(30), // equals, reduce: Term4
			shift(925), // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S426
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(32), // :, reduce: Term5
			reduce(32), // lOr, reduce: Term5
			reduce(32), // lAnd, reduce: Term5
			reduce(32), // lNot, reduce: Term5
			reduce(32), // equals, reduce: Term5
			reduce(32), // lessOrGreater, reduce: Term5
			shift(926), // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S427
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(34), // :, reduce: Term6
			reduce(34), // lOr, reduce: Term6
			reduce(34), // lAnd, reduce: Term6
			reduce(34), // lNot, reduce: Term6
			reduce(34), // equals, reduce: Term6
			reduce(34), // lessOrGreater, reduce: Term6
			reduce(34), // or, reduce: Term6
			shift(927), // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S428
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(36), // :, reduce: Term7
			reduce(36), // lOr, reduce: Term7
			reduce(36), // lAnd, reduce: Term7
			reduce(36), // lNot, reduce: Term7
			reduce(36), // equals, reduce: Term7
			reduce(36), // lessOrGreater, reduce: Term7
			reduce(36), // or, reduce: Term7
			reduce(36), // xor, reduce: Term7
			shift(928), // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S429
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(38), // :, reduce: Term8
			reduce(38), // lOr, reduce: Term8
			reduce(38), // lAnd, reduce: Term8
			reduce(38), // lNot, reduce: Term8
			reduce(38), // equals, reduce: Term8
			reduce(38), // lessOrGreater, reduce: Term8
			reduce(38), // or, reduce: Term8
			reduce(38), // xor, reduce: Term8
			reduce(38), // and, reduce: Term8
			shift(929), // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S430
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(40), // :, reduce: Term9
			reduce(40), // lOr, reduce: Term9
			reduce(40), // lAnd, reduce: Term9
			reduce(40), // lNot, reduce: Term9
			reduce(40), // equals, reduce: Term9
			reduce(40), // lessOrGreater, reduce: Term9
			reduce(40), // or, reduce: Term9
			reduce(40), // xor, reduce: Term9
			reduce(40), // and, reduce: Term9
			reduce(40), // shift, reduce: Term9
			shift(930), // +
			shift(931), // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S431
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(43), // :, reduce: Term10
			reduce(43), // lOr, reduce: Term10
			reduce(43), // lAnd, reduce: Term10
			reduce(43), // lNot, reduce: Term10
			reduce(43), // equals, reduce: Term10
			reduce(43), // lessOrGreater, reduce: Term10
			reduce(43), // or, reduce: Term10
			reduce(43), // xor, reduce: Term10
			reduce(43), // and, reduce: Term10
			reduce(43), // shift, reduce: Term10
			reduce(43), // +, reduce: Term10
			reduce(43), // -, reduce: Term10
			shift(932), // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S432
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(45), // :, reduce: Term11
			reduce(45), // lOr, reduce: Term11
			reduce(45), // lAnd, reduce: Term11
			reduce(45), // lNot, reduce: Term11
			reduce(45), // equals, reduce: Term11
			reduce(45), // lessOrGreater, reduce: Term11
			reduce(45), // or, reduce: Term11
			reduce(45), // xor, reduce: Term11
			reduce(45), // and, reduce: Term11
			reduce(45), // shift, reduce: Term11
			reduce(45), // +, reduce: Term11
			reduce(45), // -, reduce: Term11
			reduce(45), // product, reduce: Term11
			shift(933), // (
			nil,        // )
			nil,        // !
			nil,        // ~
			shift(934), // [
			nil,        // ]
			shift(935), // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S433
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(46), // :, reduce: Term12
			reduce(46), // lOr, reduce: Term12
			reduce(46), // lAnd, reduce: Term12
			reduce(46), // lNot, reduce: Term12
			reduce(46), // equals, reduce: Term12
			reduce(46), // lessOrGreater, reduce: Term12
			reduce(46), // or, reduce: Term12
			reduce(46), // xor, reduce: Term12
			reduce(46), // and, reduce: Term12
			reduce(46), // shift, reduce: Term12
			reduce(46), // +, reduce: Term12
			reduce(46), // -, reduce: Term12
			reduce(46), // product, reduce: Term12
			reduce(46), // (, reduce: Term12
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(46), // [, reduce: Term12
			nil,        // ]
			reduce(46), // ., reduce: Term12
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S434
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(129), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(147), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(154), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(156), // kwdIf
			nil,        // kwdElse
			shift(157), // kwdFor
			shift(159), // identifier
			shift(168), // kwdNull
			shift(169), // boolLit
			shift(170), // intLit
			shift(171), // floatLit
			shift(172), // stringLit
			shift(173), // kwdFn
		},
	},
	actionRow{ // S435
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(48), // :, reduce: PrefixExpression
			reduce(48), // lOr, reduce: PrefixExpression
			reduce(48), // lAnd, reduce: PrefixExpression
			reduce(48), // lNot, reduce: PrefixExpression
			reduce(48), // equals, reduce: PrefixExpression
			reduce(48), // lessOrGreater, reduce: PrefixExpression
			reduce(48), // or, reduce: PrefixExpression
			reduce(48), // xor, reduce: PrefixExpression
			reduce(48), // and, reduce: PrefixExpression
			reduce(48), // shift, reduce: PrefixExpression
			reduce(48), // +, reduce: PrefixExpression
			reduce(48), // -, reduce: PrefixExpression
			reduce(48), // product, reduce: PrefixExpression
			reduce(48), // (, reduce: PrefixExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(48), // [, reduce: PrefixExpression
			nil,        // ]
			reduce(48), // ., reduce: PrefixExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S436
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(416), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(176), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(441), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(942), // identifier
			shift(455), // kwdNull
			shift(456), // boolLit
			shift(457), // intLit
			shift(458), // floatLit
			shift(459), // stringLit
			shift(460), // kwdFn
		},
	},
	actionRow{ // S437
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(54), // :, reduce: PrimaryExpr
			reduce(54), // lOr, reduce: PrimaryExpr
			reduce(54), // lAnd, reduce: PrimaryExpr
			reduce(54), // lNot, reduce: PrimaryExpr
			reduce(54), // equals, reduce: PrimaryExpr
			reduce(54), // lessOrGreater, reduce: PrimaryExpr
			reduce(54), // or, reduce: PrimaryExpr
			reduce(54), // xor, reduce: PrimaryExpr
			reduce(54), // and, reduce: PrimaryExpr
			reduce(54), // shift, reduce: PrimaryExpr
			reduce(54), // +, reduce: PrimaryExpr
			reduce(54), // -, reduce: PrimaryExpr
			reduce(54), // product, reduce: PrimaryExpr
			reduce(54), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(54), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(54), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S438
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(55), // :, reduce: PrimaryExpr
			reduce(55), // lOr, reduce: PrimaryExpr
			reduce(55), // lAnd, reduce: PrimaryExpr
			reduce(55), // lNot, reduce: PrimaryExpr
			reduce(55), // equals, reduce: PrimaryExpr
			reduce(55), // lessOrGreater, reduce: PrimaryExpr
			reduce(55), // or, reduce: PrimaryExpr
			reduce(55), // xor, reduce: PrimaryExpr
			reduce(55), // and, reduce: PrimaryExpr
			reduce(55), // shift, reduce: PrimaryExpr
			reduce(55), // +, reduce: PrimaryExpr
			reduce(55), // -, reduce: PrimaryExpr
			reduce(55), // product, reduce: PrimaryExpr
			reduce(55), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(55), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(55), // ., reduce: PrimaryExpr
			shift(943), // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S439
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(56), // :, reduce: PrimaryExpr
			reduce(56), // lOr, reduce: PrimaryExpr
			reduce(56), // lAnd, reduce: PrimaryExpr
			reduce(56), // lNot, reduce: PrimaryExpr
			reduce(56), // equals, reduce: PrimaryExpr
			reduce(56), // lessOrGreater, reduce: PrimaryExpr
			reduce(56), // or, reduce: PrimaryExpr
			reduce(56), // xor, reduce: PrimaryExpr
			reduce(56), // and, reduce: PrimaryExpr
			reduce(56), // shift, reduce: PrimaryExpr
			reduce(56), // +, reduce: PrimaryExpr
			reduce(56), // -, reduce: PrimaryExpr
			reduce(56), // product, reduce: PrimaryExpr
			reduce(56), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(56), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(56), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S440
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(57), // :, reduce: PrimaryExpr
			reduce(57), // lOr, reduce: PrimaryExpr
			reduce(57), // lAnd, reduce: PrimaryExpr
			reduce(57), // lNot, reduce: PrimaryExpr
			reduce(57), // equals, reduce: PrimaryExpr
			reduce(57), // lessOrGreater, reduce: PrimaryExpr
			reduce(57), // or, reduce: PrimaryExpr
			reduce(57), // xor, reduce: PrimaryExpr
			reduce(57), // and, reduce: PrimaryExpr
			reduce(57), // shift, reduce: PrimaryExpr
			reduce(57), // +, reduce: PrimaryExpr
			reduce(57), // -, reduce: PrimaryExpr
			reduce(57), // product, reduce: PrimaryExpr
			reduce(57), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(57), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(57), // ., reduce: PrimaryExpr
			shift(944), // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S441
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(185), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(204), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(211), // [
			shift(946), // ]
			nil,        // .
			nil,        // assign
			shift(214), // kwdIf
			nil,        // kwdElse
			shift(215), // kwdFor
			shift(217), // identifier
			shift(226), // kwdNull
			shift(227), // boolLit
			shift(228), // intLit
			shift(229), // floatLit
			shift(230), // stringLit
			shift(231), // kwdFn
		},
	},
	actionRow{ // S442
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(79), // :, reduce: Operand
			reduce(79), // lOr, reduce: Operand
			reduce(79), // lAnd, reduce: Operand
			reduce(79), // lNot, reduce: Operand
			reduce(79), // equals, reduce: Operand
			reduce(79), // lessOrGreater, reduce: Operand
			reduce(79), // or, reduce: Operand
			reduce(79), // xor, reduce: Operand
			reduce(79), // and, reduce: Operand
			reduce(79), // shift, reduce: Operand
			reduce(79), // +, reduce: Operand
			reduce(79), // -, reduce: Operand
			reduce(79), // product, reduce: Operand
			reduce(79), // (, reduce: Operand
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(79), // [, reduce: Operand
			nil,        // ]
			reduce(79), // ., reduce: Operand
			shift(947), // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S443
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(233), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(251), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(258), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(260), // kwdIf
			nil,        // kwdElse
			shift(261), // kwdFor
			shift(263), // identifier
			shift(272), // kwdNull
			shift(273), // boolLit
			shift(274), // intLit
			shift(275), // floatLit
			shift(276), // stringLit
			shift(277), // kwdFn
		},
	},
	actionRow{ // S444
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			shift(949), // terminator
			shift(951), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(298), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(305), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(307), // kwdIf
			nil,        // kwdElse
			shift(308), // kwdFor
			shift(310), // identifier
			shift(319), // kwdNull
			shift(320), // boolLit
			shift(321), // intLit
			shift(322), // floatLit
			shift(323), // stringLit
			shift(324), // kwdFn
		},
	},
	actionRow{ // S445
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(78), // :, reduce: Operand
			reduce(78), // lOr, reduce: Operand
			reduce(78), // lAnd, reduce: Operand
			reduce(78), // lNot, reduce: Operand
			reduce(78), // equals, reduce: Operand
			reduce(78), // lessOrGreater, reduce: Operand
			reduce(78), // or, reduce: Operand
			reduce(78), // xor, reduce: Operand
			reduce(78), // and, reduce: Operand
			reduce(78), // shift, reduce: Operand
			reduce(78), // +, reduce: Operand
			reduce(78), // -, reduce: Operand
			reduce(78), // product, reduce: Operand
			reduce(78), // (, reduce: Operand
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(78), // [, reduce: Operand
			nil,        // ]
			reduce(78), // ., reduce: Operand
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S446
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(82), // :, reduce: Identifier
			reduce(82), // lOr, reduce: Identifier
			reduce(82), // lAnd, reduce: Identifier
			reduce(82), // lNot, reduce: Identifier
			reduce(82), // equals, reduce: Identifier
			reduce(82), // lessOrGreater, reduce: Identifier
			reduce(82), // or, reduce: Identifier
			reduce(82), // xor, reduce: Identifier
			reduce(82), // and, reduce: Identifier
			reduce(82), // shift, reduce: Identifier
			reduce(82), // +, reduce: Identifier
			reduce(82), // -, reduce: Identifier
			reduce(82), // product, reduce: Identifier
			reduce(82), // (, reduce: Identifier
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(82), // [, reduce: Identifier
			nil,        // ]
			reduce(82), // ., reduce: Identifier
			reduce(82), // assign, reduce: Identifier
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S447
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(83), // :, reduce: Literal
			reduce(83), // lOr, reduce: Literal
			reduce(83), // lAnd, reduce: Literal
			reduce(83), // lNot, reduce: Literal
			reduce(83), // equals, reduce: Literal
			reduce(83), // lessOrGreater, reduce: Literal
			reduce(83), // or, reduce: Literal
			reduce(83), // xor, reduce: Literal
			reduce(83), // and, reduce: Literal
			reduce(83), // shift, reduce: Literal
			reduce(83), // +, reduce: Literal
			reduce(83), // -, reduce: Literal
			reduce(83), // product, reduce: Literal
			reduce(83), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(83), // [, reduce: Literal
			nil,        // ]
			reduce(83), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S448
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(84), // :, reduce: Literal
			reduce(84), // lOr, reduce: Literal
			reduce(84), // lAnd, reduce: Literal
			reduce(84), // lNot, reduce: Literal
			reduce(84), // equals, reduce: Literal
			reduce(84), // lessOrGreater, reduce: Literal
			reduce(84), // or, reduce: Literal
			reduce(84), // xor, reduce: Literal
			reduce(84), // and, reduce: Literal
			reduce(84), // shift, reduce: Literal
			reduce(84), // +, reduce: Literal
			reduce(84), // -, reduce: Literal
			reduce(84), // product, reduce: Literal
			reduce(84), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(84), // [, reduce: Literal
			nil,        // ]
			reduce(84), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S449
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(85), // :, reduce: Literal
			reduce(85), // lOr, reduce: Literal
			reduce(85), // lAnd, reduce: Literal
			reduce(85), // lNot, reduce: Literal
			reduce(85), // equals, reduce: Literal
			reduce(85), // lessOrGreater, reduce: Literal
			reduce(85), // or, reduce: Literal
			reduce(85), // xor, reduce: Literal
			reduce(85), // and, reduce: Literal
			reduce(85), // shift, reduce: Literal
			reduce(85), // +, reduce: Literal
			reduce(85), // -, reduce: Literal
			reduce(85), // product, reduce: Literal
			reduce(85), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(85), // [, reduce: Literal
			nil,        // ]
			reduce(85), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S450
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(86), // :, reduce: Literal
			reduce(86), // lOr, reduce: Literal
			reduce(86), // lAnd, reduce: Literal
			reduce(86), // lNot, reduce: Literal
			reduce(86), // equals, reduce: Literal
			reduce(86), // lessOrGreater, reduce: Literal
			reduce(86), // or, reduce: Literal
			reduce(86), // xor, reduce: Literal
			reduce(86), // and, reduce: Literal
			reduce(86), // shift, reduce: Literal
			reduce(86), // +, reduce: Literal
			reduce(86), // -, reduce: Literal
			reduce(86), // product, reduce: Literal
			reduce(86), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(86), // [, reduce: Literal
			nil,        // ]
			reduce(86), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S451
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(87), // :, reduce: Literal
			reduce(87), // lOr, reduce: Literal
			reduce(87), // lAnd, reduce: Literal
			reduce(87), // lNot, reduce: Literal
			reduce(87), // equals, reduce: Literal
			reduce(87), // lessOrGreater, reduce: Literal
			reduce(87), // or, reduce: Literal
			reduce(87), // xor, reduce: Literal
			reduce(87), // and, reduce: Literal
			reduce(87), // shift, reduce: Literal
			reduce(87), // +, reduce: Literal
			reduce(87), // -, reduce: Literal
			reduce(87), // product, reduce: Literal
			reduce(87), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(87), // [, reduce: Literal
			nil,        // ]
			reduce(87), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S452
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(88), // :, reduce: Literal
			reduce(88), // lOr, reduce: Literal
			reduce(88), // lAnd, reduce: Literal
			reduce(88), // lNot, reduce: Literal
			reduce(88), // equals, reduce: Literal
			reduce(88), // lessOrGreater, reduce: Literal
			reduce(88), // or, reduce: Literal
			reduce(88), // xor, reduce: Literal
			reduce(88), // and, reduce: Literal
			reduce(88), // shift, reduce: Literal
			reduce(88), // +, reduce: Literal
			reduce(88), // -, reduce: Literal
			reduce(88), // product, reduce: Literal
			reduce(88), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(88), // [, reduce: Literal
			nil,        // ]
			reduce(88), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S453
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(89), // :, reduce: Literal
			reduce(89), // lOr, reduce: Literal
			reduce(89), // lAnd, reduce: Literal
			reduce(89), // lNot, reduce: Literal
			reduce(89), // equals, reduce: Literal
			reduce(89), // lessOrGreater, reduce: Literal
			reduce(89), // or, reduce: Literal
			reduce(89), // xor, reduce: Literal
			reduce(89), // and, reduce: Literal
			reduce(89), // shift, reduce: Literal
			reduce(89), // +, reduce: Literal
			reduce(89), // -, reduce: Literal
			reduce(89), // product, reduce: Literal
			reduce(89), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(89), // [, reduce: Literal
			nil,        // ]
			reduce(89), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S454
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(90), // :, reduce: Literal
			reduce(90), // lOr, reduce: Literal
			reduce(90), // lAnd, reduce: Literal
			reduce(90), // lNot, reduce: Literal
			reduce(90), // equals, reduce: Literal
			reduce(90), // lessOrGreater, reduce: Literal
			reduce(90), // or, reduce: Literal
			reduce(90), // xor, reduce: Literal
			reduce(90), // and, reduce: Literal
			reduce(90), // shift, reduce: Literal
			reduce(90), // +, reduce: Literal
			reduce(90), // -, reduce: Literal
			reduce(90), // product, reduce: Literal
			reduce(90), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(90), // [, reduce: Literal
			nil,        // ]
			reduce(90), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S455
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(91), // :, reduce: Null
			reduce(91), // lOr, reduce: Null
			reduce(91), // lAnd, reduce: Null
			reduce(91), // lNot, reduce: Null
			reduce(91), // equals, reduce: Null
			reduce(91), // lessOrGreater, reduce: Null
			reduce(91), // or, reduce: Null
			reduce(91), // xor, reduce: Null
			reduce(91), // and, reduce: Null
			reduce(91), // shift, reduce: Null
			reduce(91), // +, reduce: Null
			reduce(91), // -, reduce: Null
			reduce(91), // product, reduce: Null
			reduce(91), // (, reduce: Null
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(91), // [, reduce: Null
			nil,        // ]
			reduce(91), // ., reduce: Null
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S456
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(92), // :, reduce: BooleanLiteral
			reduce(92), // lOr, reduce: BooleanLiteral
			reduce(92), // lAnd, reduce: BooleanLiteral
			reduce(92), // lNot, reduce: BooleanLiteral
			reduce(92), // equals, reduce: BooleanLiteral
			reduce(92), // lessOrGreater, reduce: BooleanLiteral
			reduce(92), // or, reduce: BooleanLiteral
			reduce(92), // xor, reduce: BooleanLiteral
			reduce(92), // and, reduce: BooleanLiteral
			reduce(92), // shift, reduce: BooleanLiteral
			reduce(92), // +, reduce: BooleanLiteral
			reduce(92), // -, reduce: BooleanLiteral
			reduce(92), // product, reduce: BooleanLiteral
			reduce(92), // (, reduce: BooleanLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(92), // [, reduce: BooleanLiteral
			nil,        // ]
			reduce(92), // ., reduce: BooleanLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S457
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(93), // :, reduce: IntegerLiteral
			reduce(93), // lOr, reduce: IntegerLiteral
			reduce(93), // lAnd, reduce: IntegerLiteral
			reduce(93), // lNot, reduce: IntegerLiteral
			reduce(93), // equals, reduce: IntegerLiteral
			reduce(93), // lessOrGreater, reduce: IntegerLiteral
			reduce(93), // or, reduce: IntegerLiteral
			reduce(93), // xor, reduce: IntegerLiteral
			reduce(93), // and, reduce: IntegerLiteral
			reduce(93), // shift, reduce: IntegerLiteral
			reduce(93), // +, reduce: IntegerLiteral
			reduce(93), // -, reduce: IntegerLiteral
			reduce(93), // product, reduce: IntegerLiteral
			reduce(93), // (, reduce: IntegerLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(93), // [, reduce: IntegerLiteral
			nil,        // ]
			reduce(93), // ., reduce: IntegerLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S458
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(94), // :, reduce: FloatLiteral
			reduce(94), // lOr, reduce: FloatLiteral
			reduce(94), // lAnd, reduce: FloatLiteral
			reduce(94), // lNot, reduce: FloatLiteral
			reduce(94), // equals, reduce: FloatLiteral
			reduce(94), // lessOrGreater, reduce: FloatLiteral
			reduce(94), // or, reduce: FloatLiteral
			reduce(94), // xor, reduce: FloatLiteral
			reduce(94), // and, reduce: FloatLiteral
			reduce(94), // shift, reduce: FloatLiteral
			reduce(94), // +, reduce: FloatLiteral
			reduce(94), // -, reduce: FloatLiteral
			reduce(94), // product, reduce: FloatLiteral
			reduce(94), // (, reduce: FloatLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(94), // [, reduce: FloatLiteral
			nil,        // ]
			reduce(94), // ., reduce: FloatLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S459
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(95), // :, reduce: StringLiteral
			reduce(95), // lOr, reduce: StringLiteral
			reduce(95), // lAnd, reduce: StringLiteral
			reduce(95), // lNot, reduce: StringLiteral
			reduce(95), // equals, reduce: StringLiteral
			reduce(95), // lessOrGreater, reduce: StringLiteral
			reduce(95), // or, reduce: StringLiteral
			reduce(95), // xor, reduce: StringLiteral
			reduce(95), // and, reduce: StringLiteral
			reduce(95), // shift, reduce: StringLiteral
			reduce(95), // +, reduce: StringLiteral
			reduce(95), // -, reduce: StringLiteral
			reduce(95), // product, reduce: StringLiteral
			reduce(95), // (, reduce: StringLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(95), // [, reduce: StringLiteral
			nil,        // ]
			reduce(95), // ., reduce: StringLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S460
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			shift(953), // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S461
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(23), // $, reduce: Term1
			reduce(23), // terminator, reduce: Term1
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(23), // lOr, reduce: Term1
			shift(115), // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S462
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(45), // $, reduce: Term11
			reduce(45), // terminator, reduce: Term11
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(45), // lOr, reduce: Term11
			reduce(45), // lAnd, reduce: Term11
			reduce(45), // lNot, reduce: Term11
			reduce(45), // equals, reduce: Term11
			reduce(45), // lessOrGreater, reduce: Term11
			reduce(45), // or, reduce: Term11
			reduce(45), // xor, reduce: Term11
			reduce(45), // and, reduce: Term11
			reduce(45), // shift, reduce: Term11
			reduce(45), // +, reduce: Term11
			reduce(45), // -, reduce: Term11
			reduce(45), // product, reduce: Term11
			shift(126), // (
			nil,        // )
			nil,        // !
			nil,        // ~
			shift(603), // [
			nil,        // ]
			shift(604), // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S463
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(25), // $, reduce: Term2
			reduce(25), // terminator, reduce: Term2
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(25), // lOr, reduce: Term2
			reduce(25), // lAnd, reduce: Term2
			shift(116), // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S464
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(27), // $, reduce: Term3
			reduce(27), // terminator, reduce: Term3
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(27), // lOr, reduce: Term3
			reduce(27), // lAnd, reduce: Term3
			reduce(27), // lNot, reduce: Term3
			shift(117), // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S465
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(29), // $, reduce: Term4
			reduce(29), // terminator, reduce: Term4
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(29), // lOr, reduce: Term4
			reduce(29), // lAnd, reduce: Term4
			reduce(29), // lNot, reduce: Term4
			reduce(29), // equals, reduce: Term4
			shift(118), // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S466
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(31), // $, reduce: Term5
			reduce(31), // terminator, reduce: Term5
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(31), // lOr, reduce: Term5
			reduce(31), // lAnd, reduce: Term5
			reduce(31), // lNot, reduce: Term5
			reduce(31), // equals, reduce: Term5
			reduce(31), // lessOrGreater, reduce: Term5
			shift(119), // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S467
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(33), // $, reduce: Term6
			reduce(33), // terminator, reduce: Term6
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(33), // lOr, reduce: Term6
			reduce(33), // lAnd, reduce: Term6
			reduce(33), // lNot, reduce: Term6
			reduce(33), // equals, reduce: Term6
			reduce(33), // lessOrGreater, reduce: Term6
			reduce(33), // or, reduce: Term6
			shift(120), // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S468
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(35), // $, reduce: Term7
			reduce(35), // terminator, reduce: Term7
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(35), // lOr, reduce: Term7
			reduce(35), // lAnd, reduce: Term7
			reduce(35), // lNot, reduce: Term7
			reduce(35), // equals, reduce: Term7
			reduce(35), // lessOrGreater, reduce: Term7
			reduce(35), // or, reduce: Term7
			reduce(35), // xor, reduce: Term7
			shift(121), // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S469
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(37), // $, reduce: Term8
			reduce(37), // terminator, reduce: Term8
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(37), // lOr, reduce: Term8
			reduce(37), // lAnd, reduce: Term8
			reduce(37), // lNot, reduce: Term8
			reduce(37), // equals, reduce: Term8
			reduce(37), // lessOrGreater, reduce: Term8
			reduce(37), // or, reduce: Term8
			reduce(37), // xor, reduce: Term8
			reduce(37), // and, reduce: Term8
			shift(122), // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S470
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(39), // $, reduce: Term9
			reduce(39), // terminator, reduce: Term9
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(39), // lOr, reduce: Term9
			reduce(39), // lAnd, reduce: Term9
			reduce(39), // lNot, reduce: Term9
			reduce(39), // equals, reduce: Term9
			reduce(39), // lessOrGreater, reduce: Term9
			reduce(39), // or, reduce: Term9
			reduce(39), // xor, reduce: Term9
			reduce(39), // and, reduce: Term9
			reduce(39), // shift, reduce: Term9
			shift(123), // +
			shift(124), // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S471
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(41), // $, reduce: Term10
			reduce(41), // terminator, reduce: Term10
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(41), // lOr, reduce: Term10
			reduce(41), // lAnd, reduce: Term10
			reduce(41), // lNot, reduce: Term10
			reduce(41), // equals, reduce: Term10
			reduce(41), // lessOrGreater, reduce: Term10
			reduce(41), // or, reduce: Term10
			reduce(41), // xor, reduce: Term10
			reduce(41), // and, reduce: Term10
			reduce(41), // shift, reduce: Term10
			reduce(41), // +, reduce: Term10
			reduce(41), // -, reduce: Term10
			shift(125), // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S472
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(42), // $, reduce: Term10
			reduce(42), // terminator, reduce: Term10
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(42), // lOr, reduce: Term10
			reduce(42), // lAnd, reduce: Term10
			reduce(42), // lNot, reduce: Term10
			reduce(42), // equals, reduce: Term10
			reduce(42), // lessOrGreater, reduce: Term10
			reduce(42), // or, reduce: Term10
			reduce(42), // xor, reduce: Term10
			reduce(42), // and, reduce: Term10
			reduce(42), // shift, reduce: Term10
			reduce(42), // +, reduce: Term10
			reduce(42), // -, reduce: Term10
			shift(125), // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S473
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(44), // $, reduce: Term11
			reduce(44), // terminator, reduce: Term11
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(44), // lOr, reduce: Term11
			reduce(44), // lAnd, reduce: Term11
			reduce(44), // lNot, reduce: Term11
			reduce(44), // equals, reduce: Term11
			reduce(44), // lessOrGreater, reduce: Term11
			reduce(44), // or, reduce: Term11
			reduce(44), // xor, reduce: Term11
			reduce(44), // and, reduce: Term11
			reduce(44), // shift, reduce: Term11
			reduce(44), // +, reduce: Term11
			reduce(44), // -, reduce: Term11
			reduce(44), // product, reduce: Term11
			shift(126), // (
			nil,        // )
			nil,        // !
			nil,        // ~
			shift(603), // [
			nil,        // ]
			shift(604), // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S474
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(416), // {
			nil,        // }
			nil,        // kwdReturn
			shift(954), // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(434), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(441), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(443), // kwdIf
			nil,        // kwdElse
			shift(444), // kwdFor
			shift(446), // identifier
			shift(455), // kwdNull
			shift(456), // boolLit
			shift(457), // intLit
			shift(458), // floatLit
			shift(459), // stringLit
			shift(460), // kwdFn
		},
	},
	actionRow{ // S475
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(13), // ,, reduce: ExpressionList
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(13), // ), reduce: ExpressionList
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S476
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			shift(956), // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			shift(957), // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S477
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(19), // ,, reduce: Expression
			nil,        // :
			shift(958), // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(19), // ), reduce: Expression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S478
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(20), // ,, reduce: Expression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(20), // ), reduce: Expression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S479
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(21), // ,, reduce: Expression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(21), // ), reduce: Expression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S480
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(22), // ,, reduce: Expression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(22), // ), reduce: Expression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S481
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(24), // ,, reduce: Term1
			nil,        // :
			reduce(24), // lOr, reduce: Term1
			shift(959), // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(24), // ), reduce: Term1
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S482
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(26), // ,, reduce: Term2
			nil,        // :
			reduce(26), // lOr, reduce: Term2
			reduce(26), // lAnd, reduce: Term2
			shift(960), // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(26), // ), reduce: Term2
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S483
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(28), // ,, reduce: Term3
			nil,        // :
			reduce(28), // lOr, reduce: Term3
			reduce(28), // lAnd, reduce: Term3
			reduce(28), // lNot, reduce: Term3
			shift(961), // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(28), // ), reduce: Term3
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S484
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(30), // ,, reduce: Term4
			nil,        // :
			reduce(30), // lOr, reduce: Term4
			reduce(30), // lAnd, reduce: Term4
			reduce(30), // lNot, reduce: Term4
			reduce(30), // equals, reduce: Term4
			shift(962), // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(30), // ), reduce: Term4
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S485
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(32), // ,, reduce: Term5
			nil,        // :
			reduce(32), // lOr, reduce: Term5
			reduce(32), // lAnd, reduce: Term5
			reduce(32), // lNot, reduce: Term5
			reduce(32), // equals, reduce: Term5
			reduce(32), // lessOrGreater, reduce: Term5
			shift(963), // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(32), // ), reduce: Term5
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S486
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(34), // ,, reduce: Term6
			nil,        // :
			reduce(34), // lOr, reduce: Term6
			reduce(34), // lAnd, reduce: Term6
			reduce(34), // lNot, reduce: Term6
			reduce(34), // equals, reduce: Term6
			reduce(34), // lessOrGreater, reduce: Term6
			reduce(34), // or, reduce: Term6
			shift(964), // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(34), // ), reduce: Term6
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S487
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(36), // ,, reduce: Term7
			nil,        // :
			reduce(36), // lOr, reduce: Term7
			reduce(36), // lAnd, reduce: Term7
			reduce(36), // lNot, reduce: Term7
			reduce(36), // equals, reduce: Term7
			reduce(36), // lessOrGreater, reduce: Term7
			reduce(36), // or, reduce: Term7
			reduce(36), // xor, reduce: Term7
			shift(965), // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(36), // ), reduce: Term7
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S488
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(38), // ,, reduce: Term8
			nil,        // :
			reduce(38), // lOr, reduce: Term8
			reduce(38), // lAnd, reduce: Term8
			reduce(38), // lNot, reduce: Term8
			reduce(38), // equals, reduce: Term8
			reduce(38), // lessOrGreater, reduce: Term8
			reduce(38), // or, reduce: Term8
			reduce(38), // xor, reduce: Term8
			reduce(38), // and, reduce: Term8
			shift(966), // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(38), // ), reduce: Term8
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S489
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(40), // ,, reduce: Term9
			nil,        // :
			reduce(40), // lOr, reduce: Term9
			reduce(40), // lAnd, reduce: Term9
			reduce(40), // lNot, reduce: Term9
			reduce(40), // equals, reduce: Term9
			reduce(40), // lessOrGreater, reduce: Term9
			reduce(40), // or, reduce: Term9
			reduce(40), // xor, reduce: Term9
			reduce(40), // and, reduce: Term9
			reduce(40), // shift, reduce: Term9
			shift(967), // +
			shift(968), // -
			nil,        // product
			nil,        // (
			reduce(40), // ), reduce: Term9
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S490
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(43), // ,, reduce: Term10
			nil,        // :
			reduce(43), // lOr, reduce: Term10
			reduce(43), // lAnd, reduce: Term10
			reduce(43), // lNot, reduce: Term10
			reduce(43), // equals, reduce: Term10
			reduce(43), // lessOrGreater, reduce: Term10
			reduce(43), // or, reduce: Term10
			reduce(43), // xor, reduce: Term10
			reduce(43), // and, reduce: Term10
			reduce(43), // shift, reduce: Term10
			reduce(43), // +, reduce: Term10
			reduce(43), // -, reduce: Term10
			shift(969), // product
			nil,        // (
			reduce(43), // ), reduce: Term10
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S491
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(45), // ,, reduce: Term11
			nil,        // :
			reduce(45), // lOr, reduce: Term11
			reduce(45), // lAnd, reduce: Term11
			reduce(45), // lNot, reduce: Term11
			reduce(45), // equals, reduce: Term11
			reduce(45), // lessOrGreater, reduce: Term11
			reduce(45), // or, reduce: Term11
			reduce(45), // xor, reduce: Term11
			reduce(45), // and, reduce: Term11
			reduce(45), // shift, reduce: Term11
			reduce(45), // +, reduce: Term11
			reduce(45), // -, reduce: Term11
			reduce(45), // product, reduce: Term11
			shift(970), // (
			reduce(45), // ), reduce: Term11
			nil,        // !
			nil,        // ~
			shift(971), // [
			nil,        // ]
			shift(972), // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S492
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(46), // ,, reduce: Term12
			nil,        // :
			reduce(46), // lOr, reduce: Term12
			reduce(46), // lAnd, reduce: Term12
			reduce(46), // lNot, reduce: Term12
			reduce(46), // equals, reduce: Term12
			reduce(46), // lessOrGreater, reduce: Term12
			reduce(46), // or, reduce: Term12
			reduce(46), // xor, reduce: Term12
			reduce(46), // and, reduce: Term12
			reduce(46), // shift, reduce: Term12
			reduce(46), // +, reduce: Term12
			reduce(46), // -, reduce: Term12
			reduce(46), // product, reduce: Term12
			reduce(46), // (, reduce: Term12
			reduce(46), // ), reduce: Term12
			nil,        // !
			nil,        // ~
			reduce(46), // [, reduce: Term12
			nil,        // ]
			reduce(46), // ., reduce: Term12
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S493
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(129), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(147), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(154), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(156), // kwdIf
			nil,        // kwdElse
			shift(157), // kwdFor
			shift(159), // identifier
			shift(168), // kwdNull
			shift(169), // boolLit
			shift(170), // intLit
			shift(171), // floatLit
			shift(172), // stringLit
			shift(173), // kwdFn
		},
	},
	actionRow{ // S494
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(59), // $, reduce: CallExpression
			reduce(59), // terminator, reduce: CallExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(59), // lOr, reduce: CallExpression
			reduce(59), // lAnd, reduce: CallExpression
			reduce(59), // lNot, reduce: CallExpression
			reduce(59), // equals, reduce: CallExpression
			reduce(59), // lessOrGreater, reduce: CallExpression
			reduce(59), // or, reduce: CallExpression
			reduce(59), // xor, reduce: CallExpression
			reduce(59), // and, reduce: CallExpression
			reduce(59), // shift, reduce: CallExpression
			reduce(59), // +, reduce: CallExpression
			reduce(59), // -, reduce: CallExpression
			reduce(59), // product, reduce: CallExpression
			reduce(59), // (, reduce: CallExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(59), // [, reduce: CallExpression
			nil,        // ]
			reduce(59), // ., reduce: CallExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S495
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(48), // ,, reduce: PrefixExpression
			nil,        // :
			reduce(48), // lOr, reduce: PrefixExpression
			reduce(48), // lAnd, reduce: PrefixExpression
			reduce(48), // lNot, reduce: PrefixExpression
			reduce(48), // equals, reduce: PrefixExpression
			reduce(48), // lessOrGreater, reduce: PrefixExpression
			reduce(48), // or, reduce: PrefixExpression
			reduce(48), // xor, reduce: PrefixExpression
			reduce(48), // and, reduce: PrefixExpression
			reduce(48), // shift, reduce: PrefixExpression
			reduce(48), // +, reduce: PrefixExpression
			reduce(48), // -, reduce: PrefixExpression
			reduce(48), // product, reduce: PrefixExpression
			reduce(48), // (, reduce: PrefixExpression
			reduce(48), // ), reduce: PrefixExpression
			nil,        // !
			nil,        // ~
			reduce(48), // [, reduce: PrefixExpression
			nil,        // ]
			reduce(48), // ., reduce: PrefixExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S496
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(474), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(176), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(501), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(979), // identifier
			shift(515), // kwdNull
			shift(516), // boolLit
			shift(517), // intLit
			shift(518), // floatLit
			shift(519), // stringLit
			shift(520), // kwdFn
		},
	},
	actionRow{ // S497
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(54), // ,, reduce: PrimaryExpr
			nil,        // :
			reduce(54), // lOr, reduce: PrimaryExpr
			reduce(54), // lAnd, reduce: PrimaryExpr
			reduce(54), // lNot, reduce: PrimaryExpr
			reduce(54), // equals, reduce: PrimaryExpr
			reduce(54), // lessOrGreater, reduce: PrimaryExpr
			reduce(54), // or, reduce: PrimaryExpr
			reduce(54), // xor, reduce: PrimaryExpr
			reduce(54), // and, reduce: PrimaryExpr
			reduce(54), // shift, reduce: PrimaryExpr
			reduce(54), // +, reduce: PrimaryExpr
			reduce(54), // -, reduce: PrimaryExpr
			reduce(54), // product, reduce: PrimaryExpr
			reduce(54), // (, reduce: PrimaryExpr
			reduce(54), // ), reduce: PrimaryExpr
			nil,        // !
			nil,        // ~
			reduce(54), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(54), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S498
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(55), // ,, reduce: PrimaryExpr
			nil,        // :
			reduce(55), // lOr, reduce: PrimaryExpr
			reduce(55), // lAnd, reduce: PrimaryExpr
			reduce(55), // lNot, reduce: PrimaryExpr
			reduce(55), // equals, reduce: PrimaryExpr
			reduce(55), // lessOrGreater, reduce: PrimaryExpr
			reduce(55), // or, reduce: PrimaryExpr
			reduce(55), // xor, reduce: PrimaryExpr
			reduce(55), // and, reduce: PrimaryExpr
			reduce(55), // shift, reduce: PrimaryExpr
			reduce(55), // +, reduce: PrimaryExpr
			reduce(55), // -, reduce: PrimaryExpr
			reduce(55), // product, reduce: PrimaryExpr
			reduce(55), // (, reduce: PrimaryExpr
			reduce(55), // ), reduce: PrimaryExpr
			nil,        // !
			nil,        // ~
			reduce(55), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(55), // ., reduce: PrimaryExpr
			shift(980), // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S499
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(56), // ,, reduce: PrimaryExpr
			nil,        // :
			reduce(56), // lOr, reduce: PrimaryExpr
			reduce(56), // lAnd, reduce: PrimaryExpr
			reduce(56), // lNot, reduce: PrimaryExpr
			reduce(56), // equals, reduce: PrimaryExpr
			reduce(56), // lessOrGreater, reduce: PrimaryExpr
			reduce(56), // or, reduce: PrimaryExpr
			reduce(56), // xor, reduce: PrimaryExpr
			reduce(56), // and, reduce: PrimaryExpr
			reduce(56), // shift, reduce: PrimaryExpr
			reduce(56), // +, reduce: PrimaryExpr
			reduce(56), // -, reduce: PrimaryExpr
			reduce(56), // product, reduce: PrimaryExpr
			reduce(56), // (, reduce: PrimaryExpr
			reduce(56), // ), reduce: PrimaryExpr
			nil,        // !
			nil,        // ~
			reduce(56), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(56), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S500
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(57), // ,, reduce: PrimaryExpr
			nil,        // :
			reduce(57), // lOr, reduce: PrimaryExpr
			reduce(57), // lAnd, reduce: PrimaryExpr
			reduce(57), // lNot, reduce: PrimaryExpr
			reduce(57), // equals, reduce: PrimaryExpr
			reduce(57), // lessOrGreater, reduce: PrimaryExpr
			reduce(57), // or, reduce: PrimaryExpr
			reduce(57), // xor, reduce: PrimaryExpr
			reduce(57), // and, reduce: PrimaryExpr
			reduce(57), // shift, reduce: PrimaryExpr
			reduce(57), // +, reduce: PrimaryExpr
			reduce(57), // -, reduce: PrimaryExpr
			reduce(57), // product, reduce: PrimaryExpr
			reduce(57), // (, reduce: PrimaryExpr
			reduce(57), // ), reduce: PrimaryExpr
			nil,        // !
			nil,        // ~
			reduce(57), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(57), // ., reduce: PrimaryExpr
			shift(981), // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S501
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(185), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(204), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(211), // [
			shift(983), // ]
			nil,        // .
			nil,        // assign
			shift(214), // kwdIf
			nil,        // kwdElse
			shift(215), // kwdFor
			shift(217), // identifier
			shift(226), // kwdNull
			shift(227), // boolLit
			shift(228), // intLit
			shift(229), // floatLit
			shift(230), // stringLit
			shift(231), // kwdFn
		},
	},
	actionRow{ // S502
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(79), // ,, reduce: Operand
			nil,        // :
			reduce(79), // lOr, reduce: Operand
			reduce(79), // lAnd, reduce: Operand
			reduce(79), // lNot, reduce: Operand
			reduce(79), // equals, reduce: Operand
			reduce(79), // lessOrGreater, reduce: Operand
			reduce(79), // or, reduce: Operand
			reduce(79), // xor, reduce: Operand
			reduce(79), // and, reduce: Operand
			reduce(79), // shift, reduce: Operand
			reduce(79), // +, reduce: Operand
			reduce(79), // -, reduce: Operand
			reduce(79), // product, reduce: Operand
			reduce(79), // (, reduce: Operand
			reduce(79), // ), reduce: Operand
			nil,        // !
			nil,        // ~
			reduce(79), // [, reduce: Operand
			nil,        // ]
			reduce(79), // ., reduce: Operand
			shift(984), // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S503
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(233), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(251), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(258), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(260), // kwdIf
			nil,        // kwdElse
			shift(261), // kwdFor
			shift(263), // identifier
			shift(272), // kwdNull
			shift(273), // boolLit
			shift(274), // intLit
			shift(275), // floatLit
			shift(276), // stringLit
			shift(277), // kwdFn
		},
	},
	actionRow{ // S504
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			shift(986), // terminator
			shift(988), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(298), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(305), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(307), // kwdIf
			nil,        // kwdElse
			shift(308), // kwdFor
			shift(310), // identifier
			shift(319), // kwdNull
			shift(320), // boolLit
			shift(321), // intLit
			shift(322), // floatLit
			shift(323), // stringLit
			shift(324), // kwdFn
		},
	},
	actionRow{ // S505
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(78), // ,, reduce: Operand
			nil,        // :
			reduce(78), // lOr, reduce: Operand
			reduce(78), // lAnd, reduce: Operand
			reduce(78), // lNot, reduce: Operand
			reduce(78), // equals, reduce: Operand
			reduce(78), // lessOrGreater, reduce: Operand
			reduce(78), // or, reduce: Operand
			reduce(78), // xor, reduce: Operand
			reduce(78), // and, reduce: Operand
			reduce(78), // shift, reduce: Operand
			reduce(78), // +, reduce: Operand
			reduce(78), // -, reduce: Operand
			reduce(78), // product, reduce: Operand
			reduce(78), // (, reduce: Operand
			reduce(78), // ), reduce: Operand
			nil,        // !
			nil,        // ~
			reduce(78), // [, reduce: Operand
			nil,        // ]
			reduce(78), // ., reduce: Operand
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S506
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(82), // ,, reduce: Identifier
			nil,        // :
			reduce(82), // lOr, reduce: Identifier
			reduce(82), // lAnd, reduce: Identifier
			reduce(82), // lNot, reduce: Identifier
			reduce(82), // equals, reduce: Identifier
			reduce(82), // lessOrGreater, reduce: Identifier
			reduce(82), // or, reduce: Identifier
			reduce(82), // xor, reduce: Identifier
			reduce(82), // and, reduce: Identifier
			reduce(82), // shift, reduce: Identifier
			reduce(82), // +, reduce: Identifier
			reduce(82), // -, reduce: Identifier
			reduce(82), // product, reduce: Identifier
			reduce(82), // (, reduce: Identifier
			reduce(82), // ), reduce: Identifier
			nil,        // !
			nil,        // ~
			reduce(82), // [, reduce: Identifier
			nil,        // ]
			reduce(82), // ., reduce: Identifier
			reduce(82), // assign, reduce: Identifier
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S507
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(83), // ,, reduce: Literal
			nil,        // :
			reduce(83), // lOr, reduce: Literal
			reduce(83), // lAnd, reduce: Literal
			reduce(83), // lNot, reduce: Literal
			reduce(83), // equals, reduce: Literal
			reduce(83), // lessOrGreater, reduce: Literal
			reduce(83), // or, reduce: Literal
			reduce(83), // xor, reduce: Literal
			reduce(83), // and, reduce: Literal
			reduce(83), // shift, reduce: Literal
			reduce(83), // +, reduce: Literal
			reduce(83), // -, reduce: Literal
			reduce(83), // product, reduce: Literal
			reduce(83), // (, reduce: Literal
			reduce(83), // ), reduce: Literal
			nil,        // !
			nil,        // ~
			reduce(83), // [, reduce: Literal
			nil,        // ]
			reduce(83), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S508
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(84), // ,, reduce: Literal
			nil,        // :
			reduce(84), // lOr, reduce: Literal
			reduce(84), // lAnd, reduce: Literal
			reduce(84), // lNot, reduce: Literal
			reduce(84), // equals, reduce: Literal
			reduce(84), // lessOrGreater, reduce: Literal
			reduce(84), // or, reduce: Literal
			reduce(84), // xor, reduce: Literal
			reduce(84), // and, reduce: Literal
			reduce(84), // shift, reduce: Literal
			reduce(84), // +, reduce: Literal
			reduce(84), // -, reduce: Literal
			reduce(84), // product, reduce: Literal
			reduce(84), // (, reduce: Literal
			reduce(84), // ), reduce: Literal
			nil,        // !
			nil,        // ~
			reduce(84), // [, reduce: Literal
			nil,        // ]
			reduce(84), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S509
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(85), // ,, reduce: Literal
			nil,        // :
			reduce(85), // lOr, reduce: Literal
			reduce(85), // lAnd, reduce: Literal
			reduce(85), // lNot, reduce: Literal
			reduce(85), // equals, reduce: Literal
			reduce(85), // lessOrGreater, reduce: Literal
			reduce(85), // or, reduce: Literal
			reduce(85), // xor, reduce: Literal
			reduce(85), // and, reduce: Literal
			reduce(85), // shift, reduce: Literal
			reduce(85), // +, reduce: Literal
			reduce(85), // -, reduce: Literal
			reduce(85), // product, reduce: Literal
			reduce(85), // (, reduce: Literal
			reduce(85), // ), reduce: Literal
			nil,        // !
			nil,        // ~
			reduce(85), // [, reduce: Literal
			nil,        // ]
			reduce(85), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S510
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(86), // ,, reduce: Literal
			nil,        // :
			reduce(86), // lOr, reduce: Literal
			reduce(86), // lAnd, reduce: Literal
			reduce(86), // lNot, reduce: Literal
			reduce(86), // equals, reduce: Literal
			reduce(86), // lessOrGreater, reduce: Literal
			reduce(86), // or, reduce: Literal
			reduce(86), // xor, reduce: Literal
			reduce(86), // and, reduce: Literal
			reduce(86), // shift, reduce: Literal
			reduce(86), // +, reduce: Literal
			reduce(86), // -, reduce: Literal
			reduce(86), // product, reduce: Literal
			reduce(86), // (, reduce: Literal
			reduce(86), // ), reduce: Literal
			nil,        // !
			nil,        // ~
			reduce(86), // [, reduce: Literal
			nil,        // ]
			reduce(86), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S511
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(87), // ,, reduce: Literal
			nil,        // :
			reduce(87), // lOr, reduce: Literal
			reduce(87), // lAnd, reduce: Literal
			reduce(87), // lNot, reduce: Literal
			reduce(87), // equals, reduce: Literal
			reduce(87), // lessOrGreater, reduce: Literal
			reduce(87), // or, reduce: Literal
			reduce(87), // xor, reduce: Literal
			reduce(87), // and, reduce: Literal
			reduce(87), // shift, reduce: Literal
			reduce(87), // +, reduce: Literal
			reduce(87), // -, reduce: Literal
			reduce(87), // product, reduce: Literal
			reduce(87), // (, reduce: Literal
			reduce(87), // ), reduce: Literal
			nil,        // !
			nil,        // ~
			reduce(87), // [, reduce: Literal
			nil,        // ]
			reduce(87), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S512
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(88), // ,, reduce: Literal
			nil,        // :
			reduce(88), // lOr, reduce: Literal
			reduce(88), // lAnd, reduce: Literal
			reduce(88), // lNot, reduce: Literal
			reduce(88), // equals, reduce: Literal
			reduce(88), // lessOrGreater, reduce: Literal
			reduce(88), // or, reduce: Literal
			reduce(88), // xor, reduce: Literal
			reduce(88), // and, reduce: Literal
			reduce(88), // shift, reduce: Literal
			reduce(88), // +, reduce: Literal
			reduce(88), // -, reduce: Literal
			reduce(88), // product, reduce: Literal
			reduce(88), // (, reduce: Literal
			reduce(88), // ), reduce: Literal
			nil,        // !
			nil,        // ~
			reduce(88), // [, reduce: Literal
			nil,        // ]
			reduce(88), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S513
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(89), // ,, reduce: Literal
			nil,        // :
			reduce(89), // lOr, reduce: Literal
			reduce(89), // lAnd, reduce: Literal
			reduce(89), // lNot, reduce: Literal
			reduce(89), // equals, reduce: Literal
			reduce(89), // lessOrGreater, reduce: Literal
			reduce(89), // or, reduce: Literal
			reduce(89), // xor, reduce: Literal
			reduce(89), // and, reduce: Literal
			reduce(89), // shift, reduce: Literal
			reduce(89), // +, reduce: Literal
			reduce(89), // -, reduce: Literal
			reduce(89), // product, reduce: Literal
			reduce(89), // (, reduce: Literal
			reduce(89), // ), reduce: Literal
			nil,        // !
			nil,        // ~
			reduce(89), // [, reduce: Literal
			nil,        // ]
			reduce(89), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S514
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(90), // ,, reduce: Literal
			nil,        // :
			reduce(90), // lOr, reduce: Literal
			reduce(90), // lAnd, reduce: Literal
			reduce(90), // lNot, reduce: Literal
			reduce(90), // equals, reduce: Literal
			reduce(90), // lessOrGreater, reduce: Literal
			reduce(90), // or, reduce: Literal
			reduce(90), // xor, reduce: Literal
			reduce(90), // and, reduce: Literal
			reduce(90), // shift, reduce: Literal
			reduce(90), // +, reduce: Literal
			reduce(90), // -, reduce: Literal
			reduce(90), // product, reduce: Literal
			reduce(90), // (, reduce: Literal
			reduce(90), // ), reduce: Literal
			nil,        // !
			nil,        // ~
			reduce(90), // [, reduce: Literal
			nil,        // ]
			reduce(90), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S515
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(91), // ,, reduce: Null
			nil,        // :
			reduce(91), // lOr, reduce: Null
			reduce(91), // lAnd, reduce: Null
			reduce(91), // lNot, reduce: Null
			reduce(91), // equals, reduce: Null
			reduce(91), // lessOrGreater, reduce: Null
			reduce(91), // or, reduce: Null
			reduce(91), // xor, reduce: Null
			reduce(91), // and, reduce: Null
			reduce(91), // shift, reduce: Null
			reduce(91), // +, reduce: Null
			reduce(91), // -, reduce: Null
			reduce(91), // product, reduce: Null
			reduce(91), // (, reduce: Null
			reduce(91), // ), reduce: Null
			nil,        // !
			nil,        // ~
			reduce(91), // [, reduce: Null
			nil,        // ]
			reduce(91), // ., reduce: Null
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S516
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(92), // ,, reduce: BooleanLiteral
			nil,        // :
			reduce(92), // lOr, reduce: BooleanLiteral
			reduce(92), // lAnd, reduce: BooleanLiteral
			reduce(92), // lNot, reduce: BooleanLiteral
			reduce(92), // equals, reduce: BooleanLiteral
			reduce(92), // lessOrGreater, reduce: BooleanLiteral
			reduce(92), // or, reduce: BooleanLiteral
			reduce(92), // xor, reduce: BooleanLiteral
			reduce(92), // and, reduce: BooleanLiteral
			reduce(92), // shift, reduce: BooleanLiteral
			reduce(92), // +, reduce: BooleanLiteral
			reduce(92), // -, reduce: BooleanLiteral
			reduce(92), // product, reduce: BooleanLiteral
			reduce(92), // (, reduce: BooleanLiteral
			reduce(92), // ), reduce: BooleanLiteral
			nil,        // !
			nil,        // ~
			reduce(92), // [, reduce: BooleanLiteral
			nil,        // ]
			reduce(92), // ., reduce: BooleanLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S517
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(93), // ,, reduce: IntegerLiteral
			nil,        // :
			reduce(93), // lOr, reduce: IntegerLiteral
			reduce(93), // lAnd, reduce: IntegerLiteral
			reduce(93), // lNot, reduce: IntegerLiteral
			reduce(93), // equals, reduce: IntegerLiteral
			reduce(93), // lessOrGreater, reduce: IntegerLiteral
			reduce(93), // or, reduce: IntegerLiteral
			reduce(93), // xor, reduce: IntegerLiteral
			reduce(93), // and, reduce: IntegerLiteral
			reduce(93), // shift, reduce: IntegerLiteral
			reduce(93), // +, reduce: IntegerLiteral
			reduce(93), // -, reduce: IntegerLiteral
			reduce(93), // product, reduce: IntegerLiteral
			reduce(93), // (, reduce: IntegerLiteral
			reduce(93), // ), reduce: IntegerLiteral
			nil,        // !
			nil,        // ~
			reduce(93), // [, reduce: IntegerLiteral
			nil,        // ]
			reduce(93), // ., reduce: IntegerLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S518
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(94), // ,, reduce: FloatLiteral
			nil,        // :
			reduce(94), // lOr, reduce: FloatLiteral
			reduce(94), // lAnd, reduce: FloatLiteral
			reduce(94), // lNot, reduce: FloatLiteral
			reduce(94), // equals, reduce: FloatLiteral
			reduce(94), // lessOrGreater, reduce: FloatLiteral
			reduce(94), // or, reduce: FloatLiteral
			reduce(94), // xor, reduce: FloatLiteral
			reduce(94), // and, reduce: FloatLiteral
			reduce(94), // shift, reduce: FloatLiteral
			reduce(94), // +, reduce: FloatLiteral
			reduce(94), // -, reduce: FloatLiteral
			reduce(94), // product, reduce: FloatLiteral
			reduce(94), // (, reduce: FloatLiteral
			reduce(94), // ), reduce: FloatLiteral
			nil,        // !
			nil,        // ~
			reduce(94), // [, reduce: FloatLiteral
			nil,        // ]
			reduce(94), // ., reduce: FloatLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S519
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(95), // ,, reduce: StringLiteral
			nil,        // :
			reduce(95), // lOr, reduce: StringLiteral
			reduce(95), // lAnd, reduce: StringLiteral
			reduce(95), // lNot, reduce: StringLiteral
			reduce(95), // equals, reduce: StringLiteral
			reduce(95), // lessOrGreater, reduce: StringLiteral
			reduce(95), // or, reduce: StringLiteral
			reduce(95), // xor, reduce: StringLiteral
			reduce(95), // and, reduce: StringLiteral
			reduce(95), // shift, reduce: StringLiteral
			reduce(95), // +, reduce: StringLiteral
			reduce(95), // -, reduce: StringLiteral
			reduce(95), // product, reduce: StringLiteral
			reduce(95), // (, reduce: StringLiteral
			reduce(95), // ), reduce: StringLiteral
			nil,        // !
			nil,        // ~
			reduce(95), // [, reduce: StringLiteral
			nil,        // ]
			reduce(95), // ., reduce: StringLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S520
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			shift(990), // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S521
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(416), // {
			nil,        // }
			nil,        // kwdReturn
			shift(991), // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(434), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(441), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(443), // kwdIf
			nil,        // kwdElse
			shift(444), // kwdFor
			shift(446), // identifier
			shift(455), // kwdNull
			shift(456), // boolLit
			shift(457), // intLit
			shift(458), // floatLit
			shift(459), // stringLit
			shift(460), // kwdFn
		},
	},
	actionRow{ // S522
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			shift(993), // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S523
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			shift(994), // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(19), // ], reduce: Expression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S524
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(20), // ], reduce: Expression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S525
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(21), // ], reduce: Expression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S526
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(22), // ], reduce: Expression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S527
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(24), // lOr, reduce: Term1
			shift(995), // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(24), // ], reduce: Term1
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S528
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(26), // lOr, reduce: Term2
			reduce(26), // lAnd, reduce: Term2
			shift(996), // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(26), // ], reduce: Term2
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S529
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(28), // lOr, reduce: Term3
			reduce(28), // lAnd, reduce: Term3
			reduce(28), // lNot, reduce: Term3
			shift(997), // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(28), // ], reduce: Term3
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S530
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(30), // lOr, reduce: Term4
			reduce(30), // lAnd, reduce: Term4
			reduce(30), // lNot, reduce: Term4
			reduce(30), // equals, reduce: Term4
			shift(998), // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(30), // ], reduce: Term4
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S531
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(32), // lOr, reduce: Term5
			reduce(32), // lAnd, reduce: Term5
			reduce(32), // lNot, reduce: Term5
			reduce(32), // equals, reduce: Term5
			reduce(32), // lessOrGreater, reduce: Term5
			shift(999), // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(32), // ], reduce: Term5
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S532
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(34),  // lOr, reduce: Term6
			reduce(34),  // lAnd, reduce: Term6
			reduce(34),  // lNot, reduce: Term6
			reduce(34),  // equals, reduce: Term6
			reduce(34),  // lessOrGreater, reduce: Term6
			reduce(34),  // or, reduce: Term6
			shift(1000), // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			reduce(34),  // ], reduce: Term6
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S533
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(36),  // lOr, reduce: Term7
			reduce(36),  // lAnd, reduce: Term7
			reduce(36),  // lNot, reduce: Term7
			reduce(36),  // equals, reduce: Term7
			reduce(36),  // lessOrGreater, reduce: Term7
			reduce(36),  // or, reduce: Term7
			reduce(36),  // xor, reduce: Term7
			shift(1001), // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			reduce(36),  // ], reduce: Term7
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S534
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(38),  // lOr, reduce: Term8
			reduce(38),  // lAnd, reduce: Term8
			reduce(38),  // lNot, reduce: Term8
			reduce(38),  // equals, reduce: Term8
			reduce(38),  // lessOrGreater, reduce: Term8
			reduce(38),  // or, reduce: Term8
			reduce(38),  // xor, reduce: Term8
			reduce(38),  // and, reduce: Term8
			shift(1002), // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			reduce(38),  // ], reduce: Term8
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S535
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(40),  // lOr, reduce: Term9
			reduce(40),  // lAnd, reduce: Term9
			reduce(40),  // lNot, reduce: Term9
			reduce(40),  // equals, reduce: Term9
			reduce(40),  // lessOrGreater, reduce: Term9
			reduce(40),  // or, reduce: Term9
			reduce(40),  // xor, reduce: Term9
			reduce(40),  // and, reduce: Term9
			reduce(40),  // shift, reduce: Term9
			shift(1003), // +
			shift(1004), // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			reduce(40),  // ], reduce: Term9
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S536
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(43),  // lOr, reduce: Term10
			reduce(43),  // lAnd, reduce: Term10
			reduce(43),  // lNot, reduce: Term10
			reduce(43),  // equals, reduce: Term10
			reduce(43),  // lessOrGreater, reduce: Term10
			reduce(43),  // or, reduce: Term10
			reduce(43),  // xor, reduce: Term10
			reduce(43),  // and, reduce: Term10
			reduce(43),  // shift, reduce: Term10
			reduce(43),  // +, reduce: Term10
			reduce(43),  // -, reduce: Term10
			shift(1005), // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			reduce(43),  // ], reduce: Term10
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S537
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(45),  // lOr, reduce: Term11
			reduce(45),  // lAnd, reduce: Term11
			reduce(45),  // lNot, reduce: Term11
			reduce(45),  // equals, reduce: Term11
			reduce(45),  // lessOrGreater, reduce: Term11
			reduce(45),  // or, reduce: Term11
			reduce(45),  // xor, reduce: Term11
			reduce(45),  // and, reduce: Term11
			reduce(45),  // shift, reduce: Term11
			reduce(45),  // +, reduce: Term11
			reduce(45),  // -, reduce: Term11
			reduce(45),  // product, reduce: Term11
			shift(1006), // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1007), // [
			reduce(45),  // ], reduce: Term11
			shift(1008), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S538
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(46), // lOr, reduce: Term12
			reduce(46), // lAnd, reduce: Term12
			reduce(46), // lNot, reduce: Term12
			reduce(46), // equals, reduce: Term12
			reduce(46), // lessOrGreater, reduce: Term12
			reduce(46), // or, reduce: Term12
			reduce(46), // xor, reduce: Term12
			reduce(46), // and, reduce: Term12
			reduce(46), // shift, reduce: Term12
			reduce(46), // +, reduce: Term12
			reduce(46), // -, reduce: Term12
			reduce(46), // product, reduce: Term12
			reduce(46), // (, reduce: Term12
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(46), // [, reduce: Term12
			reduce(46), // ], reduce: Term12
			reduce(46), // ., reduce: Term12
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S539
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(129), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(147), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(154), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(156), // kwdIf
			nil,        // kwdElse
			shift(157), // kwdFor
			shift(159), // identifier
			shift(168), // kwdNull
			shift(169), // boolLit
			shift(170), // intLit
			shift(171), // floatLit
			shift(172), // stringLit
			shift(173), // kwdFn
		},
	},
	actionRow{ // S540
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(48), // lOr, reduce: PrefixExpression
			reduce(48), // lAnd, reduce: PrefixExpression
			reduce(48), // lNot, reduce: PrefixExpression
			reduce(48), // equals, reduce: PrefixExpression
			reduce(48), // lessOrGreater, reduce: PrefixExpression
			reduce(48), // or, reduce: PrefixExpression
			reduce(48), // xor, reduce: PrefixExpression
			reduce(48), // and, reduce: PrefixExpression
			reduce(48), // shift, reduce: PrefixExpression
			reduce(48), // +, reduce: PrefixExpression
			reduce(48), // -, reduce: PrefixExpression
			reduce(48), // product, reduce: PrefixExpression
			reduce(48), // (, reduce: PrefixExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(48), // [, reduce: PrefixExpression
			reduce(48), // ], reduce: PrefixExpression
			reduce(48), // ., reduce: PrefixExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S541
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(521),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(176),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(546),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1015), // identifier
			shift(560),  // kwdNull
			shift(561),  // boolLit
			shift(562),  // intLit
			shift(563),  // floatLit
			shift(564),  // stringLit
			shift(565),  // kwdFn
		},
	},
	actionRow{ // S542
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(54), // lOr, reduce: PrimaryExpr
			reduce(54), // lAnd, reduce: PrimaryExpr
			reduce(54), // lNot, reduce: PrimaryExpr
			reduce(54), // equals, reduce: PrimaryExpr
			reduce(54), // lessOrGreater, reduce: PrimaryExpr
			reduce(54), // or, reduce: PrimaryExpr
			reduce(54), // xor, reduce: PrimaryExpr
			reduce(54), // and, reduce: PrimaryExpr
			reduce(54), // shift, reduce: PrimaryExpr
			reduce(54), // +, reduce: PrimaryExpr
			reduce(54), // -, reduce: PrimaryExpr
			reduce(54), // product, reduce: PrimaryExpr
			reduce(54), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(54), // [, reduce: PrimaryExpr
			reduce(54), // ], reduce: PrimaryExpr
			reduce(54), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S543
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(55),  // lOr, reduce: PrimaryExpr
			reduce(55),  // lAnd, reduce: PrimaryExpr
			reduce(55),  // lNot, reduce: PrimaryExpr
			reduce(55),  // equals, reduce: PrimaryExpr
			reduce(55),  // lessOrGreater, reduce: PrimaryExpr
			reduce(55),  // or, reduce: PrimaryExpr
			reduce(55),  // xor, reduce: PrimaryExpr
			reduce(55),  // and, reduce: PrimaryExpr
			reduce(55),  // shift, reduce: PrimaryExpr
			reduce(55),  // +, reduce: PrimaryExpr
			reduce(55),  // -, reduce: PrimaryExpr
			reduce(55),  // product, reduce: PrimaryExpr
			reduce(55),  // (, reduce: PrimaryExpr
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(55),  // [, reduce: PrimaryExpr
			reduce(55),  // ], reduce: PrimaryExpr
			reduce(55),  // ., reduce: PrimaryExpr
			shift(1016), // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S544
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(56), // lOr, reduce: PrimaryExpr
			reduce(56), // lAnd, reduce: PrimaryExpr
			reduce(56), // lNot, reduce: PrimaryExpr
			reduce(56), // equals, reduce: PrimaryExpr
			reduce(56), // lessOrGreater, reduce: PrimaryExpr
			reduce(56), // or, reduce: PrimaryExpr
			reduce(56), // xor, reduce: PrimaryExpr
			reduce(56), // and, reduce: PrimaryExpr
			reduce(56), // shift, reduce: PrimaryExpr
			reduce(56), // +, reduce: PrimaryExpr
			reduce(56), // -, reduce: PrimaryExpr
			reduce(56), // product, reduce: PrimaryExpr
			reduce(56), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(56), // [, reduce: PrimaryExpr
			reduce(56), // ], reduce: PrimaryExpr
			reduce(56), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S545
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(57),  // lOr, reduce: PrimaryExpr
			reduce(57),  // lAnd, reduce: PrimaryExpr
			reduce(57),  // lNot, reduce: PrimaryExpr
			reduce(57),  // equals, reduce: PrimaryExpr
			reduce(57),  // lessOrGreater, reduce: PrimaryExpr
			reduce(57),  // or, reduce: PrimaryExpr
			reduce(57),  // xor, reduce: PrimaryExpr
			reduce(57),  // and, reduce: PrimaryExpr
			reduce(57),  // shift, reduce: PrimaryExpr
			reduce(57),  // +, reduce: PrimaryExpr
			reduce(57),  // -, reduce: PrimaryExpr
			reduce(57),  // product, reduce: PrimaryExpr
			reduce(57),  // (, reduce: PrimaryExpr
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(57),  // [, reduce: PrimaryExpr
			reduce(57),  // ], reduce: PrimaryExpr
			reduce(57),  // ., reduce: PrimaryExpr
			shift(1017), // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S546
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(185),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(204),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(211),  // [
			shift(1019), // ]
			nil,         // .
			nil,         // assign
			shift(214),  // kwdIf
			nil,         // kwdElse
			shift(215),  // kwdFor
			shift(217),  // identifier
			shift(226),  // kwdNull
			shift(227),  // boolLit
			shift(228),  // intLit
			shift(229),  // floatLit
			shift(230),  // stringLit
			shift(231),  // kwdFn
		},
	},
	actionRow{ // S547
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(79),  // lOr, reduce: Operand
			reduce(79),  // lAnd, reduce: Operand
			reduce(79),  // lNot, reduce: Operand
			reduce(79),  // equals, reduce: Operand
			reduce(79),  // lessOrGreater, reduce: Operand
			reduce(79),  // or, reduce: Operand
			reduce(79),  // xor, reduce: Operand
			reduce(79),  // and, reduce: Operand
			reduce(79),  // shift, reduce: Operand
			reduce(79),  // +, reduce: Operand
			reduce(79),  // -, reduce: Operand
			reduce(79),  // product, reduce: Operand
			reduce(79),  // (, reduce: Operand
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(79),  // [, reduce: Operand
			reduce(79),  // ], reduce: Operand
			reduce(79),  // ., reduce: Operand
			shift(1020), // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S548
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(233), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(251), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(258), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(260), // kwdIf
			nil,        // kwdElse
			shift(261), // kwdFor
			shift(263), // identifier
			shift(272), // kwdNull
			shift(273), // boolLit
			shift(274), // intLit
			shift(275), // floatLit
			shift(276), // stringLit
			shift(277), // kwdFn
		},
	},
	actionRow{ // S549
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1022), // terminator
			shift(1024), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(298),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(305),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(307),  // kwdIf
			nil,         // kwdElse
			shift(308),  // kwdFor
			shift(310),  // identifier
			shift(319),  // kwdNull
			shift(320),  // boolLit
			shift(321),  // intLit
			shift(322),  // floatLit
			shift(323),  // stringLit
			shift(324),  // kwdFn
		},
	},
	actionRow{ // S550
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(78), // lOr, reduce: Operand
			reduce(78), // lAnd, reduce: Operand
			reduce(78), // lNot, reduce: Operand
			reduce(78), // equals, reduce: Operand
			reduce(78), // lessOrGreater, reduce: Operand
			reduce(78), // or, reduce: Operand
			reduce(78), // xor, reduce: Operand
			reduce(78), // and, reduce: Operand
			reduce(78), // shift, reduce: Operand
			reduce(78), // +, reduce: Operand
			reduce(78), // -, reduce: Operand
			reduce(78), // product, reduce: Operand
			reduce(78), // (, reduce: Operand
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(78), // [, reduce: Operand
			reduce(78), // ], reduce: Operand
			reduce(78), // ., reduce: Operand
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S551
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(82), // lOr, reduce: Identifier
			reduce(82), // lAnd, reduce: Identifier
			reduce(82), // lNot, reduce: Identifier
			reduce(82), // equals, reduce: Identifier
			reduce(82), // lessOrGreater, reduce: Identifier
			reduce(82), // or, reduce: Identifier
			reduce(82), // xor, reduce: Identifier
			reduce(82), // and, reduce: Identifier
			reduce(82), // shift, reduce: Identifier
			reduce(82), // +, reduce: Identifier
			reduce(82), // -, reduce: Identifier
			reduce(82), // product, reduce: Identifier
			reduce(82), // (, reduce: Identifier
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(82), // [, reduce: Identifier
			reduce(82), // ], reduce: Identifier
			reduce(82), // ., reduce: Identifier
			reduce(82), // assign, reduce: Identifier
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S552
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(83), // lOr, reduce: Literal
			reduce(83), // lAnd, reduce: Literal
			reduce(83), // lNot, reduce: Literal
			reduce(83), // equals, reduce: Literal
			reduce(83), // lessOrGreater, reduce: Literal
			reduce(83), // or, reduce: Literal
			reduce(83), // xor, reduce: Literal
			reduce(83), // and, reduce: Literal
			reduce(83), // shift, reduce: Literal
			reduce(83), // +, reduce: Literal
			reduce(83), // -, reduce: Literal
			reduce(83), // product, reduce: Literal
			reduce(83), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(83), // [, reduce: Literal
			reduce(83), // ], reduce: Literal
			reduce(83), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S553
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(84), // lOr, reduce: Literal
			reduce(84), // lAnd, reduce: Literal
			reduce(84), // lNot, reduce: Literal
			reduce(84), // equals, reduce: Literal
			reduce(84), // lessOrGreater, reduce: Literal
			reduce(84), // or, reduce: Literal
			reduce(84), // xor, reduce: Literal
			reduce(84), // and, reduce: Literal
			reduce(84), // shift, reduce: Literal
			reduce(84), // +, reduce: Literal
			reduce(84), // -, reduce: Literal
			reduce(84), // product, reduce: Literal
			reduce(84), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(84), // [, reduce: Literal
			reduce(84), // ], reduce: Literal
			reduce(84), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S554
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(85), // lOr, reduce: Literal
			reduce(85), // lAnd, reduce: Literal
			reduce(85), // lNot, reduce: Literal
			reduce(85), // equals, reduce: Literal
			reduce(85), // lessOrGreater, reduce: Literal
			reduce(85), // or, reduce: Literal
			reduce(85), // xor, reduce: Literal
			reduce(85), // and, reduce: Literal
			reduce(85), // shift, reduce: Literal
			reduce(85), // +, reduce: Literal
			reduce(85), // -, reduce: Literal
			reduce(85), // product, reduce: Literal
			reduce(85), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(85), // [, reduce: Literal
			reduce(85), // ], reduce: Literal
			reduce(85), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S555
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(86), // lOr, reduce: Literal
			reduce(86), // lAnd, reduce: Literal
			reduce(86), // lNot, reduce: Literal
			reduce(86), // equals, reduce: Literal
			reduce(86), // lessOrGreater, reduce: Literal
			reduce(86), // or, reduce: Literal
			reduce(86), // xor, reduce: Literal
			reduce(86), // and, reduce: Literal
			reduce(86), // shift, reduce: Literal
			reduce(86), // +, reduce: Literal
			reduce(86), // -, reduce: Literal
			reduce(86), // product, reduce: Literal
			reduce(86), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(86), // [, reduce: Literal
			reduce(86), // ], reduce: Literal
			reduce(86), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S556
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(87), // lOr, reduce: Literal
			reduce(87), // lAnd, reduce: Literal
			reduce(87), // lNot, reduce: Literal
			reduce(87), // equals, reduce: Literal
			reduce(87), // lessOrGreater, reduce: Literal
			reduce(87), // or, reduce: Literal
			reduce(87), // xor, reduce: Literal
			reduce(87), // and, reduce: Literal
			reduce(87), // shift, reduce: Literal
			reduce(87), // +, reduce: Literal
			reduce(87), // -, reduce: Literal
			reduce(87), // product, reduce: Literal
			reduce(87), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(87), // [, reduce: Literal
			reduce(87), // ], reduce: Literal
			reduce(87), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S557
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(88), // lOr, reduce: Literal
			reduce(88), // lAnd, reduce: Literal
			reduce(88), // lNot, reduce: Literal
			reduce(88), // equals, reduce: Literal
			reduce(88), // lessOrGreater, reduce: Literal
			reduce(88), // or, reduce: Literal
			reduce(88), // xor, reduce: Literal
			reduce(88), // and, reduce: Literal
			reduce(88), // shift, reduce: Literal
			reduce(88), // +, reduce: Literal
			reduce(88), // -, reduce: Literal
			reduce(88), // product, reduce: Literal
			reduce(88), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(88), // [, reduce: Literal
			reduce(88), // ], reduce: Literal
			reduce(88), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S558
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(89), // lOr, reduce: Literal
			reduce(89), // lAnd, reduce: Literal
			reduce(89), // lNot, reduce: Literal
			reduce(89), // equals, reduce: Literal
			reduce(89), // lessOrGreater, reduce: Literal
			reduce(89), // or, reduce: Literal
			reduce(89), // xor, reduce: Literal
			reduce(89), // and, reduce: Literal
			reduce(89), // shift, reduce: Literal
			reduce(89), // +, reduce: Literal
			reduce(89), // -, reduce: Literal
			reduce(89), // product, reduce: Literal
			reduce(89), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(89), // [, reduce: Literal
			reduce(89), // ], reduce: Literal
			reduce(89), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S559
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(90), // lOr, reduce: Literal
			reduce(90), // lAnd, reduce: Literal
			reduce(90), // lNot, reduce: Literal
			reduce(90), // equals, reduce: Literal
			reduce(90), // lessOrGreater, reduce: Literal
			reduce(90), // or, reduce: Literal
			reduce(90), // xor, reduce: Literal
			reduce(90), // and, reduce: Literal
			reduce(90), // shift, reduce: Literal
			reduce(90), // +, reduce: Literal
			reduce(90), // -, reduce: Literal
			reduce(90), // product, reduce: Literal
			reduce(90), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(90), // [, reduce: Literal
			reduce(90), // ], reduce: Literal
			reduce(90), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S560
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(91), // lOr, reduce: Null
			reduce(91), // lAnd, reduce: Null
			reduce(91), // lNot, reduce: Null
			reduce(91), // equals, reduce: Null
			reduce(91), // lessOrGreater, reduce: Null
			reduce(91), // or, reduce: Null
			reduce(91), // xor, reduce: Null
			reduce(91), // and, reduce: Null
			reduce(91), // shift, reduce: Null
			reduce(91), // +, reduce: Null
			reduce(91), // -, reduce: Null
			reduce(91), // product, reduce: Null
			reduce(91), // (, reduce: Null
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(91), // [, reduce: Null
			reduce(91), // ], reduce: Null
			reduce(91), // ., reduce: Null
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S561
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(92), // lOr, reduce: BooleanLiteral
			reduce(92), // lAnd, reduce: BooleanLiteral
			reduce(92), // lNot, reduce: BooleanLiteral
			reduce(92), // equals, reduce: BooleanLiteral
			reduce(92), // lessOrGreater, reduce: BooleanLiteral
			reduce(92), // or, reduce: BooleanLiteral
			reduce(92), // xor, reduce: BooleanLiteral
			reduce(92), // and, reduce: BooleanLiteral
			reduce(92), // shift, reduce: BooleanLiteral
			reduce(92), // +, reduce: BooleanLiteral
			reduce(92), // -, reduce: BooleanLiteral
			reduce(92), // product, reduce: BooleanLiteral
			reduce(92), // (, reduce: BooleanLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(92), // [, reduce: BooleanLiteral
			reduce(92), // ], reduce: BooleanLiteral
			reduce(92), // ., reduce: BooleanLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S562
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(93), // lOr, reduce: IntegerLiteral
			reduce(93), // lAnd, reduce: IntegerLiteral
			reduce(93), // lNot, reduce: IntegerLiteral
			reduce(93), // equals, reduce: IntegerLiteral
			reduce(93), // lessOrGreater, reduce: IntegerLiteral
			reduce(93), // or, reduce: IntegerLiteral
			reduce(93), // xor, reduce: IntegerLiteral
			reduce(93), // and, reduce: IntegerLiteral
			reduce(93), // shift, reduce: IntegerLiteral
			reduce(93), // +, reduce: IntegerLiteral
			reduce(93), // -, reduce: IntegerLiteral
			reduce(93), // product, reduce: IntegerLiteral
			reduce(93), // (, reduce: IntegerLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(93), // [, reduce: IntegerLiteral
			reduce(93), // ], reduce: IntegerLiteral
			reduce(93), // ., reduce: IntegerLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S563
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(94), // lOr, reduce: FloatLiteral
			reduce(94), // lAnd, reduce: FloatLiteral
			reduce(94), // lNot, reduce: FloatLiteral
			reduce(94), // equals, reduce: FloatLiteral
			reduce(94), // lessOrGreater, reduce: FloatLiteral
			reduce(94), // or, reduce: FloatLiteral
			reduce(94), // xor, reduce: FloatLiteral
			reduce(94), // and, reduce: FloatLiteral
			reduce(94), // shift, reduce: FloatLiteral
			reduce(94), // +, reduce: FloatLiteral
			reduce(94), // -, reduce: FloatLiteral
			reduce(94), // product, reduce: FloatLiteral
			reduce(94), // (, reduce: FloatLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(94), // [, reduce: FloatLiteral
			reduce(94), // ], reduce: FloatLiteral
			reduce(94), // ., reduce: FloatLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S564
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(95), // lOr, reduce: StringLiteral
			reduce(95), // lAnd, reduce: StringLiteral
			reduce(95), // lNot, reduce: StringLiteral
			reduce(95), // equals, reduce: StringLiteral
			reduce(95), // lessOrGreater, reduce: StringLiteral
			reduce(95), // or, reduce: StringLiteral
			reduce(95), // xor, reduce: StringLiteral
			reduce(95), // and, reduce: StringLiteral
			reduce(95), // shift, reduce: StringLiteral
			reduce(95), // +, reduce: StringLiteral
			reduce(95), // -, reduce: StringLiteral
			reduce(95), // product, reduce: StringLiteral
			reduce(95), // (, reduce: StringLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(95), // [, reduce: StringLiteral
			reduce(95), // ], reduce: StringLiteral
			reduce(95), // ., reduce: StringLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S565
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			shift(1026), // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S566
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(61), // $, reduce: SelectorExpression
			reduce(61), // terminator, reduce: SelectorExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(61), // lOr, reduce: SelectorExpression
			reduce(61), // lAnd, reduce: SelectorExpression
			reduce(61), // lNot, reduce: SelectorExpression
			reduce(61), // equals, reduce: SelectorExpression
			reduce(61), // lessOrGreater, reduce: SelectorExpression
			reduce(61), // or, reduce: SelectorExpression
			reduce(61), // xor, reduce: SelectorExpression
			reduce(61), // and, reduce: SelectorExpression
			reduce(61), // shift, reduce: SelectorExpression
			reduce(61), // +, reduce: SelectorExpression
			reduce(61), // -, reduce: SelectorExpression
			reduce(61), // product, reduce: SelectorExpression
			reduce(61), // (, reduce: SelectorExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(61), // [, reduce: SelectorExpression
			nil,        // ]
			reduce(61), // ., reduce: SelectorExpression
			reduce(61), // assign, reduce: SelectorExpression
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S567
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			shift(1027), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S568
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			shift(1028), // }
			nil,         // kwdReturn
			shift(381),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S569
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(47), // $, reduce: Term12
			reduce(47), // terminator, reduce: Term12
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(47), // lOr, reduce: Term12
			reduce(47), // lAnd, reduce: Term12
			reduce(47), // lNot, reduce: Term12
			reduce(47), // equals, reduce: Term12
			reduce(47), // lessOrGreater, reduce: Term12
			reduce(47), // or, reduce: Term12
			reduce(47), // xor, reduce: Term12
			reduce(47), // and, reduce: Term12
			reduce(47), // shift, reduce: Term12
			reduce(47), // +, reduce: Term12
			reduce(47), // -, reduce: Term12
			reduce(47), // product, reduce: Term12
			reduce(47), // (, reduce: Term12
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(47), // [, reduce: Term12
			nil,        // ]
			reduce(47), // ., reduce: Term12
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S570
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(129), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(147), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(154), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(591), // identifier
			shift(168), // kwdNull
			shift(169), // boolLit
			shift(170), // intLit
			shift(171), // floatLit
			shift(172), // stringLit
			shift(173), // kwdFn
		},
	},
	actionRow{ // S571
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(129), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(147), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(154), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(591), // identifier
			shift(168), // kwdNull
			shift(169), // boolLit
			shift(170), // intLit
			shift(171), // floatLit
			shift(172), // stringLit
			shift(173), // kwdFn
		},
	},
	actionRow{ // S572
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(129), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(147), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(154), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(591), // identifier
			shift(168), // kwdNull
			shift(169), // boolLit
			shift(170), // intLit
			shift(171), // floatLit
			shift(172), // stringLit
			shift(173), // kwdFn
		},
	},
	actionRow{ // S573
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(129), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(147), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(154), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(591), // identifier
			shift(168), // kwdNull
			shift(169), // boolLit
			shift(170), // intLit
			shift(171), // floatLit
			shift(172), // stringLit
			shift(173), // kwdFn
		},
	},
	actionRow{ // S574
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(129), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(147), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(154), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(591), // identifier
			shift(168), // kwdNull
			shift(169), // boolLit
			shift(170), // intLit
			shift(171), // floatLit
			shift(172), // stringLit
			shift(173), // kwdFn
		},
	},
	actionRow{ // S575
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(129), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(147), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(154), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(591), // identifier
			shift(168), // kwdNull
			shift(169), // boolLit
			shift(170), // intLit
			shift(171), // floatLit
			shift(172), // stringLit
			shift(173), // kwdFn
		},
	},
	actionRow{ // S576
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(129), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(147), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(154), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(591), // identifier
			shift(168), // kwdNull
			shift(169), // boolLit
			shift(170), // intLit
			shift(171), // floatLit
			shift(172), // stringLit
			shift(173), // kwdFn
		},
	},
	actionRow{ // S577
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(129), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(147), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(154), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(591), // identifier
			shift(168), // kwdNull
			shift(169), // boolLit
			shift(170), // intLit
			shift(171), // floatLit
			shift(172), // stringLit
			shift(173), // kwdFn
		},
	},
	actionRow{ // S578
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(129), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(147), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(154), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(591), // identifier
			shift(168), // kwdNull
			shift(169), // boolLit
			shift(170), // intLit
			shift(171), // floatLit
			shift(172), // stringLit
			shift(173), // kwdFn
		},
	},
	actionRow{ // S579
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(129), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(147), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(154), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(591), // identifier
			shift(168), // kwdNull
			shift(169), // boolLit
			shift(170), // intLit
			shift(171), // floatLit
			shift(172), // stringLit
			shift(173), // kwdFn
		},
	},
	actionRow{ // S580
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(129), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(147), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(154), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(591), // identifier
			shift(168), // kwdNull
			shift(169), // boolLit
			shift(170), // intLit
			shift(171), // floatLit
			shift(172), // stringLit
			shift(173), // kwdFn
		},
	},
	actionRow{ // S581
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(129), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(147), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(154), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(591), // identifier
			shift(168), // kwdNull
			shift(169), // boolLit
			shift(170), // intLit
			shift(171), // floatLit
			shift(172), // stringLit
			shift(173), // kwdFn
		},
	},
	actionRow{ // S582
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(474),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(493),  // (
			shift(1043), // )
			shift(31),   // !
			shift(32),   // ~
			shift(501),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(503),  // kwdIf
			nil,         // kwdElse
			shift(504),  // kwdFor
			shift(506),  // identifier
			shift(515),  // kwdNull
			shift(516),  // boolLit
			shift(517),  // intLit
			shift(518),  // floatLit
			shift(519),  // stringLit
			shift(520),  // kwdFn
		},
	},
	actionRow{ // S583
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(521), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(539), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(546), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(548), // kwdIf
			nil,        // kwdElse
			shift(549), // kwdFor
			shift(551), // identifier
			shift(560), // kwdNull
			shift(561), // boolLit
			shift(562), // intLit
			shift(563), // floatLit
			shift(564), // stringLit
			shift(565), // kwdFn
		},
	},
	actionRow{ // S584
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(159), // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S585
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1046), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S586
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			shift(582),  // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1047), // [
			nil,         // ]
			shift(1048), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S587
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(49), // lOr, reduce: PrefixExpression
			reduce(49), // lAnd, reduce: PrefixExpression
			reduce(49), // lNot, reduce: PrefixExpression
			reduce(49), // equals, reduce: PrefixExpression
			reduce(49), // lessOrGreater, reduce: PrefixExpression
			reduce(49), // or, reduce: PrefixExpression
			reduce(49), // xor, reduce: PrefixExpression
			reduce(49), // and, reduce: PrefixExpression
			reduce(49), // shift, reduce: PrefixExpression
			reduce(49), // +, reduce: PrefixExpression
			reduce(49), // -, reduce: PrefixExpression
			reduce(49), // product, reduce: PrefixExpression
			reduce(48), // (, reduce: PrefixExpression
			reduce(49), // ), reduce: PrefixExpression
			nil,        // !
			nil,        // ~
			reduce(48), // [, reduce: PrefixExpression
			nil,        // ]
			reduce(48), // ., reduce: PrefixExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S588
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(55), // lOr, reduce: PrimaryExpr
			reduce(55), // lAnd, reduce: PrimaryExpr
			reduce(55), // lNot, reduce: PrimaryExpr
			reduce(55), // equals, reduce: PrimaryExpr
			reduce(55), // lessOrGreater, reduce: PrimaryExpr
			reduce(55), // or, reduce: PrimaryExpr
			reduce(55), // xor, reduce: PrimaryExpr
			reduce(55), // and, reduce: PrimaryExpr
			reduce(55), // shift, reduce: PrimaryExpr
			reduce(55), // +, reduce: PrimaryExpr
			reduce(55), // -, reduce: PrimaryExpr
			reduce(55), // product, reduce: PrimaryExpr
			reduce(55), // (, reduce: PrimaryExpr
			reduce(55), // ), reduce: PrimaryExpr
			nil,        // !
			nil,        // ~
			reduce(55), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(55), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S589
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(57), // lOr, reduce: PrimaryExpr
			reduce(57), // lAnd, reduce: PrimaryExpr
			reduce(57), // lNot, reduce: PrimaryExpr
			reduce(57), // equals, reduce: PrimaryExpr
			reduce(57), // lessOrGreater, reduce: PrimaryExpr
			reduce(57), // or, reduce: PrimaryExpr
			reduce(57), // xor, reduce: PrimaryExpr
			reduce(57), // and, reduce: PrimaryExpr
			reduce(57), // shift, reduce: PrimaryExpr
			reduce(57), // +, reduce: PrimaryExpr
			reduce(57), // -, reduce: PrimaryExpr
			reduce(57), // product, reduce: PrimaryExpr
			reduce(57), // (, reduce: PrimaryExpr
			reduce(57), // ), reduce: PrimaryExpr
			nil,        // !
			nil,        // ~
			reduce(57), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(57), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S590
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(79), // lOr, reduce: Operand
			reduce(79), // lAnd, reduce: Operand
			reduce(79), // lNot, reduce: Operand
			reduce(79), // equals, reduce: Operand
			reduce(79), // lessOrGreater, reduce: Operand
			reduce(79), // or, reduce: Operand
			reduce(79), // xor, reduce: Operand
			reduce(79), // and, reduce: Operand
			reduce(79), // shift, reduce: Operand
			reduce(79), // +, reduce: Operand
			reduce(79), // -, reduce: Operand
			reduce(79), // product, reduce: Operand
			reduce(79), // (, reduce: Operand
			reduce(79), // ), reduce: Operand
			nil,        // !
			nil,        // ~
			reduce(79), // [, reduce: Operand
			nil,        // ]
			reduce(79), // ., reduce: Operand
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S591
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(82), // lOr, reduce: Identifier
			reduce(82), // lAnd, reduce: Identifier
			reduce(82), // lNot, reduce: Identifier
			reduce(82), // equals, reduce: Identifier
			reduce(82), // lessOrGreater, reduce: Identifier
			reduce(82), // or, reduce: Identifier
			reduce(82), // xor, reduce: Identifier
			reduce(82), // and, reduce: Identifier
			reduce(82), // shift, reduce: Identifier
			reduce(82), // +, reduce: Identifier
			reduce(82), // -, reduce: Identifier
			reduce(82), // product, reduce: Identifier
			reduce(82), // (, reduce: Identifier
			reduce(82), // ), reduce: Identifier
			nil,        // !
			nil,        // ~
			reduce(82), // [, reduce: Identifier
			nil,        // ]
			reduce(82), // ., reduce: Identifier
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S592
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(129), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(147), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(154), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(156), // kwdIf
			nil,        // kwdElse
			shift(157), // kwdFor
			shift(159), // identifier
			shift(168), // kwdNull
			shift(169), // boolLit
			shift(170), // intLit
			shift(171), // floatLit
			shift(172), // stringLit
			shift(173), // kwdFn
		},
	},
	actionRow{ // S593
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(129), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(147), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(154), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(156), // kwdIf
			nil,        // kwdElse
			shift(157), // kwdFor
			shift(159), // identifier
			shift(168), // kwdNull
			shift(169), // boolLit
			shift(170), // intLit
			shift(171), // floatLit
			shift(172), // stringLit
			shift(173), // kwdFn
		},
	},
	actionRow{ // S594
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(635),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1051), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S595
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(98), // lOr, reduce: ArrayLiteral
			reduce(98), // lAnd, reduce: ArrayLiteral
			reduce(98), // lNot, reduce: ArrayLiteral
			reduce(98), // equals, reduce: ArrayLiteral
			reduce(98), // lessOrGreater, reduce: ArrayLiteral
			reduce(98), // or, reduce: ArrayLiteral
			reduce(98), // xor, reduce: ArrayLiteral
			reduce(98), // and, reduce: ArrayLiteral
			reduce(98), // shift, reduce: ArrayLiteral
			reduce(98), // +, reduce: ArrayLiteral
			reduce(98), // -, reduce: ArrayLiteral
			reduce(98), // product, reduce: ArrayLiteral
			reduce(98), // (, reduce: ArrayLiteral
			reduce(98), // ), reduce: ArrayLiteral
			nil,        // !
			nil,        // ~
			reduce(98), // [, reduce: ArrayLiteral
			nil,        // ]
			reduce(98), // ., reduce: ArrayLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S596
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(129), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(147), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(154), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(156), // kwdIf
			nil,        // kwdElse
			shift(157), // kwdFor
			shift(159), // identifier
			shift(168), // kwdNull
			shift(169), // boolLit
			shift(170), // intLit
			shift(171), // floatLit
			shift(172), // stringLit
			shift(173), // kwdFn
		},
	},
	actionRow{ // S597
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1054), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S598
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1055), // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(736),  // kwdIf
			nil,         // kwdElse
			shift(737),  // kwdFor
			shift(739),  // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S599
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(68), // ), reduce: ForExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S600
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(63),   // {
			shift(1058), // }
			shift(65),   // kwdReturn
			shift(754),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(85),   // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(92),   // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(94),   // kwdIf
			nil,         // kwdElse
			shift(95),   // kwdFor
			shift(97),   // identifier
			shift(106),  // kwdNull
			shift(107),  // boolLit
			shift(108),  // intLit
			shift(109),  // floatLit
			shift(110),  // stringLit
			shift(111),  // kwdFn
		},
	},
	actionRow{ // S601
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1059), // terminator
			shift(1061), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S602
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1062), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(796),  // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S603
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(521), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(539), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(546), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(548), // kwdIf
			nil,        // kwdElse
			shift(549), // kwdFor
			shift(551), // identifier
			shift(560), // kwdNull
			shift(561), // boolLit
			shift(562), // intLit
			shift(563), // floatLit
			shift(564), // stringLit
			shift(565), // kwdFn
		},
	},
	actionRow{ // S604
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(182), // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S605
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1066), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S606
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(416),  // {
			nil,         // }
			nil,         // kwdReturn
			shift(1067), // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(434),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(441),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(443),  // kwdIf
			nil,         // kwdElse
			shift(444),  // kwdFor
			shift(446),  // identifier
			shift(455),  // kwdNull
			shift(456),  // boolLit
			shift(457),  // intLit
			shift(458),  // floatLit
			shift(459),  // stringLit
			shift(460),  // kwdFn
		},
	},
	actionRow{ // S607
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			shift(1069), // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1070), // [
			nil,         // ]
			shift(1071), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S608
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(48), // (, reduce: PrefixExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(48), // [, reduce: PrefixExpression
			nil,        // ]
			reduce(48), // ., reduce: PrefixExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S609
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(54), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(54), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(54), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S610
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(55), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(55), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(55), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S611
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(56), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(56), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(56), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S612
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(57), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(57), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(57), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S613
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(185),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(204),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(211),  // [
			shift(1073), // ]
			nil,         // .
			nil,         // assign
			shift(214),  // kwdIf
			nil,         // kwdElse
			shift(215),  // kwdFor
			shift(217),  // identifier
			shift(226),  // kwdNull
			shift(227),  // boolLit
			shift(228),  // intLit
			shift(229),  // floatLit
			shift(230),  // stringLit
			shift(231),  // kwdFn
		},
	},
	actionRow{ // S614
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(79), // (, reduce: Operand
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(79), // [, reduce: Operand
			nil,        // ]
			reduce(79), // ., reduce: Operand
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S615
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(78), // (, reduce: Operand
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(78), // [, reduce: Operand
			nil,        // ]
			reduce(78), // ., reduce: Operand
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S616
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(82), // (, reduce: Identifier
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(82), // [, reduce: Identifier
			nil,        // ]
			reduce(82), // ., reduce: Identifier
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S617
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(83), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(83), // [, reduce: Literal
			nil,        // ]
			reduce(83), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S618
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(84), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(84), // [, reduce: Literal
			nil,        // ]
			reduce(84), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S619
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(85), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(85), // [, reduce: Literal
			nil,        // ]
			reduce(85), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S620
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(86), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(86), // [, reduce: Literal
			nil,        // ]
			reduce(86), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S621
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(87), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(87), // [, reduce: Literal
			nil,        // ]
			reduce(87), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S622
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(88), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(88), // [, reduce: Literal
			nil,        // ]
			reduce(88), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S623
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(89), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(89), // [, reduce: Literal
			nil,        // ]
			reduce(89), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S624
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(90), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(90), // [, reduce: Literal
			nil,        // ]
			reduce(90), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S625
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(91), // (, reduce: Null
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(91), // [, reduce: Null
			nil,        // ]
			reduce(91), // ., reduce: Null
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S626
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(92), // (, reduce: BooleanLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(92), // [, reduce: BooleanLiteral
			nil,        // ]
			reduce(92), // ., reduce: BooleanLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S627
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(93), // (, reduce: IntegerLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(93), // [, reduce: IntegerLiteral
			nil,        // ]
			reduce(93), // ., reduce: IntegerLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S628
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(94), // (, reduce: FloatLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(94), // [, reduce: FloatLiteral
			nil,        // ]
			reduce(94), // ., reduce: FloatLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S629
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(95), // (, reduce: StringLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(95), // [, reduce: StringLiteral
			nil,        // ]
			reduce(95), // ., reduce: StringLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S630
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			shift(1074), // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S631
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(63), // $, reduce: AssignExpression
			reduce(63), // terminator, reduce: AssignExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S632
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(64), // $, reduce: AssignExpression
			reduce(64), // terminator, reduce: AssignExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S633
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			shift(1075), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S634
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			shift(1076), // }
			nil,         // kwdReturn
			shift(381),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S635
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(185), // {
			nil,        // }
			nil,        // kwdReturn
			reduce(15), // ,, reduce: ExpressionList
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(204), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(211), // [
			reduce(15), // ], reduce: ExpressionList
			nil,        // .
			nil,        // assign
			shift(214), // kwdIf
			nil,        // kwdElse
			shift(215), // kwdFor
			shift(217), // identifier
			shift(226), // kwdNull
			shift(227), // boolLit
			shift(228), // intLit
			shift(229), // floatLit
			shift(230), // stringLit
			shift(231), // kwdFn
		},
	},
	actionRow{ // S636
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(99), // $, reduce: ArrayLiteral
			reduce(99), // terminator, reduce: ArrayLiteral
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(99), // lOr, reduce: ArrayLiteral
			reduce(99), // lAnd, reduce: ArrayLiteral
			reduce(99), // lNot, reduce: ArrayLiteral
			reduce(99), // equals, reduce: ArrayLiteral
			reduce(99), // lessOrGreater, reduce: ArrayLiteral
			reduce(99), // or, reduce: ArrayLiteral
			reduce(99), // xor, reduce: ArrayLiteral
			reduce(99), // and, reduce: ArrayLiteral
			reduce(99), // shift, reduce: ArrayLiteral
			reduce(99), // +, reduce: ArrayLiteral
			reduce(99), // -, reduce: ArrayLiteral
			reduce(99), // product, reduce: ArrayLiteral
			reduce(99), // (, reduce: ArrayLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(99), // [, reduce: ArrayLiteral
			nil,        // ]
			reduce(99), // ., reduce: ArrayLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S637
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(185), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(204), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(211), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(658), // identifier
			shift(226), // kwdNull
			shift(227), // boolLit
			shift(228), // intLit
			shift(229), // floatLit
			shift(230), // stringLit
			shift(231), // kwdFn
		},
	},
	actionRow{ // S638
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(185), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(204), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(211), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(658), // identifier
			shift(226), // kwdNull
			shift(227), // boolLit
			shift(228), // intLit
			shift(229), // floatLit
			shift(230), // stringLit
			shift(231), // kwdFn
		},
	},
	actionRow{ // S639
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(185), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(204), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(211), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(658), // identifier
			shift(226), // kwdNull
			shift(227), // boolLit
			shift(228), // intLit
			shift(229), // floatLit
			shift(230), // stringLit
			shift(231), // kwdFn
		},
	},
	actionRow{ // S640
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(185), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(204), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(211), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(658), // identifier
			shift(226), // kwdNull
			shift(227), // boolLit
			shift(228), // intLit
			shift(229), // floatLit
			shift(230), // stringLit
			shift(231), // kwdFn
		},
	},
	actionRow{ // S641
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(185), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(204), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(211), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(658), // identifier
			shift(226), // kwdNull
			shift(227), // boolLit
			shift(228), // intLit
			shift(229), // floatLit
			shift(230), // stringLit
			shift(231), // kwdFn
		},
	},
	actionRow{ // S642
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(185), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(204), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(211), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(658), // identifier
			shift(226), // kwdNull
			shift(227), // boolLit
			shift(228), // intLit
			shift(229), // floatLit
			shift(230), // stringLit
			shift(231), // kwdFn
		},
	},
	actionRow{ // S643
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(185), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(204), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(211), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(658), // identifier
			shift(226), // kwdNull
			shift(227), // boolLit
			shift(228), // intLit
			shift(229), // floatLit
			shift(230), // stringLit
			shift(231), // kwdFn
		},
	},
	actionRow{ // S644
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(185), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(204), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(211), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(658), // identifier
			shift(226), // kwdNull
			shift(227), // boolLit
			shift(228), // intLit
			shift(229), // floatLit
			shift(230), // stringLit
			shift(231), // kwdFn
		},
	},
	actionRow{ // S645
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(185), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(204), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(211), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(658), // identifier
			shift(226), // kwdNull
			shift(227), // boolLit
			shift(228), // intLit
			shift(229), // floatLit
			shift(230), // stringLit
			shift(231), // kwdFn
		},
	},
	actionRow{ // S646
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(185), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(204), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(211), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(658), // identifier
			shift(226), // kwdNull
			shift(227), // boolLit
			shift(228), // intLit
			shift(229), // floatLit
			shift(230), // stringLit
			shift(231), // kwdFn
		},
	},
	actionRow{ // S647
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(185), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(204), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(211), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(658), // identifier
			shift(226), // kwdNull
			shift(227), // boolLit
			shift(228), // intLit
			shift(229), // floatLit
			shift(230), // stringLit
			shift(231), // kwdFn
		},
	},
	actionRow{ // S648
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(185), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(204), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(211), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(658), // identifier
			shift(226), // kwdNull
			shift(227), // boolLit
			shift(228), // intLit
			shift(229), // floatLit
			shift(230), // stringLit
			shift(231), // kwdFn
		},
	},
	actionRow{ // S649
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(474),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(493),  // (
			shift(1092), // )
			shift(31),   // !
			shift(32),   // ~
			shift(501),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(503),  // kwdIf
			nil,         // kwdElse
			shift(504),  // kwdFor
			shift(506),  // identifier
			shift(515),  // kwdNull
			shift(516),  // boolLit
			shift(517),  // intLit
			shift(518),  // floatLit
			shift(519),  // stringLit
			shift(520),  // kwdFn
		},
	},
	actionRow{ // S650
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(521), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(539), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(546), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(548), // kwdIf
			nil,        // kwdElse
			shift(549), // kwdFor
			shift(551), // identifier
			shift(560), // kwdNull
			shift(561), // boolLit
			shift(562), // intLit
			shift(563), // floatLit
			shift(564), // stringLit
			shift(565), // kwdFn
		},
	},
	actionRow{ // S651
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(217), // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S652
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1095), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S653
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			shift(649),  // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1096), // [
			nil,         // ]
			shift(1097), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S654
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(49), // ,, reduce: PrefixExpression
			nil,        // :
			reduce(49), // lOr, reduce: PrefixExpression
			reduce(49), // lAnd, reduce: PrefixExpression
			reduce(49), // lNot, reduce: PrefixExpression
			reduce(49), // equals, reduce: PrefixExpression
			reduce(49), // lessOrGreater, reduce: PrefixExpression
			reduce(49), // or, reduce: PrefixExpression
			reduce(49), // xor, reduce: PrefixExpression
			reduce(49), // and, reduce: PrefixExpression
			reduce(49), // shift, reduce: PrefixExpression
			reduce(49), // +, reduce: PrefixExpression
			reduce(49), // -, reduce: PrefixExpression
			reduce(49), // product, reduce: PrefixExpression
			reduce(48), // (, reduce: PrefixExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(48), // [, reduce: PrefixExpression
			reduce(49), // ], reduce: PrefixExpression
			reduce(48), // ., reduce: PrefixExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S655
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(55), // ,, reduce: PrimaryExpr
			nil,        // :
			reduce(55), // lOr, reduce: PrimaryExpr
			reduce(55), // lAnd, reduce: PrimaryExpr
			reduce(55), // lNot, reduce: PrimaryExpr
			reduce(55), // equals, reduce: PrimaryExpr
			reduce(55), // lessOrGreater, reduce: PrimaryExpr
			reduce(55), // or, reduce: PrimaryExpr
			reduce(55), // xor, reduce: PrimaryExpr
			reduce(55), // and, reduce: PrimaryExpr
			reduce(55), // shift, reduce: PrimaryExpr
			reduce(55), // +, reduce: PrimaryExpr
			reduce(55), // -, reduce: PrimaryExpr
			reduce(55), // product, reduce: PrimaryExpr
			reduce(55), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(55), // [, reduce: PrimaryExpr
			reduce(55), // ], reduce: PrimaryExpr
			reduce(55), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S656
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(57), // ,, reduce: PrimaryExpr
			nil,        // :
			reduce(57), // lOr, reduce: PrimaryExpr
			reduce(57), // lAnd, reduce: PrimaryExpr
			reduce(57), // lNot, reduce: PrimaryExpr
			reduce(57), // equals, reduce: PrimaryExpr
			reduce(57), // lessOrGreater, reduce: PrimaryExpr
			reduce(57), // or, reduce: PrimaryExpr
			reduce(57), // xor, reduce: PrimaryExpr
			reduce(57), // and, reduce: PrimaryExpr
			reduce(57), // shift, reduce: PrimaryExpr
			reduce(57), // +, reduce: PrimaryExpr
			reduce(57), // -, reduce: PrimaryExpr
			reduce(57), // product, reduce: PrimaryExpr
			reduce(57), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(57), // [, reduce: PrimaryExpr
			reduce(57), // ], reduce: PrimaryExpr
			reduce(57), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S657
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(79), // ,, reduce: Operand
			nil,        // :
			reduce(79), // lOr, reduce: Operand
			reduce(79), // lAnd, reduce: Operand
			reduce(79), // lNot, reduce: Operand
			reduce(79), // equals, reduce: Operand
			reduce(79), // lessOrGreater, reduce: Operand
			reduce(79), // or, reduce: Operand
			reduce(79), // xor, reduce: Operand
			reduce(79), // and, reduce: Operand
			reduce(79), // shift, reduce: Operand
			reduce(79), // +, reduce: Operand
			reduce(79), // -, reduce: Operand
			reduce(79), // product, reduce: Operand
			reduce(79), // (, reduce: Operand
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(79), // [, reduce: Operand
			reduce(79), // ], reduce: Operand
			reduce(79), // ., reduce: Operand
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S658
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(82), // ,, reduce: Identifier
			nil,        // :
			reduce(82), // lOr, reduce: Identifier
			reduce(82), // lAnd, reduce: Identifier
			reduce(82), // lNot, reduce: Identifier
			reduce(82), // equals, reduce: Identifier
			reduce(82), // lessOrGreater, reduce: Identifier
			reduce(82), // or, reduce: Identifier
			reduce(82), // xor, reduce: Identifier
			reduce(82), // and, reduce: Identifier
			reduce(82), // shift, reduce: Identifier
			reduce(82), // +, reduce: Identifier
			reduce(82), // -, reduce: Identifier
			reduce(82), // product, reduce: Identifier
			reduce(82), // (, reduce: Identifier
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(82), // [, reduce: Identifier
			reduce(82), // ], reduce: Identifier
			reduce(82), // ., reduce: Identifier
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S659
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(185), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(204), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(211), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(214), // kwdIf
			nil,        // kwdElse
			shift(215), // kwdFor
			shift(217), // identifier
			shift(226), // kwdNull
			shift(227), // boolLit
			shift(228), // intLit
			shift(229), // floatLit
			shift(230), // stringLit
			shift(231), // kwdFn
		},
	},
	actionRow{ // S660
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(185), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(204), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(211), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(214), // kwdIf
			nil,        // kwdElse
			shift(215), // kwdFor
			shift(217), // identifier
			shift(226), // kwdNull
			shift(227), // boolLit
			shift(228), // intLit
			shift(229), // floatLit
			shift(230), // stringLit
			shift(231), // kwdFn
		},
	},
	actionRow{ // S661
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(635),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1100), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S662
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(98), // ,, reduce: ArrayLiteral
			nil,        // :
			reduce(98), // lOr, reduce: ArrayLiteral
			reduce(98), // lAnd, reduce: ArrayLiteral
			reduce(98), // lNot, reduce: ArrayLiteral
			reduce(98), // equals, reduce: ArrayLiteral
			reduce(98), // lessOrGreater, reduce: ArrayLiteral
			reduce(98), // or, reduce: ArrayLiteral
			reduce(98), // xor, reduce: ArrayLiteral
			reduce(98), // and, reduce: ArrayLiteral
			reduce(98), // shift, reduce: ArrayLiteral
			reduce(98), // +, reduce: ArrayLiteral
			reduce(98), // -, reduce: ArrayLiteral
			reduce(98), // product, reduce: ArrayLiteral
			reduce(98), // (, reduce: ArrayLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(98), // [, reduce: ArrayLiteral
			reduce(98), // ], reduce: ArrayLiteral
			reduce(98), // ., reduce: ArrayLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S663
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(185), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(204), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(211), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(214), // kwdIf
			nil,        // kwdElse
			shift(215), // kwdFor
			shift(217), // identifier
			shift(226), // kwdNull
			shift(227), // boolLit
			shift(228), // intLit
			shift(229), // floatLit
			shift(230), // stringLit
			shift(231), // kwdFn
		},
	},
	actionRow{ // S664
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1103), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S665
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1104), // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(736),  // kwdIf
			nil,         // kwdElse
			shift(737),  // kwdFor
			shift(739),  // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S666
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(68), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(68), // ], reduce: ForExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S667
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(63),   // {
			shift(1107), // }
			shift(65),   // kwdReturn
			shift(754),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(85),   // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(92),   // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(94),   // kwdIf
			nil,         // kwdElse
			shift(95),   // kwdFor
			shift(97),   // identifier
			shift(106),  // kwdNull
			shift(107),  // boolLit
			shift(108),  // intLit
			shift(109),  // floatLit
			shift(110),  // stringLit
			shift(111),  // kwdFn
		},
	},
	actionRow{ // S668
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1108), // terminator
			shift(1110), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S669
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1111), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(796),  // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S670
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(62), // $, reduce: AssignExpression
			reduce(62), // terminator, reduce: AssignExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S671
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			shift(1113), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S672
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			shift(1114), // }
			nil,         // kwdReturn
			shift(381),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S673
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			reduce(65),  // $, reduce: IfExpression
			reduce(65),  // terminator, reduce: IfExpression
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			shift(1115), // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S674
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1117), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S675
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(233), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(251), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(258), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(696), // identifier
			shift(272), // kwdNull
			shift(273), // boolLit
			shift(274), // intLit
			shift(275), // floatLit
			shift(276), // stringLit
			shift(277), // kwdFn
		},
	},
	actionRow{ // S676
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(233), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(251), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(258), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(696), // identifier
			shift(272), // kwdNull
			shift(273), // boolLit
			shift(274), // intLit
			shift(275), // floatLit
			shift(276), // stringLit
			shift(277), // kwdFn
		},
	},
	actionRow{ // S677
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(233), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(251), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(258), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(696), // identifier
			shift(272), // kwdNull
			shift(273), // boolLit
			shift(274), // intLit
			shift(275), // floatLit
			shift(276), // stringLit
			shift(277), // kwdFn
		},
	},
	actionRow{ // S678
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(233), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(251), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(258), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(696), // identifier
			shift(272), // kwdNull
			shift(273), // boolLit
			shift(274), // intLit
			shift(275), // floatLit
			shift(276), // stringLit
			shift(277), // kwdFn
		},
	},
	actionRow{ // S679
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(233), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(251), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(258), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(696), // identifier
			shift(272), // kwdNull
			shift(273), // boolLit
			shift(274), // intLit
			shift(275), // floatLit
			shift(276), // stringLit
			shift(277), // kwdFn
		},
	},
	actionRow{ // S680
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(233), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(251), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(258), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(696), // identifier
			shift(272), // kwdNull
			shift(273), // boolLit
			shift(274), // intLit
			shift(275), // floatLit
			shift(276), // stringLit
			shift(277), // kwdFn
		},
	},
	actionRow{ // S681
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(233), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(251), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(258), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(696), // identifier
			shift(272), // kwdNull
			shift(273), // boolLit
			shift(274), // intLit
			shift(275), // floatLit
			shift(276), // stringLit
			shift(277), // kwdFn
		},
	},
	actionRow{ // S682
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(233), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(251), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(258), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(696), // identifier
			shift(272), // kwdNull
			shift(273), // boolLit
			shift(274), // intLit
			shift(275), // floatLit
			shift(276), // stringLit
			shift(277), // kwdFn
		},
	},
	actionRow{ // S683
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(233), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(251), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(258), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(696), // identifier
			shift(272), // kwdNull
			shift(273), // boolLit
			shift(274), // intLit
			shift(275), // floatLit
			shift(276), // stringLit
			shift(277), // kwdFn
		},
	},
	actionRow{ // S684
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(233), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(251), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(258), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(696), // identifier
			shift(272), // kwdNull
			shift(273), // boolLit
			shift(274), // intLit
			shift(275), // floatLit
			shift(276), // stringLit
			shift(277), // kwdFn
		},
	},
	actionRow{ // S685
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(233), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(251), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(258), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(696), // identifier
			shift(272), // kwdNull
			shift(273), // boolLit
			shift(274), // intLit
			shift(275), // floatLit
			shift(276), // stringLit
			shift(277), // kwdFn
		},
	},
	actionRow{ // S686
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(233), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(251), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(258), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(696), // identifier
			shift(272), // kwdNull
			shift(273), // boolLit
			shift(274), // intLit
			shift(275), // floatLit
			shift(276), // stringLit
			shift(277), // kwdFn
		},
	},
	actionRow{ // S687
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(474),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(493),  // (
			shift(1132), // )
			shift(31),   // !
			shift(32),   // ~
			shift(501),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(503),  // kwdIf
			nil,         // kwdElse
			shift(504),  // kwdFor
			shift(506),  // identifier
			shift(515),  // kwdNull
			shift(516),  // boolLit
			shift(517),  // intLit
			shift(518),  // floatLit
			shift(519),  // stringLit
			shift(520),  // kwdFn
		},
	},
	actionRow{ // S688
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(521), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(539), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(546), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(548), // kwdIf
			nil,        // kwdElse
			shift(549), // kwdFor
			shift(551), // identifier
			shift(560), // kwdNull
			shift(561), // boolLit
			shift(562), // intLit
			shift(563), // floatLit
			shift(564), // stringLit
			shift(565), // kwdFn
		},
	},
	actionRow{ // S689
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(263), // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S690
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1135), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S691
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			shift(687),  // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1136), // [
			nil,         // ]
			shift(1137), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S692
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(49), // {, reduce: PrefixExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(49), // lOr, reduce: PrefixExpression
			reduce(49), // lAnd, reduce: PrefixExpression
			reduce(49), // lNot, reduce: PrefixExpression
			reduce(49), // equals, reduce: PrefixExpression
			reduce(49), // lessOrGreater, reduce: PrefixExpression
			reduce(49), // or, reduce: PrefixExpression
			reduce(49), // xor, reduce: PrefixExpression
			reduce(49), // and, reduce: PrefixExpression
			reduce(49), // shift, reduce: PrefixExpression
			reduce(49), // +, reduce: PrefixExpression
			reduce(49), // -, reduce: PrefixExpression
			reduce(49), // product, reduce: PrefixExpression
			reduce(48), // (, reduce: PrefixExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(48), // [, reduce: PrefixExpression
			nil,        // ]
			reduce(48), // ., reduce: PrefixExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S693
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(55), // {, reduce: PrimaryExpr
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(55), // lOr, reduce: PrimaryExpr
			reduce(55), // lAnd, reduce: PrimaryExpr
			reduce(55), // lNot, reduce: PrimaryExpr
			reduce(55), // equals, reduce: PrimaryExpr
			reduce(55), // lessOrGreater, reduce: PrimaryExpr
			reduce(55), // or, reduce: PrimaryExpr
			reduce(55), // xor, reduce: PrimaryExpr
			reduce(55), // and, reduce: PrimaryExpr
			reduce(55), // shift, reduce: PrimaryExpr
			reduce(55), // +, reduce: PrimaryExpr
			reduce(55), // -, reduce: PrimaryExpr
			reduce(55), // product, reduce: PrimaryExpr
			reduce(55), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(55), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(55), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S694
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(57), // {, reduce: PrimaryExpr
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(57), // lOr, reduce: PrimaryExpr
			reduce(57), // lAnd, reduce: PrimaryExpr
			reduce(57), // lNot, reduce: PrimaryExpr
			reduce(57), // equals, reduce: PrimaryExpr
			reduce(57), // lessOrGreater, reduce: PrimaryExpr
			reduce(57), // or, reduce: PrimaryExpr
			reduce(57), // xor, reduce: PrimaryExpr
			reduce(57), // and, reduce: PrimaryExpr
			reduce(57), // shift, reduce: PrimaryExpr
			reduce(57), // +, reduce: PrimaryExpr
			reduce(57), // -, reduce: PrimaryExpr
			reduce(57), // product, reduce: PrimaryExpr
			reduce(57), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(57), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(57), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S695
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(79), // {, reduce: Operand
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(79), // lOr, reduce: Operand
			reduce(79), // lAnd, reduce: Operand
			reduce(79), // lNot, reduce: Operand
			reduce(79), // equals, reduce: Operand
			reduce(79), // lessOrGreater, reduce: Operand
			reduce(79), // or, reduce: Operand
			reduce(79), // xor, reduce: Operand
			reduce(79), // and, reduce: Operand
			reduce(79), // shift, reduce: Operand
			reduce(79), // +, reduce: Operand
			reduce(79), // -, reduce: Operand
			reduce(79), // product, reduce: Operand
			reduce(79), // (, reduce: Operand
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(79), // [, reduce: Operand
			nil,        // ]
			reduce(79), // ., reduce: Operand
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S696
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(82), // {, reduce: Identifier
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(82), // lOr, reduce: Identifier
			reduce(82), // lAnd, reduce: Identifier
			reduce(82), // lNot, reduce: Identifier
			reduce(82), // equals, reduce: Identifier
			reduce(82), // lessOrGreater, reduce: Identifier
			reduce(82), // or, reduce: Identifier
			reduce(82), // xor, reduce: Identifier
			reduce(82), // and, reduce: Identifier
			reduce(82), // shift, reduce: Identifier
			reduce(82), // +, reduce: Identifier
			reduce(82), // -, reduce: Identifier
			reduce(82), // product, reduce: Identifier
			reduce(82), // (, reduce: Identifier
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(82), // [, reduce: Identifier
			nil,        // ]
			reduce(82), // ., reduce: Identifier
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S697
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(233), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(251), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(258), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(260), // kwdIf
			nil,        // kwdElse
			shift(261), // kwdFor
			shift(263), // identifier
			shift(272), // kwdNull
			shift(273), // boolLit
			shift(274), // intLit
			shift(275), // floatLit
			shift(276), // stringLit
			shift(277), // kwdFn
		},
	},
	actionRow{ // S698
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(233), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(251), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(258), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(260), // kwdIf
			nil,        // kwdElse
			shift(261), // kwdFor
			shift(263), // identifier
			shift(272), // kwdNull
			shift(273), // boolLit
			shift(274), // intLit
			shift(275), // floatLit
			shift(276), // stringLit
			shift(277), // kwdFn
		},
	},
	actionRow{ // S699
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(635),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1140), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S700
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(98), // {, reduce: ArrayLiteral
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(98), // lOr, reduce: ArrayLiteral
			reduce(98), // lAnd, reduce: ArrayLiteral
			reduce(98), // lNot, reduce: ArrayLiteral
			reduce(98), // equals, reduce: ArrayLiteral
			reduce(98), // lessOrGreater, reduce: ArrayLiteral
			reduce(98), // or, reduce: ArrayLiteral
			reduce(98), // xor, reduce: ArrayLiteral
			reduce(98), // and, reduce: ArrayLiteral
			reduce(98), // shift, reduce: ArrayLiteral
			reduce(98), // +, reduce: ArrayLiteral
			reduce(98), // -, reduce: ArrayLiteral
			reduce(98), // product, reduce: ArrayLiteral
			reduce(98), // (, reduce: ArrayLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(98), // [, reduce: ArrayLiteral
			nil,        // ]
			reduce(98), // ., reduce: ArrayLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S701
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(233), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(251), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(258), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(260), // kwdIf
			nil,        // kwdElse
			shift(261), // kwdFor
			shift(263), // identifier
			shift(272), // kwdNull
			shift(273), // boolLit
			shift(274), // intLit
			shift(275), // floatLit
			shift(276), // stringLit
			shift(277), // kwdFn
		},
	},
	actionRow{ // S702
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1143), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S703
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1144), // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(736),  // kwdIf
			nil,         // kwdElse
			shift(737),  // kwdFor
			shift(739),  // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S704
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(68), // {, reduce: ForExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S705
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(63),   // {
			shift(1147), // }
			shift(65),   // kwdReturn
			shift(754),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(85),   // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(92),   // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(94),   // kwdIf
			nil,         // kwdElse
			shift(95),   // kwdFor
			shift(97),   // identifier
			shift(106),  // kwdNull
			shift(107),  // boolLit
			shift(108),  // intLit
			shift(109),  // floatLit
			shift(110),  // stringLit
			shift(111),  // kwdFn
		},
	},
	actionRow{ // S706
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1148), // terminator
			shift(1150), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S707
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1151), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(796),  // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S708
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1154), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S709
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(416),  // {
			nil,         // }
			nil,         // kwdReturn
			shift(1156), // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(434),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(441),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(443),  // kwdIf
			nil,         // kwdElse
			shift(444),  // kwdFor
			shift(446),  // identifier
			shift(455),  // kwdNull
			shift(456),  // boolLit
			shift(457),  // intLit
			shift(458),  // floatLit
			shift(459),  // stringLit
			shift(460),  // kwdFn
		},
	},
	actionRow{ // S710
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1158), // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S711
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(19),  // terminator, reduce: Expression
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			shift(1159), // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S712
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(20), // terminator, reduce: Expression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S713
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(21), // terminator, reduce: Expression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S714
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(22), // terminator, reduce: Expression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S715
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(24),  // terminator, reduce: Term1
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(24),  // lOr, reduce: Term1
			shift(1160), // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S716
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(26),  // terminator, reduce: Term2
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(26),  // lOr, reduce: Term2
			reduce(26),  // lAnd, reduce: Term2
			shift(1161), // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S717
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(28),  // terminator, reduce: Term3
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(28),  // lOr, reduce: Term3
			reduce(28),  // lAnd, reduce: Term3
			reduce(28),  // lNot, reduce: Term3
			shift(1162), // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S718
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(30),  // terminator, reduce: Term4
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(30),  // lOr, reduce: Term4
			reduce(30),  // lAnd, reduce: Term4
			reduce(30),  // lNot, reduce: Term4
			reduce(30),  // equals, reduce: Term4
			shift(1163), // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S719
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(32),  // terminator, reduce: Term5
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(32),  // lOr, reduce: Term5
			reduce(32),  // lAnd, reduce: Term5
			reduce(32),  // lNot, reduce: Term5
			reduce(32),  // equals, reduce: Term5
			reduce(32),  // lessOrGreater, reduce: Term5
			shift(1164), // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S720
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(34),  // terminator, reduce: Term6
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(34),  // lOr, reduce: Term6
			reduce(34),  // lAnd, reduce: Term6
			reduce(34),  // lNot, reduce: Term6
			reduce(34),  // equals, reduce: Term6
			reduce(34),  // lessOrGreater, reduce: Term6
			reduce(34),  // or, reduce: Term6
			shift(1165), // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S721
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(36),  // terminator, reduce: Term7
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(36),  // lOr, reduce: Term7
			reduce(36),  // lAnd, reduce: Term7
			reduce(36),  // lNot, reduce: Term7
			reduce(36),  // equals, reduce: Term7
			reduce(36),  // lessOrGreater, reduce: Term7
			reduce(36),  // or, reduce: Term7
			reduce(36),  // xor, reduce: Term7
			shift(1166), // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S722
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(38),  // terminator, reduce: Term8
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(38),  // lOr, reduce: Term8
			reduce(38),  // lAnd, reduce: Term8
			reduce(38),  // lNot, reduce: Term8
			reduce(38),  // equals, reduce: Term8
			reduce(38),  // lessOrGreater, reduce: Term8
			reduce(38),  // or, reduce: Term8
			reduce(38),  // xor, reduce: Term8
			reduce(38),  // and, reduce: Term8
			shift(1167), // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S723
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(40),  // terminator, reduce: Term9
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(40),  // lOr, reduce: Term9
			reduce(40),  // lAnd, reduce: Term9
			reduce(40),  // lNot, reduce: Term9
			reduce(40),  // equals, reduce: Term9
			reduce(40),  // lessOrGreater, reduce: Term9
			reduce(40),  // or, reduce: Term9
			reduce(40),  // xor, reduce: Term9
			reduce(40),  // and, reduce: Term9
			reduce(40),  // shift, reduce: Term9
			shift(1168), // +
			shift(1169), // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S724
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(43),  // terminator, reduce: Term10
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(43),  // lOr, reduce: Term10
			reduce(43),  // lAnd, reduce: Term10
			reduce(43),  // lNot, reduce: Term10
			reduce(43),  // equals, reduce: Term10
			reduce(43),  // lessOrGreater, reduce: Term10
			reduce(43),  // or, reduce: Term10
			reduce(43),  // xor, reduce: Term10
			reduce(43),  // and, reduce: Term10
			reduce(43),  // shift, reduce: Term10
			reduce(43),  // +, reduce: Term10
			reduce(43),  // -, reduce: Term10
			shift(1170), // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S725
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(45),  // terminator, reduce: Term11
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(45),  // lOr, reduce: Term11
			reduce(45),  // lAnd, reduce: Term11
			reduce(45),  // lNot, reduce: Term11
			reduce(45),  // equals, reduce: Term11
			reduce(45),  // lessOrGreater, reduce: Term11
			reduce(45),  // or, reduce: Term11
			reduce(45),  // xor, reduce: Term11
			reduce(45),  // and, reduce: Term11
			reduce(45),  // shift, reduce: Term11
			reduce(45),  // +, reduce: Term11
			reduce(45),  // -, reduce: Term11
			reduce(45),  // product, reduce: Term11
			shift(1171), // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1172), // [
			nil,         // ]
			shift(1173), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S726
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(46), // terminator, reduce: Term12
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(46), // lOr, reduce: Term12
			reduce(46), // lAnd, reduce: Term12
			reduce(46), // lNot, reduce: Term12
			reduce(46), // equals, reduce: Term12
			reduce(46), // lessOrGreater, reduce: Term12
			reduce(46), // or, reduce: Term12
			reduce(46), // xor, reduce: Term12
			reduce(46), // and, reduce: Term12
			reduce(46), // shift, reduce: Term12
			reduce(46), // +, reduce: Term12
			reduce(46), // -, reduce: Term12
			reduce(46), // product, reduce: Term12
			reduce(46), // (, reduce: Term12
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(46), // [, reduce: Term12
			nil,        // ]
			reduce(46), // ., reduce: Term12
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S727
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(129), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(147), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(154), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(156), // kwdIf
			nil,        // kwdElse
			shift(157), // kwdFor
			shift(159), // identifier
			shift(168), // kwdNull
			shift(169), // boolLit
			shift(170), // intLit
			shift(171), // floatLit
			shift(172), // stringLit
			shift(173), // kwdFn
		},
	},
	actionRow{ // S728
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(48), // terminator, reduce: PrefixExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(48), // lOr, reduce: PrefixExpression
			reduce(48), // lAnd, reduce: PrefixExpression
			reduce(48), // lNot, reduce: PrefixExpression
			reduce(48), // equals, reduce: PrefixExpression
			reduce(48), // lessOrGreater, reduce: PrefixExpression
			reduce(48), // or, reduce: PrefixExpression
			reduce(48), // xor, reduce: PrefixExpression
			reduce(48), // and, reduce: PrefixExpression
			reduce(48), // shift, reduce: PrefixExpression
			reduce(48), // +, reduce: PrefixExpression
			reduce(48), // -, reduce: PrefixExpression
			reduce(48), // product, reduce: PrefixExpression
			reduce(48), // (, reduce: PrefixExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(48), // [, reduce: PrefixExpression
			nil,        // ]
			reduce(48), // ., reduce: PrefixExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S729
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(176),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1180), // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S730
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(54), // terminator, reduce: PrimaryExpr
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(54), // lOr, reduce: PrimaryExpr
			reduce(54), // lAnd, reduce: PrimaryExpr
			reduce(54), // lNot, reduce: PrimaryExpr
			reduce(54), // equals, reduce: PrimaryExpr
			reduce(54), // lessOrGreater, reduce: PrimaryExpr
			reduce(54), // or, reduce: PrimaryExpr
			reduce(54), // xor, reduce: PrimaryExpr
			reduce(54), // and, reduce: PrimaryExpr
			reduce(54), // shift, reduce: PrimaryExpr
			reduce(54), // +, reduce: PrimaryExpr
			reduce(54), // -, reduce: PrimaryExpr
			reduce(54), // product, reduce: PrimaryExpr
			reduce(54), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(54), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(54), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S731
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(55),  // terminator, reduce: PrimaryExpr
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(55),  // lOr, reduce: PrimaryExpr
			reduce(55),  // lAnd, reduce: PrimaryExpr
			reduce(55),  // lNot, reduce: PrimaryExpr
			reduce(55),  // equals, reduce: PrimaryExpr
			reduce(55),  // lessOrGreater, reduce: PrimaryExpr
			reduce(55),  // or, reduce: PrimaryExpr
			reduce(55),  // xor, reduce: PrimaryExpr
			reduce(55),  // and, reduce: PrimaryExpr
			reduce(55),  // shift, reduce: PrimaryExpr
			reduce(55),  // +, reduce: PrimaryExpr
			reduce(55),  // -, reduce: PrimaryExpr
			reduce(55),  // product, reduce: PrimaryExpr
			reduce(55),  // (, reduce: PrimaryExpr
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(55),  // [, reduce: PrimaryExpr
			nil,         // ]
			reduce(55),  // ., reduce: PrimaryExpr
			shift(1181), // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S732
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(56), // terminator, reduce: PrimaryExpr
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(56), // lOr, reduce: PrimaryExpr
			reduce(56), // lAnd, reduce: PrimaryExpr
			reduce(56), // lNot, reduce: PrimaryExpr
			reduce(56), // equals, reduce: PrimaryExpr
			reduce(56), // lessOrGreater, reduce: PrimaryExpr
			reduce(56), // or, reduce: PrimaryExpr
			reduce(56), // xor, reduce: PrimaryExpr
			reduce(56), // and, reduce: PrimaryExpr
			reduce(56), // shift, reduce: PrimaryExpr
			reduce(56), // +, reduce: PrimaryExpr
			reduce(56), // -, reduce: PrimaryExpr
			reduce(56), // product, reduce: PrimaryExpr
			reduce(56), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(56), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(56), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S733
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(57),  // terminator, reduce: PrimaryExpr
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(57),  // lOr, reduce: PrimaryExpr
			reduce(57),  // lAnd, reduce: PrimaryExpr
			reduce(57),  // lNot, reduce: PrimaryExpr
			reduce(57),  // equals, reduce: PrimaryExpr
			reduce(57),  // lessOrGreater, reduce: PrimaryExpr
			reduce(57),  // or, reduce: PrimaryExpr
			reduce(57),  // xor, reduce: PrimaryExpr
			reduce(57),  // and, reduce: PrimaryExpr
			reduce(57),  // shift, reduce: PrimaryExpr
			reduce(57),  // +, reduce: PrimaryExpr
			reduce(57),  // -, reduce: PrimaryExpr
			reduce(57),  // product, reduce: PrimaryExpr
			reduce(57),  // (, reduce: PrimaryExpr
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(57),  // [, reduce: PrimaryExpr
			nil,         // ]
			reduce(57),  // ., reduce: PrimaryExpr
			shift(1182), // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S734
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(185),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(204),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(211),  // [
			shift(1184), // ]
			nil,         // .
			nil,         // assign
			shift(214),  // kwdIf
			nil,         // kwdElse
			shift(215),  // kwdFor
			shift(217),  // identifier
			shift(226),  // kwdNull
			shift(227),  // boolLit
			shift(228),  // intLit
			shift(229),  // floatLit
			shift(230),  // stringLit
			shift(231),  // kwdFn
		},
	},
	actionRow{ // S735
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(79),  // terminator, reduce: Operand
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(79),  // lOr, reduce: Operand
			reduce(79),  // lAnd, reduce: Operand
			reduce(79),  // lNot, reduce: Operand
			reduce(79),  // equals, reduce: Operand
			reduce(79),  // lessOrGreater, reduce: Operand
			reduce(79),  // or, reduce: Operand
			reduce(79),  // xor, reduce: Operand
			reduce(79),  // and, reduce: Operand
			reduce(79),  // shift, reduce: Operand
			reduce(79),  // +, reduce: Operand
			reduce(79),  // -, reduce: Operand
			reduce(79),  // product, reduce: Operand
			reduce(79),  // (, reduce: Operand
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(79),  // [, reduce: Operand
			nil,         // ]
			reduce(79),  // ., reduce: Operand
			shift(1185), // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S736
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(233), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(251), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(258), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(260), // kwdIf
			nil,        // kwdElse
			shift(261), // kwdFor
			shift(263), // identifier
			shift(272), // kwdNull
			shift(273), // boolLit
			shift(274), // intLit
			shift(275), // floatLit
			shift(276), // stringLit
			shift(277), // kwdFn
		},
	},
	actionRow{ // S737
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1187), // terminator
			shift(1189), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(298),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(305),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(307),  // kwdIf
			nil,         // kwdElse
			shift(308),  // kwdFor
			shift(310),  // identifier
			shift(319),  // kwdNull
			shift(320),  // boolLit
			shift(321),  // intLit
			shift(322),  // floatLit
			shift(323),  // stringLit
			shift(324),  // kwdFn
		},
	},
	actionRow{ // S738
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(78), // terminator, reduce: Operand
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(78), // lOr, reduce: Operand
			reduce(78), // lAnd, reduce: Operand
			reduce(78), // lNot, reduce: Operand
			reduce(78), // equals, reduce: Operand
			reduce(78), // lessOrGreater, reduce: Operand
			reduce(78), // or, reduce: Operand
			reduce(78), // xor, reduce: Operand
			reduce(78), // and, reduce: Operand
			reduce(78), // shift, reduce: Operand
			reduce(78), // +, reduce: Operand
			reduce(78), // -, reduce: Operand
			reduce(78), // product, reduce: Operand
			reduce(78), // (, reduce: Operand
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(78), // [, reduce: Operand
			nil,        // ]
			reduce(78), // ., reduce: Operand
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S739
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(82), // terminator, reduce: Identifier
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(82), // lOr, reduce: Identifier
			reduce(82), // lAnd, reduce: Identifier
			reduce(82), // lNot, reduce: Identifier
			reduce(82), // equals, reduce: Identifier
			reduce(82), // lessOrGreater, reduce: Identifier
			reduce(82), // or, reduce: Identifier
			reduce(82), // xor, reduce: Identifier
			reduce(82), // and, reduce: Identifier
			reduce(82), // shift, reduce: Identifier
			reduce(82), // +, reduce: Identifier
			reduce(82), // -, reduce: Identifier
			reduce(82), // product, reduce: Identifier
			reduce(82), // (, reduce: Identifier
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(82), // [, reduce: Identifier
			nil,        // ]
			reduce(82), // ., reduce: Identifier
			reduce(82), // assign, reduce: Identifier
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S740
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(83), // terminator, reduce: Literal
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(83), // lOr, reduce: Literal
			reduce(83), // lAnd, reduce: Literal
			reduce(83), // lNot, reduce: Literal
			reduce(83), // equals, reduce: Literal
			reduce(83), // lessOrGreater, reduce: Literal
			reduce(83), // or, reduce: Literal
			reduce(83), // xor, reduce: Literal
			reduce(83), // and, reduce: Literal
			reduce(83), // shift, reduce: Literal
			reduce(83), // +, reduce: Literal
			reduce(83), // -, reduce: Literal
			reduce(83), // product, reduce: Literal
			reduce(83), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(83), // [, reduce: Literal
			nil,        // ]
			reduce(83), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S741
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(84), // terminator, reduce: Literal
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(84), // lOr, reduce: Literal
			reduce(84), // lAnd, reduce: Literal
			reduce(84), // lNot, reduce: Literal
			reduce(84), // equals, reduce: Literal
			reduce(84), // lessOrGreater, reduce: Literal
			reduce(84), // or, reduce: Literal
			reduce(84), // xor, reduce: Literal
			reduce(84), // and, reduce: Literal
			reduce(84), // shift, reduce: Literal
			reduce(84), // +, reduce: Literal
			reduce(84), // -, reduce: Literal
			reduce(84), // product, reduce: Literal
			reduce(84), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(84), // [, reduce: Literal
			nil,        // ]
			reduce(84), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S742
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(85), // terminator, reduce: Literal
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(85), // lOr, reduce: Literal
			reduce(85), // lAnd, reduce: Literal
			reduce(85), // lNot, reduce: Literal
			reduce(85), // equals, reduce: Literal
			reduce(85), // lessOrGreater, reduce: Literal
			reduce(85), // or, reduce: Literal
			reduce(85), // xor, reduce: Literal
			reduce(85), // and, reduce: Literal
			reduce(85), // shift, reduce: Literal
			reduce(85), // +, reduce: Literal
			reduce(85), // -, reduce: Literal
			reduce(85), // product, reduce: Literal
			reduce(85), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(85), // [, reduce: Literal
			nil,        // ]
			reduce(85), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S743
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(86), // terminator, reduce: Literal
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(86), // lOr, reduce: Literal
			reduce(86), // lAnd, reduce: Literal
			reduce(86), // lNot, reduce: Literal
			reduce(86), // equals, reduce: Literal
			reduce(86), // lessOrGreater, reduce: Literal
			reduce(86), // or, reduce: Literal
			reduce(86), // xor, reduce: Literal
			reduce(86), // and, reduce: Literal
			reduce(86), // shift, reduce: Literal
			reduce(86), // +, reduce: Literal
			reduce(86), // -, reduce: Literal
			reduce(86), // product, reduce: Literal
			reduce(86), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(86), // [, reduce: Literal
			nil,        // ]
			reduce(86), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S744
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(87), // terminator, reduce: Literal
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(87), // lOr, reduce: Literal
			reduce(87), // lAnd, reduce: Literal
			reduce(87), // lNot, reduce: Literal
			reduce(87), // equals, reduce: Literal
			reduce(87), // lessOrGreater, reduce: Literal
			reduce(87), // or, reduce: Literal
			reduce(87), // xor, reduce: Literal
			reduce(87), // and, reduce: Literal
			reduce(87), // shift, reduce: Literal
			reduce(87), // +, reduce: Literal
			reduce(87), // -, reduce: Literal
			reduce(87), // product, reduce: Literal
			reduce(87), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(87), // [, reduce: Literal
			nil,        // ]
			reduce(87), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S745
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(88), // terminator, reduce: Literal
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(88), // lOr, reduce: Literal
			reduce(88), // lAnd, reduce: Literal
			reduce(88), // lNot, reduce: Literal
			reduce(88), // equals, reduce: Literal
			reduce(88), // lessOrGreater, reduce: Literal
			reduce(88), // or, reduce: Literal
			reduce(88), // xor, reduce: Literal
			reduce(88), // and, reduce: Literal
			reduce(88), // shift, reduce: Literal
			reduce(88), // +, reduce: Literal
			reduce(88), // -, reduce: Literal
			reduce(88), // product, reduce: Literal
			reduce(88), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(88), // [, reduce: Literal
			nil,        // ]
			reduce(88), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S746
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(89), // terminator, reduce: Literal
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(89), // lOr, reduce: Literal
			reduce(89), // lAnd, reduce: Literal
			reduce(89), // lNot, reduce: Literal
			reduce(89), // equals, reduce: Literal
			reduce(89), // lessOrGreater, reduce: Literal
			reduce(89), // or, reduce: Literal
			reduce(89), // xor, reduce: Literal
			reduce(89), // and, reduce: Literal
			reduce(89), // shift, reduce: Literal
			reduce(89), // +, reduce: Literal
			reduce(89), // -, reduce: Literal
			reduce(89), // product, reduce: Literal
			reduce(89), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(89), // [, reduce: Literal
			nil,        // ]
			reduce(89), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S747
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(90), // terminator, reduce: Literal
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(90), // lOr, reduce: Literal
			reduce(90), // lAnd, reduce: Literal
			reduce(90), // lNot, reduce: Literal
			reduce(90), // equals, reduce: Literal
			reduce(90), // lessOrGreater, reduce: Literal
			reduce(90), // or, reduce: Literal
			reduce(90), // xor, reduce: Literal
			reduce(90), // and, reduce: Literal
			reduce(90), // shift, reduce: Literal
			reduce(90), // +, reduce: Literal
			reduce(90), // -, reduce: Literal
			reduce(90), // product, reduce: Literal
			reduce(90), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(90), // [, reduce: Literal
			nil,        // ]
			reduce(90), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S748
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(91), // terminator, reduce: Null
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(91), // lOr, reduce: Null
			reduce(91), // lAnd, reduce: Null
			reduce(91), // lNot, reduce: Null
			reduce(91), // equals, reduce: Null
			reduce(91), // lessOrGreater, reduce: Null
			reduce(91), // or, reduce: Null
			reduce(91), // xor, reduce: Null
			reduce(91), // and, reduce: Null
			reduce(91), // shift, reduce: Null
			reduce(91), // +, reduce: Null
			reduce(91), // -, reduce: Null
			reduce(91), // product, reduce: Null
			reduce(91), // (, reduce: Null
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(91), // [, reduce: Null
			nil,        // ]
			reduce(91), // ., reduce: Null
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S749
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(92), // terminator, reduce: BooleanLiteral
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(92), // lOr, reduce: BooleanLiteral
			reduce(92), // lAnd, reduce: BooleanLiteral
			reduce(92), // lNot, reduce: BooleanLiteral
			reduce(92), // equals, reduce: BooleanLiteral
			reduce(92), // lessOrGreater, reduce: BooleanLiteral
			reduce(92), // or, reduce: BooleanLiteral
			reduce(92), // xor, reduce: BooleanLiteral
			reduce(92), // and, reduce: BooleanLiteral
			reduce(92), // shift, reduce: BooleanLiteral
			reduce(92), // +, reduce: BooleanLiteral
			reduce(92), // -, reduce: BooleanLiteral
			reduce(92), // product, reduce: BooleanLiteral
			reduce(92), // (, reduce: BooleanLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(92), // [, reduce: BooleanLiteral
			nil,        // ]
			reduce(92), // ., reduce: BooleanLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S750
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(93), // terminator, reduce: IntegerLiteral
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(93), // lOr, reduce: IntegerLiteral
			reduce(93), // lAnd, reduce: IntegerLiteral
			reduce(93), // lNot, reduce: IntegerLiteral
			reduce(93), // equals, reduce: IntegerLiteral
			reduce(93), // lessOrGreater, reduce: IntegerLiteral
			reduce(93), // or, reduce: IntegerLiteral
			reduce(93), // xor, reduce: IntegerLiteral
			reduce(93), // and, reduce: IntegerLiteral
			reduce(93), // shift, reduce: IntegerLiteral
			reduce(93), // +, reduce: IntegerLiteral
			reduce(93), // -, reduce: IntegerLiteral
			reduce(93), // product, reduce: IntegerLiteral
			reduce(93), // (, reduce: IntegerLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(93), // [, reduce: IntegerLiteral
			nil,        // ]
			reduce(93), // ., reduce: IntegerLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S751
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(94), // terminator, reduce: FloatLiteral
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(94), // lOr, reduce: FloatLiteral
			reduce(94), // lAnd, reduce: FloatLiteral
			reduce(94), // lNot, reduce: FloatLiteral
			reduce(94), // equals, reduce: FloatLiteral
			reduce(94), // lessOrGreater, reduce: FloatLiteral
			reduce(94), // or, reduce: FloatLiteral
			reduce(94), // xor, reduce: FloatLiteral
			reduce(94), // and, reduce: FloatLiteral
			reduce(94), // shift, reduce: FloatLiteral
			reduce(94), // +, reduce: FloatLiteral
			reduce(94), // -, reduce: FloatLiteral
			reduce(94), // product, reduce: FloatLiteral
			reduce(94), // (, reduce: FloatLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(94), // [, reduce: FloatLiteral
			nil,        // ]
			reduce(94), // ., reduce: FloatLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S752
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(95), // terminator, reduce: StringLiteral
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(95), // lOr, reduce: StringLiteral
			reduce(95), // lAnd, reduce: StringLiteral
			reduce(95), // lNot, reduce: StringLiteral
			reduce(95), // equals, reduce: StringLiteral
			reduce(95), // lessOrGreater, reduce: StringLiteral
			reduce(95), // or, reduce: StringLiteral
			reduce(95), // xor, reduce: StringLiteral
			reduce(95), // and, reduce: StringLiteral
			reduce(95), // shift, reduce: StringLiteral
			reduce(95), // +, reduce: StringLiteral
			reduce(95), // -, reduce: StringLiteral
			reduce(95), // product, reduce: StringLiteral
			reduce(95), // (, reduce: StringLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(95), // [, reduce: StringLiteral
			nil,        // ]
			reduce(95), // ., reduce: StringLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S753
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			shift(1191), // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S754
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			shift(1192), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S755
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			shift(1193), // }
			nil,         // kwdReturn
			shift(381),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S756
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1194), // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(736),  // kwdIf
			nil,         // kwdElse
			shift(737),  // kwdFor
			shift(739),  // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S757
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(69), // $, reduce: ForExpression
			reduce(69), // terminator, reduce: ForExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S758
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(798), // {
			shift(64),  // }
			shift(65),  // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(351), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(358), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(360), // kwdIf
			nil,        // kwdElse
			shift(361), // kwdFor
			shift(363), // identifier
			shift(372), // kwdNull
			shift(373), // boolLit
			shift(374), // intLit
			shift(375), // floatLit
			shift(376), // stringLit
			shift(377), // kwdFn
		},
	},
	actionRow{ // S759
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(775), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(298), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(305), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(781), // identifier
			shift(319), // kwdNull
			shift(320), // boolLit
			shift(321), // intLit
			shift(322), // floatLit
			shift(323), // stringLit
			shift(324), // kwdFn
		},
	},
	actionRow{ // S760
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(775), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(298), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(305), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(781), // identifier
			shift(319), // kwdNull
			shift(320), // boolLit
			shift(321), // intLit
			shift(322), // floatLit
			shift(323), // stringLit
			shift(324), // kwdFn
		},
	},
	actionRow{ // S761
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(775), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(298), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(305), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(781), // identifier
			shift(319), // kwdNull
			shift(320), // boolLit
			shift(321), // intLit
			shift(322), // floatLit
			shift(323), // stringLit
			shift(324), // kwdFn
		},
	},
	actionRow{ // S762
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(775), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(298), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(305), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(781), // identifier
			shift(319), // kwdNull
			shift(320), // boolLit
			shift(321), // intLit
			shift(322), // floatLit
			shift(323), // stringLit
			shift(324), // kwdFn
		},
	},
	actionRow{ // S763
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(775), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(298), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(305), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(781), // identifier
			shift(319), // kwdNull
			shift(320), // boolLit
			shift(321), // intLit
			shift(322), // floatLit
			shift(323), // stringLit
			shift(324), // kwdFn
		},
	},
	actionRow{ // S764
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(775), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(298), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(305), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(781), // identifier
			shift(319), // kwdNull
			shift(320), // boolLit
			shift(321), // intLit
			shift(322), // floatLit
			shift(323), // stringLit
			shift(324), // kwdFn
		},
	},
	actionRow{ // S765
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(775), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(298), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(305), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(781), // identifier
			shift(319), // kwdNull
			shift(320), // boolLit
			shift(321), // intLit
			shift(322), // floatLit
			shift(323), // stringLit
			shift(324), // kwdFn
		},
	},
	actionRow{ // S766
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(775), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(298), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(305), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(781), // identifier
			shift(319), // kwdNull
			shift(320), // boolLit
			shift(321), // intLit
			shift(322), // floatLit
			shift(323), // stringLit
			shift(324), // kwdFn
		},
	},
	actionRow{ // S767
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(775), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(298), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(305), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(781), // identifier
			shift(319), // kwdNull
			shift(320), // boolLit
			shift(321), // intLit
			shift(322), // floatLit
			shift(323), // stringLit
			shift(324), // kwdFn
		},
	},
	actionRow{ // S768
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(775), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(298), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(305), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(781), // identifier
			shift(319), // kwdNull
			shift(320), // boolLit
			shift(321), // intLit
			shift(322), // floatLit
			shift(323), // stringLit
			shift(324), // kwdFn
		},
	},
	actionRow{ // S769
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(775), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(298), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(305), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(781), // identifier
			shift(319), // kwdNull
			shift(320), // boolLit
			shift(321), // intLit
			shift(322), // floatLit
			shift(323), // stringLit
			shift(324), // kwdFn
		},
	},
	actionRow{ // S770
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(775), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(298), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(305), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(781), // identifier
			shift(319), // kwdNull
			shift(320), // boolLit
			shift(321), // intLit
			shift(322), // floatLit
			shift(323), // stringLit
			shift(324), // kwdFn
		},
	},
	actionRow{ // S771
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(474),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(493),  // (
			shift(1210), // )
			shift(31),   // !
			shift(32),   // ~
			shift(501),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(503),  // kwdIf
			nil,         // kwdElse
			shift(504),  // kwdFor
			shift(506),  // identifier
			shift(515),  // kwdNull
			shift(516),  // boolLit
			shift(517),  // intLit
			shift(518),  // floatLit
			shift(519),  // stringLit
			shift(520),  // kwdFn
		},
	},
	actionRow{ // S772
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(521), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(539), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(546), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(548), // kwdIf
			nil,        // kwdElse
			shift(549), // kwdFor
			shift(551), // identifier
			shift(560), // kwdNull
			shift(561), // boolLit
			shift(562), // intLit
			shift(563), // floatLit
			shift(564), // stringLit
			shift(565), // kwdFn
		},
	},
	actionRow{ // S773
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(310), // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S774
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1213), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S775
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(416), // {
			nil,        // }
			nil,        // kwdReturn
			shift(754), // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(434), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(441), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(443), // kwdIf
			nil,        // kwdElse
			shift(444), // kwdFor
			shift(446), // identifier
			shift(455), // kwdNull
			shift(456), // boolLit
			shift(457), // intLit
			shift(458), // floatLit
			shift(459), // stringLit
			shift(460), // kwdFn
		},
	},
	actionRow{ // S776
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			shift(771),  // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1214), // [
			nil,         // ]
			shift(1215), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S777
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(49), // terminator, reduce: PrefixExpression
			reduce(49), // {, reduce: PrefixExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(49), // lOr, reduce: PrefixExpression
			reduce(49), // lAnd, reduce: PrefixExpression
			reduce(49), // lNot, reduce: PrefixExpression
			reduce(49), // equals, reduce: PrefixExpression
			reduce(49), // lessOrGreater, reduce: PrefixExpression
			reduce(49), // or, reduce: PrefixExpression
			reduce(49), // xor, reduce: PrefixExpression
			reduce(49), // and, reduce: PrefixExpression
			reduce(49), // shift, reduce: PrefixExpression
			reduce(49), // +, reduce: PrefixExpression
			reduce(49), // -, reduce: PrefixExpression
			reduce(49), // product, reduce: PrefixExpression
			reduce(48), // (, reduce: PrefixExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(48), // [, reduce: PrefixExpression
			nil,        // ]
			reduce(48), // ., reduce: PrefixExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S778
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(55), // terminator, reduce: PrimaryExpr
			reduce(55), // {, reduce: PrimaryExpr
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(55), // lOr, reduce: PrimaryExpr
			reduce(55), // lAnd, reduce: PrimaryExpr
			reduce(55), // lNot, reduce: PrimaryExpr
			reduce(55), // equals, reduce: PrimaryExpr
			reduce(55), // lessOrGreater, reduce: PrimaryExpr
			reduce(55), // or, reduce: PrimaryExpr
			reduce(55), // xor, reduce: PrimaryExpr
			reduce(55), // and, reduce: PrimaryExpr
			reduce(55), // shift, reduce: PrimaryExpr
			reduce(55), // +, reduce: PrimaryExpr
			reduce(55), // -, reduce: PrimaryExpr
			reduce(55), // product, reduce: PrimaryExpr
			reduce(55), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(55), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(55), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S779
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(57), // terminator, reduce: PrimaryExpr
			reduce(57), // {, reduce: PrimaryExpr
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(57), // lOr, reduce: PrimaryExpr
			reduce(57), // lAnd, reduce: PrimaryExpr
			reduce(57), // lNot, reduce: PrimaryExpr
			reduce(57), // equals, reduce: PrimaryExpr
			reduce(57), // lessOrGreater, reduce: PrimaryExpr
			reduce(57), // or, reduce: PrimaryExpr
			reduce(57), // xor, reduce: PrimaryExpr
			reduce(57), // and, reduce: PrimaryExpr
			reduce(57), // shift, reduce: PrimaryExpr
			reduce(57), // +, reduce: PrimaryExpr
			reduce(57), // -, reduce: PrimaryExpr
			reduce(57), // product, reduce: PrimaryExpr
			reduce(57), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(57), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(57), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S780
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(79), // terminator, reduce: Operand
			reduce(79), // {, reduce: Operand
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(79), // lOr, reduce: Operand
			reduce(79), // lAnd, reduce: Operand
			reduce(79), // lNot, reduce: Operand
			reduce(79), // equals, reduce: Operand
			reduce(79), // lessOrGreater, reduce: Operand
			reduce(79), // or, reduce: Operand
			reduce(79), // xor, reduce: Operand
			reduce(79), // and, reduce: Operand
			reduce(79), // shift, reduce: Operand
			reduce(79), // +, reduce: Operand
			reduce(79), // -, reduce: Operand
			reduce(79), // product, reduce: Operand
			reduce(79), // (, reduce: Operand
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(79), // [, reduce: Operand
			nil,        // ]
			reduce(79), // ., reduce: Operand
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S781
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(82), // terminator, reduce: Identifier
			reduce(82), // {, reduce: Identifier
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(82), // lOr, reduce: Identifier
			reduce(82), // lAnd, reduce: Identifier
			reduce(82), // lNot, reduce: Identifier
			reduce(82), // equals, reduce: Identifier
			reduce(82), // lessOrGreater, reduce: Identifier
			reduce(82), // or, reduce: Identifier
			reduce(82), // xor, reduce: Identifier
			reduce(82), // and, reduce: Identifier
			reduce(82), // shift, reduce: Identifier
			reduce(82), // +, reduce: Identifier
			reduce(82), // -, reduce: Identifier
			reduce(82), // product, reduce: Identifier
			reduce(82), // (, reduce: Identifier
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(82), // [, reduce: Identifier
			nil,        // ]
			reduce(82), // ., reduce: Identifier
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S782
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(775), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(298), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(305), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(307), // kwdIf
			nil,        // kwdElse
			shift(308), // kwdFor
			shift(310), // identifier
			shift(319), // kwdNull
			shift(320), // boolLit
			shift(321), // intLit
			shift(322), // floatLit
			shift(323), // stringLit
			shift(324), // kwdFn
		},
	},
	actionRow{ // S783
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(775), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(298), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(305), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(307), // kwdIf
			nil,        // kwdElse
			shift(308), // kwdFor
			shift(310), // identifier
			shift(319), // kwdNull
			shift(320), // boolLit
			shift(321), // intLit
			shift(322), // floatLit
			shift(323), // stringLit
			shift(324), // kwdFn
		},
	},
	actionRow{ // S784
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(635),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1218), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S785
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(98), // terminator, reduce: ArrayLiteral
			reduce(98), // {, reduce: ArrayLiteral
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(98), // lOr, reduce: ArrayLiteral
			reduce(98), // lAnd, reduce: ArrayLiteral
			reduce(98), // lNot, reduce: ArrayLiteral
			reduce(98), // equals, reduce: ArrayLiteral
			reduce(98), // lessOrGreater, reduce: ArrayLiteral
			reduce(98), // or, reduce: ArrayLiteral
			reduce(98), // xor, reduce: ArrayLiteral
			reduce(98), // and, reduce: ArrayLiteral
			reduce(98), // shift, reduce: ArrayLiteral
			reduce(98), // +, reduce: ArrayLiteral
			reduce(98), // -, reduce: ArrayLiteral
			reduce(98), // product, reduce: ArrayLiteral
			reduce(98), // (, reduce: ArrayLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(98), // [, reduce: ArrayLiteral
			nil,        // ]
			reduce(98), // ., reduce: ArrayLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S786
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(775), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(298), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(305), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(307), // kwdIf
			nil,        // kwdElse
			shift(308), // kwdFor
			shift(310), // identifier
			shift(319), // kwdNull
			shift(320), // boolLit
			shift(321), // intLit
			shift(322), // floatLit
			shift(323), // stringLit
			shift(324), // kwdFn
		},
	},
	actionRow{ // S787
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1221), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S788
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1222), // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(736),  // kwdIf
			nil,         // kwdElse
			shift(737),  // kwdFor
			shift(739),  // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S789
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(68), // terminator, reduce: ForExpression
			reduce(68), // {, reduce: ForExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S790
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(63),   // {
			shift(1225), // }
			shift(65),   // kwdReturn
			shift(754),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(85),   // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(92),   // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(94),   // kwdIf
			nil,         // kwdElse
			shift(95),   // kwdFor
			shift(97),   // identifier
			shift(106),  // kwdNull
			shift(107),  // boolLit
			shift(108),  // intLit
			shift(109),  // floatLit
			shift(110),  // stringLit
			shift(111),  // kwdFn
		},
	},
	actionRow{ // S791
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1226), // terminator
			shift(1228), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S792
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1229), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(796),  // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S793
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1232), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S794
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(80), // ,, reduce: IdentifierList
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(80), // ), reduce: IdentifierList
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S795
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(1233), // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1234), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S796
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(82), // ,, reduce: Identifier
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(82), // ), reduce: Identifier
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S797
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			reduce(3), // terminator, reduce: StatementList
			nil,       // {
			reduce(3), // }, reduce: StatementList
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S798
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(63),  // {
			shift(330), // }
			shift(65),  // kwdReturn
			shift(803), // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(85),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(92),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(94),  // kwdIf
			nil,        // kwdElse
			shift(95),  // kwdFor
			shift(97),  // identifier
			shift(106), // kwdNull
			shift(107), // boolLit
			shift(108), // intLit
			shift(109), // floatLit
			shift(110), // stringLit
			shift(111), // kwdFn
		},
	},
	actionRow{ // S799
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(12), // terminator, reduce: ExpressionStatement
			nil,        // {
			reduce(12), // }, reduce: ExpressionStatement
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S800
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			reduce(8), // terminator, reduce: BlockStatement
			nil,       // {
			reduce(8), // }, reduce: BlockStatement
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S801
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(100), // terminator, reduce: HashLiteral
			nil,         // {
			reduce(100), // }, reduce: HashLiteral
			nil,         // kwdReturn
			nil,         // ,
			reduce(100), // :, reduce: HashLiteral
			reduce(100), // lOr, reduce: HashLiteral
			reduce(100), // lAnd, reduce: HashLiteral
			reduce(100), // lNot, reduce: HashLiteral
			reduce(100), // equals, reduce: HashLiteral
			reduce(100), // lessOrGreater, reduce: HashLiteral
			reduce(100), // or, reduce: HashLiteral
			reduce(100), // xor, reduce: HashLiteral
			reduce(100), // and, reduce: HashLiteral
			reduce(100), // shift, reduce: HashLiteral
			reduce(100), // +, reduce: HashLiteral
			reduce(100), // -, reduce: HashLiteral
			reduce(100), // product, reduce: HashLiteral
			reduce(100), // (, reduce: HashLiteral
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(100), // [, reduce: HashLiteral
			nil,         // ]
			reduce(100), // ., reduce: HashLiteral
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S802
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(101), // terminator, reduce: HashLiteral
			nil,         // {
			reduce(101), // }, reduce: HashLiteral
			nil,         // kwdReturn
			nil,         // ,
			reduce(101), // :, reduce: HashLiteral
			reduce(101), // lOr, reduce: HashLiteral
			reduce(101), // lAnd, reduce: HashLiteral
			reduce(101), // lNot, reduce: HashLiteral
			reduce(101), // equals, reduce: HashLiteral
			reduce(101), // lessOrGreater, reduce: HashLiteral
			reduce(101), // or, reduce: HashLiteral
			reduce(101), // xor, reduce: HashLiteral
			reduce(101), // and, reduce: HashLiteral
			reduce(101), // shift, reduce: HashLiteral
			reduce(101), // +, reduce: HashLiteral
			reduce(101), // -, reduce: HashLiteral
			reduce(101), // product, reduce: HashLiteral
			reduce(101), // (, reduce: HashLiteral
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(101), // [, reduce: HashLiteral
			nil,         // ]
			reduce(101), // ., reduce: HashLiteral
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S803
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			shift(1235), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S804
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			shift(1236), // }
			nil,         // kwdReturn
			shift(381),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S805
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(333), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(351), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(358), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(826), // identifier
			shift(372), // kwdNull
			shift(373), // boolLit
			shift(374), // intLit
			shift(375), // floatLit
			shift(376), // stringLit
			shift(377), // kwdFn
		},
	},
	actionRow{ // S806
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(333), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(351), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(358), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(826), // identifier
			shift(372), // kwdNull
			shift(373), // boolLit
			shift(374), // intLit
			shift(375), // floatLit
			shift(376), // stringLit
			shift(377), // kwdFn
		},
	},
	actionRow{ // S807
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(333), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(351), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(358), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(826), // identifier
			shift(372), // kwdNull
			shift(373), // boolLit
			shift(374), // intLit
			shift(375), // floatLit
			shift(376), // stringLit
			shift(377), // kwdFn
		},
	},
	actionRow{ // S808
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(333), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(351), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(358), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(826), // identifier
			shift(372), // kwdNull
			shift(373), // boolLit
			shift(374), // intLit
			shift(375), // floatLit
			shift(376), // stringLit
			shift(377), // kwdFn
		},
	},
	actionRow{ // S809
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(333), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(351), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(358), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(826), // identifier
			shift(372), // kwdNull
			shift(373), // boolLit
			shift(374), // intLit
			shift(375), // floatLit
			shift(376), // stringLit
			shift(377), // kwdFn
		},
	},
	actionRow{ // S810
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(333), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(351), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(358), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(826), // identifier
			shift(372), // kwdNull
			shift(373), // boolLit
			shift(374), // intLit
			shift(375), // floatLit
			shift(376), // stringLit
			shift(377), // kwdFn
		},
	},
	actionRow{ // S811
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(333), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(351), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(358), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(826), // identifier
			shift(372), // kwdNull
			shift(373), // boolLit
			shift(374), // intLit
			shift(375), // floatLit
			shift(376), // stringLit
			shift(377), // kwdFn
		},
	},
	actionRow{ // S812
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(333), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(351), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(358), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(826), // identifier
			shift(372), // kwdNull
			shift(373), // boolLit
			shift(374), // intLit
			shift(375), // floatLit
			shift(376), // stringLit
			shift(377), // kwdFn
		},
	},
	actionRow{ // S813
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(333), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(351), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(358), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(826), // identifier
			shift(372), // kwdNull
			shift(373), // boolLit
			shift(374), // intLit
			shift(375), // floatLit
			shift(376), // stringLit
			shift(377), // kwdFn
		},
	},
	actionRow{ // S814
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(333), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(351), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(358), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(826), // identifier
			shift(372), // kwdNull
			shift(373), // boolLit
			shift(374), // intLit
			shift(375), // floatLit
			shift(376), // stringLit
			shift(377), // kwdFn
		},
	},
	actionRow{ // S815
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(333), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(351), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(358), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(826), // identifier
			shift(372), // kwdNull
			shift(373), // boolLit
			shift(374), // intLit
			shift(375), // floatLit
			shift(376), // stringLit
			shift(377), // kwdFn
		},
	},
	actionRow{ // S816
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(333), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(351), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(358), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(826), // identifier
			shift(372), // kwdNull
			shift(373), // boolLit
			shift(374), // intLit
			shift(375), // floatLit
			shift(376), // stringLit
			shift(377), // kwdFn
		},
	},
	actionRow{ // S817
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(474),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(493),  // (
			shift(1251), // )
			shift(31),   // !
			shift(32),   // ~
			shift(501),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(503),  // kwdIf
			nil,         // kwdElse
			shift(504),  // kwdFor
			shift(506),  // identifier
			shift(515),  // kwdNull
			shift(516),  // boolLit
			shift(517),  // intLit
			shift(518),  // floatLit
			shift(519),  // stringLit
			shift(520),  // kwdFn
		},
	},
	actionRow{ // S818
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(521), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(539), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(546), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(548), // kwdIf
			nil,        // kwdElse
			shift(549), // kwdFor
			shift(551), // identifier
			shift(560), // kwdNull
			shift(561), // boolLit
			shift(562), // intLit
			shift(563), // floatLit
			shift(564), // stringLit
			shift(565), // kwdFn
		},
	},
	actionRow{ // S819
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(363), // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S820
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1254), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S821
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			shift(817),  // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1255), // [
			nil,         // ]
			shift(1256), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S822
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(49), // terminator, reduce: PrefixExpression
			nil,        // {
			reduce(49), // }, reduce: PrefixExpression
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(49), // lOr, reduce: PrefixExpression
			reduce(49), // lAnd, reduce: PrefixExpression
			reduce(49), // lNot, reduce: PrefixExpression
			reduce(49), // equals, reduce: PrefixExpression
			reduce(49), // lessOrGreater, reduce: PrefixExpression
			reduce(49), // or, reduce: PrefixExpression
			reduce(49), // xor, reduce: PrefixExpression
			reduce(49), // and, reduce: PrefixExpression
			reduce(49), // shift, reduce: PrefixExpression
			reduce(49), // +, reduce: PrefixExpression
			reduce(49), // -, reduce: PrefixExpression
			reduce(49), // product, reduce: PrefixExpression
			reduce(48), // (, reduce: PrefixExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(48), // [, reduce: PrefixExpression
			nil,        // ]
			reduce(48), // ., reduce: PrefixExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S823
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(55), // terminator, reduce: PrimaryExpr
			nil,        // {
			reduce(55), // }, reduce: PrimaryExpr
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(55), // lOr, reduce: PrimaryExpr
			reduce(55), // lAnd, reduce: PrimaryExpr
			reduce(55), // lNot, reduce: PrimaryExpr
			reduce(55), // equals, reduce: PrimaryExpr
			reduce(55), // lessOrGreater, reduce: PrimaryExpr
			reduce(55), // or, reduce: PrimaryExpr
			reduce(55), // xor, reduce: PrimaryExpr
			reduce(55), // and, reduce: PrimaryExpr
			reduce(55), // shift, reduce: PrimaryExpr
			reduce(55), // +, reduce: PrimaryExpr
			reduce(55), // -, reduce: PrimaryExpr
			reduce(55), // product, reduce: PrimaryExpr
			reduce(55), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(55), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(55), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S824
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(57), // terminator, reduce: PrimaryExpr
			nil,        // {
			reduce(57), // }, reduce: PrimaryExpr
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(57), // lOr, reduce: PrimaryExpr
			reduce(57), // lAnd, reduce: PrimaryExpr
			reduce(57), // lNot, reduce: PrimaryExpr
			reduce(57), // equals, reduce: PrimaryExpr
			reduce(57), // lessOrGreater, reduce: PrimaryExpr
			reduce(57), // or, reduce: PrimaryExpr
			reduce(57), // xor, reduce: PrimaryExpr
			reduce(57), // and, reduce: PrimaryExpr
			reduce(57), // shift, reduce: PrimaryExpr
			reduce(57), // +, reduce: PrimaryExpr
			reduce(57), // -, reduce: PrimaryExpr
			reduce(57), // product, reduce: PrimaryExpr
			reduce(57), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(57), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(57), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S825
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(79), // terminator, reduce: Operand
			nil,        // {
			reduce(79), // }, reduce: Operand
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(79), // lOr, reduce: Operand
			reduce(79), // lAnd, reduce: Operand
			reduce(79), // lNot, reduce: Operand
			reduce(79), // equals, reduce: Operand
			reduce(79), // lessOrGreater, reduce: Operand
			reduce(79), // or, reduce: Operand
			reduce(79), // xor, reduce: Operand
			reduce(79), // and, reduce: Operand
			reduce(79), // shift, reduce: Operand
			reduce(79), // +, reduce: Operand
			reduce(79), // -, reduce: Operand
			reduce(79), // product, reduce: Operand
			reduce(79), // (, reduce: Operand
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(79), // [, reduce: Operand
			nil,        // ]
			reduce(79), // ., reduce: Operand
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S826
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(82), // terminator, reduce: Identifier
			nil,        // {
			reduce(82), // }, reduce: Identifier
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(82), // lOr, reduce: Identifier
			reduce(82), // lAnd, reduce: Identifier
			reduce(82), // lNot, reduce: Identifier
			reduce(82), // equals, reduce: Identifier
			reduce(82), // lessOrGreater, reduce: Identifier
			reduce(82), // or, reduce: Identifier
			reduce(82), // xor, reduce: Identifier
			reduce(82), // and, reduce: Identifier
			reduce(82), // shift, reduce: Identifier
			reduce(82), // +, reduce: Identifier
			reduce(82), // -, reduce: Identifier
			reduce(82), // product, reduce: Identifier
			reduce(82), // (, reduce: Identifier
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(82), // [, reduce: Identifier
			nil,        // ]
			reduce(82), // ., reduce: Identifier
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S827
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(333), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(351), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(358), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(360), // kwdIf
			nil,        // kwdElse
			shift(361), // kwdFor
			shift(363), // identifier
			shift(372), // kwdNull
			shift(373), // boolLit
			shift(374), // intLit
			shift(375), // floatLit
			shift(376), // stringLit
			shift(377), // kwdFn
		},
	},
	actionRow{ // S828
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(333), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(351), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(358), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(360), // kwdIf
			nil,        // kwdElse
			shift(361), // kwdFor
			shift(363), // identifier
			shift(372), // kwdNull
			shift(373), // boolLit
			shift(374), // intLit
			shift(375), // floatLit
			shift(376), // stringLit
			shift(377), // kwdFn
		},
	},
	actionRow{ // S829
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(635),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1259), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S830
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(98), // terminator, reduce: ArrayLiteral
			nil,        // {
			reduce(98), // }, reduce: ArrayLiteral
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(98), // lOr, reduce: ArrayLiteral
			reduce(98), // lAnd, reduce: ArrayLiteral
			reduce(98), // lNot, reduce: ArrayLiteral
			reduce(98), // equals, reduce: ArrayLiteral
			reduce(98), // lessOrGreater, reduce: ArrayLiteral
			reduce(98), // or, reduce: ArrayLiteral
			reduce(98), // xor, reduce: ArrayLiteral
			reduce(98), // and, reduce: ArrayLiteral
			reduce(98), // shift, reduce: ArrayLiteral
			reduce(98), // +, reduce: ArrayLiteral
			reduce(98), // -, reduce: ArrayLiteral
			reduce(98), // product, reduce: ArrayLiteral
			reduce(98), // (, reduce: ArrayLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(98), // [, reduce: ArrayLiteral
			nil,        // ]
			reduce(98), // ., reduce: ArrayLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S831
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(333), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(351), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(358), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(360), // kwdIf
			nil,        // kwdElse
			shift(361), // kwdFor
			shift(363), // identifier
			shift(372), // kwdNull
			shift(373), // boolLit
			shift(374), // intLit
			shift(375), // floatLit
			shift(376), // stringLit
			shift(377), // kwdFn
		},
	},
	actionRow{ // S832
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1262), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S833
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1263), // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(736),  // kwdIf
			nil,         // kwdElse
			shift(737),  // kwdFor
			shift(739),  // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S834
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(68), // terminator, reduce: ForExpression
			nil,        // {
			reduce(68), // }, reduce: ForExpression
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S835
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(63),  // {
			shift(330), // }
			shift(65),  // kwdReturn
			shift(754), // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(85),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(92),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(94),  // kwdIf
			nil,        // kwdElse
			shift(95),  // kwdFor
			shift(97),  // identifier
			shift(106), // kwdNull
			shift(107), // boolLit
			shift(108), // intLit
			shift(109), // floatLit
			shift(110), // stringLit
			shift(111), // kwdFn
		},
	},
	actionRow{ // S836
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1265), // terminator
			shift(1267), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S837
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1268), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(796),  // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S838
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(416),  // {
			nil,         // }
			nil,         // kwdReturn
			shift(1270), // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(434),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(441),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(443),  // kwdIf
			nil,         // kwdElse
			shift(444),  // kwdFor
			shift(446),  // identifier
			shift(455),  // kwdNull
			shift(456),  // boolLit
			shift(457),  // intLit
			shift(458),  // floatLit
			shift(459),  // stringLit
			shift(460),  // kwdFn
		},
	},
	actionRow{ // S839
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(16), // }, reduce: ExpressionMap
			nil,        // kwdReturn
			reduce(16), // ,, reduce: ExpressionMap
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S840
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(19),  // }, reduce: Expression
			nil,         // kwdReturn
			reduce(19),  // ,, reduce: Expression
			nil,         // :
			shift(1272), // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S841
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(20), // }, reduce: Expression
			nil,        // kwdReturn
			reduce(20), // ,, reduce: Expression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S842
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(21), // }, reduce: Expression
			nil,        // kwdReturn
			reduce(21), // ,, reduce: Expression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S843
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(22), // }, reduce: Expression
			nil,        // kwdReturn
			reduce(22), // ,, reduce: Expression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S844
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(24),  // }, reduce: Term1
			nil,         // kwdReturn
			reduce(24),  // ,, reduce: Term1
			nil,         // :
			reduce(24),  // lOr, reduce: Term1
			shift(1273), // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S845
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(26),  // }, reduce: Term2
			nil,         // kwdReturn
			reduce(26),  // ,, reduce: Term2
			nil,         // :
			reduce(26),  // lOr, reduce: Term2
			reduce(26),  // lAnd, reduce: Term2
			shift(1274), // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S846
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(28),  // }, reduce: Term3
			nil,         // kwdReturn
			reduce(28),  // ,, reduce: Term3
			nil,         // :
			reduce(28),  // lOr, reduce: Term3
			reduce(28),  // lAnd, reduce: Term3
			reduce(28),  // lNot, reduce: Term3
			shift(1275), // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S847
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(30),  // }, reduce: Term4
			nil,         // kwdReturn
			reduce(30),  // ,, reduce: Term4
			nil,         // :
			reduce(30),  // lOr, reduce: Term4
			reduce(30),  // lAnd, reduce: Term4
			reduce(30),  // lNot, reduce: Term4
			reduce(30),  // equals, reduce: Term4
			shift(1276), // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S848
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(32),  // }, reduce: Term5
			nil,         // kwdReturn
			reduce(32),  // ,, reduce: Term5
			nil,         // :
			reduce(32),  // lOr, reduce: Term5
			reduce(32),  // lAnd, reduce: Term5
			reduce(32),  // lNot, reduce: Term5
			reduce(32),  // equals, reduce: Term5
			reduce(32),  // lessOrGreater, reduce: Term5
			shift(1277), // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S849
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(34),  // }, reduce: Term6
			nil,         // kwdReturn
			reduce(34),  // ,, reduce: Term6
			nil,         // :
			reduce(34),  // lOr, reduce: Term6
			reduce(34),  // lAnd, reduce: Term6
			reduce(34),  // lNot, reduce: Term6
			reduce(34),  // equals, reduce: Term6
			reduce(34),  // lessOrGreater, reduce: Term6
			reduce(34),  // or, reduce: Term6
			shift(1278), // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S850
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(36),  // }, reduce: Term7
			nil,         // kwdReturn
			reduce(36),  // ,, reduce: Term7
			nil,         // :
			reduce(36),  // lOr, reduce: Term7
			reduce(36),  // lAnd, reduce: Term7
			reduce(36),  // lNot, reduce: Term7
			reduce(36),  // equals, reduce: Term7
			reduce(36),  // lessOrGreater, reduce: Term7
			reduce(36),  // or, reduce: Term7
			reduce(36),  // xor, reduce: Term7
			shift(1279), // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S851
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(38),  // }, reduce: Term8
			nil,         // kwdReturn
			reduce(38),  // ,, reduce: Term8
			nil,         // :
			reduce(38),  // lOr, reduce: Term8
			reduce(38),  // lAnd, reduce: Term8
			reduce(38),  // lNot, reduce: Term8
			reduce(38),  // equals, reduce: Term8
			reduce(38),  // lessOrGreater, reduce: Term8
			reduce(38),  // or, reduce: Term8
			reduce(38),  // xor, reduce: Term8
			reduce(38),  // and, reduce: Term8
			shift(1280), // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S852
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(40),  // }, reduce: Term9
			nil,         // kwdReturn
			reduce(40),  // ,, reduce: Term9
			nil,         // :
			reduce(40),  // lOr, reduce: Term9
			reduce(40),  // lAnd, reduce: Term9
			reduce(40),  // lNot, reduce: Term9
			reduce(40),  // equals, reduce: Term9
			reduce(40),  // lessOrGreater, reduce: Term9
			reduce(40),  // or, reduce: Term9
			reduce(40),  // xor, reduce: Term9
			reduce(40),  // and, reduce: Term9
			reduce(40),  // shift, reduce: Term9
			shift(1281), // +
			shift(1282), // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S853
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(43),  // }, reduce: Term10
			nil,         // kwdReturn
			reduce(43),  // ,, reduce: Term10
			nil,         // :
			reduce(43),  // lOr, reduce: Term10
			reduce(43),  // lAnd, reduce: Term10
			reduce(43),  // lNot, reduce: Term10
			reduce(43),  // equals, reduce: Term10
			reduce(43),  // lessOrGreater, reduce: Term10
			reduce(43),  // or, reduce: Term10
			reduce(43),  // xor, reduce: Term10
			reduce(43),  // and, reduce: Term10
			reduce(43),  // shift, reduce: Term10
			reduce(43),  // +, reduce: Term10
			reduce(43),  // -, reduce: Term10
			shift(1283), // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S854
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(45),  // }, reduce: Term11
			nil,         // kwdReturn
			reduce(45),  // ,, reduce: Term11
			nil,         // :
			reduce(45),  // lOr, reduce: Term11
			reduce(45),  // lAnd, reduce: Term11
			reduce(45),  // lNot, reduce: Term11
			reduce(45),  // equals, reduce: Term11
			reduce(45),  // lessOrGreater, reduce: Term11
			reduce(45),  // or, reduce: Term11
			reduce(45),  // xor, reduce: Term11
			reduce(45),  // and, reduce: Term11
			reduce(45),  // shift, reduce: Term11
			reduce(45),  // +, reduce: Term11
			reduce(45),  // -, reduce: Term11
			reduce(45),  // product, reduce: Term11
			shift(1284), // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1285), // [
			nil,         // ]
			shift(1286), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S855
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(46), // }, reduce: Term12
			nil,        // kwdReturn
			reduce(46), // ,, reduce: Term12
			nil,        // :
			reduce(46), // lOr, reduce: Term12
			reduce(46), // lAnd, reduce: Term12
			reduce(46), // lNot, reduce: Term12
			reduce(46), // equals, reduce: Term12
			reduce(46), // lessOrGreater, reduce: Term12
			reduce(46), // or, reduce: Term12
			reduce(46), // xor, reduce: Term12
			reduce(46), // and, reduce: Term12
			reduce(46), // shift, reduce: Term12
			reduce(46), // +, reduce: Term12
			reduce(46), // -, reduce: Term12
			reduce(46), // product, reduce: Term12
			reduce(46), // (, reduce: Term12
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(46), // [, reduce: Term12
			nil,        // ]
			reduce(46), // ., reduce: Term12
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S856
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(129), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(147), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(154), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(156), // kwdIf
			nil,        // kwdElse
			shift(157), // kwdFor
			shift(159), // identifier
			shift(168), // kwdNull
			shift(169), // boolLit
			shift(170), // intLit
			shift(171), // floatLit
			shift(172), // stringLit
			shift(173), // kwdFn
		},
	},
	actionRow{ // S857
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(48), // }, reduce: PrefixExpression
			nil,        // kwdReturn
			reduce(48), // ,, reduce: PrefixExpression
			nil,        // :
			reduce(48), // lOr, reduce: PrefixExpression
			reduce(48), // lAnd, reduce: PrefixExpression
			reduce(48), // lNot, reduce: PrefixExpression
			reduce(48), // equals, reduce: PrefixExpression
			reduce(48), // lessOrGreater, reduce: PrefixExpression
			reduce(48), // or, reduce: PrefixExpression
			reduce(48), // xor, reduce: PrefixExpression
			reduce(48), // and, reduce: PrefixExpression
			reduce(48), // shift, reduce: PrefixExpression
			reduce(48), // +, reduce: PrefixExpression
			reduce(48), // -, reduce: PrefixExpression
			reduce(48), // product, reduce: PrefixExpression
			reduce(48), // (, reduce: PrefixExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(48), // [, reduce: PrefixExpression
			nil,        // ]
			reduce(48), // ., reduce: PrefixExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S858
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(838),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(176),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(863),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1293), // identifier
			shift(877),  // kwdNull
			shift(878),  // boolLit
			shift(879),  // intLit
			shift(880),  // floatLit
			shift(881),  // stringLit
			shift(882),  // kwdFn
		},
	},
	actionRow{ // S859
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(54), // }, reduce: PrimaryExpr
			nil,        // kwdReturn
			reduce(54), // ,, reduce: PrimaryExpr
			nil,        // :
			reduce(54), // lOr, reduce: PrimaryExpr
			reduce(54), // lAnd, reduce: PrimaryExpr
			reduce(54), // lNot, reduce: PrimaryExpr
			reduce(54), // equals, reduce: PrimaryExpr
			reduce(54), // lessOrGreater, reduce: PrimaryExpr
			reduce(54), // or, reduce: PrimaryExpr
			reduce(54), // xor, reduce: PrimaryExpr
			reduce(54), // and, reduce: PrimaryExpr
			reduce(54), // shift, reduce: PrimaryExpr
			reduce(54), // +, reduce: PrimaryExpr
			reduce(54), // -, reduce: PrimaryExpr
			reduce(54), // product, reduce: PrimaryExpr
			reduce(54), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(54), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(54), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S860
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(55),  // }, reduce: PrimaryExpr
			nil,         // kwdReturn
			reduce(55),  // ,, reduce: PrimaryExpr
			nil,         // :
			reduce(55),  // lOr, reduce: PrimaryExpr
			reduce(55),  // lAnd, reduce: PrimaryExpr
			reduce(55),  // lNot, reduce: PrimaryExpr
			reduce(55),  // equals, reduce: PrimaryExpr
			reduce(55),  // lessOrGreater, reduce: PrimaryExpr
			reduce(55),  // or, reduce: PrimaryExpr
			reduce(55),  // xor, reduce: PrimaryExpr
			reduce(55),  // and, reduce: PrimaryExpr
			reduce(55),  // shift, reduce: PrimaryExpr
			reduce(55),  // +, reduce: PrimaryExpr
			reduce(55),  // -, reduce: PrimaryExpr
			reduce(55),  // product, reduce: PrimaryExpr
			reduce(55),  // (, reduce: PrimaryExpr
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(55),  // [, reduce: PrimaryExpr
			nil,         // ]
			reduce(55),  // ., reduce: PrimaryExpr
			shift(1294), // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S861
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(56), // }, reduce: PrimaryExpr
			nil,        // kwdReturn
			reduce(56), // ,, reduce: PrimaryExpr
			nil,        // :
			reduce(56), // lOr, reduce: PrimaryExpr
			reduce(56), // lAnd, reduce: PrimaryExpr
			reduce(56), // lNot, reduce: PrimaryExpr
			reduce(56), // equals, reduce: PrimaryExpr
			reduce(56), // lessOrGreater, reduce: PrimaryExpr
			reduce(56), // or, reduce: PrimaryExpr
			reduce(56), // xor, reduce: PrimaryExpr
			reduce(56), // and, reduce: PrimaryExpr
			reduce(56), // shift, reduce: PrimaryExpr
			reduce(56), // +, reduce: PrimaryExpr
			reduce(56), // -, reduce: PrimaryExpr
			reduce(56), // product, reduce: PrimaryExpr
			reduce(56), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(56), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(56), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S862
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(57),  // }, reduce: PrimaryExpr
			nil,         // kwdReturn
			reduce(57),  // ,, reduce: PrimaryExpr
			nil,         // :
			reduce(57),  // lOr, reduce: PrimaryExpr
			reduce(57),  // lAnd, reduce: PrimaryExpr
			reduce(57),  // lNot, reduce: PrimaryExpr
			reduce(57),  // equals, reduce: PrimaryExpr
			reduce(57),  // lessOrGreater, reduce: PrimaryExpr
			reduce(57),  // or, reduce: PrimaryExpr
			reduce(57),  // xor, reduce: PrimaryExpr
			reduce(57),  // and, reduce: PrimaryExpr
			reduce(57),  // shift, reduce: PrimaryExpr
			reduce(57),  // +, reduce: PrimaryExpr
			reduce(57),  // -, reduce: PrimaryExpr
			reduce(57),  // product, reduce: PrimaryExpr
			reduce(57),  // (, reduce: PrimaryExpr
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(57),  // [, reduce: PrimaryExpr
			nil,         // ]
			reduce(57),  // ., reduce: PrimaryExpr
			shift(1295), // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S863
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(185),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(204),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(211),  // [
			shift(1297), // ]
			nil,         // .
			nil,         // assign
			shift(214),  // kwdIf
			nil,         // kwdElse
			shift(215),  // kwdFor
			shift(217),  // identifier
			shift(226),  // kwdNull
			shift(227),  // boolLit
			shift(228),  // intLit
			shift(229),  // floatLit
			shift(230),  // stringLit
			shift(231),  // kwdFn
		},
	},
	actionRow{ // S864
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(79),  // }, reduce: Operand
			nil,         // kwdReturn
			reduce(79),  // ,, reduce: Operand
			nil,         // :
			reduce(79),  // lOr, reduce: Operand
			reduce(79),  // lAnd, reduce: Operand
			reduce(79),  // lNot, reduce: Operand
			reduce(79),  // equals, reduce: Operand
			reduce(79),  // lessOrGreater, reduce: Operand
			reduce(79),  // or, reduce: Operand
			reduce(79),  // xor, reduce: Operand
			reduce(79),  // and, reduce: Operand
			reduce(79),  // shift, reduce: Operand
			reduce(79),  // +, reduce: Operand
			reduce(79),  // -, reduce: Operand
			reduce(79),  // product, reduce: Operand
			reduce(79),  // (, reduce: Operand
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(79),  // [, reduce: Operand
			nil,         // ]
			reduce(79),  // ., reduce: Operand
			shift(1298), // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S865
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(233), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(251), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(258), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(260), // kwdIf
			nil,        // kwdElse
			shift(261), // kwdFor
			shift(263), // identifier
			shift(272), // kwdNull
			shift(273), // boolLit
			shift(274), // intLit
			shift(275), // floatLit
			shift(276), // stringLit
			shift(277), // kwdFn
		},
	},
	actionRow{ // S866
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1300), // terminator
			shift(1302), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(298),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(305),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(307),  // kwdIf
			nil,         // kwdElse
			shift(308),  // kwdFor
			shift(310),  // identifier
			shift(319),  // kwdNull
			shift(320),  // boolLit
			shift(321),  // intLit
			shift(322),  // floatLit
			shift(323),  // stringLit
			shift(324),  // kwdFn
		},
	},
	actionRow{ // S867
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(78), // }, reduce: Operand
			nil,        // kwdReturn
			reduce(78), // ,, reduce: Operand
			nil,        // :
			reduce(78), // lOr, reduce: Operand
			reduce(78), // lAnd, reduce: Operand
			reduce(78), // lNot, reduce: Operand
			reduce(78), // equals, reduce: Operand
			reduce(78), // lessOrGreater, reduce: Operand
			reduce(78), // or, reduce: Operand
			reduce(78), // xor, reduce: Operand
			reduce(78), // and, reduce: Operand
			reduce(78), // shift, reduce: Operand
			reduce(78), // +, reduce: Operand
			reduce(78), // -, reduce: Operand
			reduce(78), // product, reduce: Operand
			reduce(78), // (, reduce: Operand
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(78), // [, reduce: Operand
			nil,        // ]
			reduce(78), // ., reduce: Operand
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S868
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(82), // }, reduce: Identifier
			nil,        // kwdReturn
			reduce(82), // ,, reduce: Identifier
			nil,        // :
			reduce(82), // lOr, reduce: Identifier
			reduce(82), // lAnd, reduce: Identifier
			reduce(82), // lNot, reduce: Identifier
			reduce(82), // equals, reduce: Identifier
			reduce(82), // lessOrGreater, reduce: Identifier
			reduce(82), // or, reduce: Identifier
			reduce(82), // xor, reduce: Identifier
			reduce(82), // and, reduce: Identifier
			reduce(82), // shift, reduce: Identifier
			reduce(82), // +, reduce: Identifier
			reduce(82), // -, reduce: Identifier
			reduce(82), // product, reduce: Identifier
			reduce(82), // (, reduce: Identifier
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(82), // [, reduce: Identifier
			nil,        // ]
			reduce(82), // ., reduce: Identifier
			reduce(82), // assign, reduce: Identifier
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S869
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(83), // }, reduce: Literal
			nil,        // kwdReturn
			reduce(83), // ,, reduce: Literal
			nil,        // :
			reduce(83), // lOr, reduce: Literal
			reduce(83), // lAnd, reduce: Literal
			reduce(83), // lNot, reduce: Literal
			reduce(83), // equals, reduce: Literal
			reduce(83), // lessOrGreater, reduce: Literal
			reduce(83), // or, reduce: Literal
			reduce(83), // xor, reduce: Literal
			reduce(83), // and, reduce: Literal
			reduce(83), // shift, reduce: Literal
			reduce(83), // +, reduce: Literal
			reduce(83), // -, reduce: Literal
			reduce(83), // product, reduce: Literal
			reduce(83), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(83), // [, reduce: Literal
			nil,        // ]
			reduce(83), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S870
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(84), // }, reduce: Literal
			nil,        // kwdReturn
			reduce(84), // ,, reduce: Literal
			nil,        // :
			reduce(84), // lOr, reduce: Literal
			reduce(84), // lAnd, reduce: Literal
			reduce(84), // lNot, reduce: Literal
			reduce(84), // equals, reduce: Literal
			reduce(84), // lessOrGreater, reduce: Literal
			reduce(84), // or, reduce: Literal
			reduce(84), // xor, reduce: Literal
			reduce(84), // and, reduce: Literal
			reduce(84), // shift, reduce: Literal
			reduce(84), // +, reduce: Literal
			reduce(84), // -, reduce: Literal
			reduce(84), // product, reduce: Literal
			reduce(84), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(84), // [, reduce: Literal
			nil,        // ]
			reduce(84), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S871
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(85), // }, reduce: Literal
			nil,        // kwdReturn
			reduce(85), // ,, reduce: Literal
			nil,        // :
			reduce(85), // lOr, reduce: Literal
			reduce(85), // lAnd, reduce: Literal
			reduce(85), // lNot, reduce: Literal
			reduce(85), // equals, reduce: Literal
			reduce(85), // lessOrGreater, reduce: Literal
			reduce(85), // or, reduce: Literal
			reduce(85), // xor, reduce: Literal
			reduce(85), // and, reduce: Literal
			reduce(85), // shift, reduce: Literal
			reduce(85), // +, reduce: Literal
			reduce(85), // -, reduce: Literal
			reduce(85), // product, reduce: Literal
			reduce(85), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(85), // [, reduce: Literal
			nil,        // ]
			reduce(85), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S872
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(86), // }, reduce: Literal
			nil,        // kwdReturn
			reduce(86), // ,, reduce: Literal
			nil,        // :
			reduce(86), // lOr, reduce: Literal
			reduce(86), // lAnd, reduce: Literal
			reduce(86), // lNot, reduce: Literal
			reduce(86), // equals, reduce: Literal
			reduce(86), // lessOrGreater, reduce: Literal
			reduce(86), // or, reduce: Literal
			reduce(86), // xor, reduce: Literal
			reduce(86), // and, reduce: Literal
			reduce(86), // shift, reduce: Literal
			reduce(86), // +, reduce: Literal
			reduce(86), // -, reduce: Literal
			reduce(86), // product, reduce: Literal
			reduce(86), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(86), // [, reduce: Literal
			nil,        // ]
			reduce(86), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S873
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(87), // }, reduce: Literal
			nil,        // kwdReturn
			reduce(87), // ,, reduce: Literal
			nil,        // :
			reduce(87), // lOr, reduce: Literal
			reduce(87), // lAnd, reduce: Literal
			reduce(87), // lNot, reduce: Literal
			reduce(87), // equals, reduce: Literal
			reduce(87), // lessOrGreater, reduce: Literal
			reduce(87), // or, reduce: Literal
			reduce(87), // xor, reduce: Literal
			reduce(87), // and, reduce: Literal
			reduce(87), // shift, reduce: Literal
			reduce(87), // +, reduce: Literal
			reduce(87), // -, reduce: Literal
			reduce(87), // product, reduce: Literal
			reduce(87), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(87), // [, reduce: Literal
			nil,        // ]
			reduce(87), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S874
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(88), // }, reduce: Literal
			nil,        // kwdReturn
			reduce(88), // ,, reduce: Literal
			nil,        // :
			reduce(88), // lOr, reduce: Literal
			reduce(88), // lAnd, reduce: Literal
			reduce(88), // lNot, reduce: Literal
			reduce(88), // equals, reduce: Literal
			reduce(88), // lessOrGreater, reduce: Literal
			reduce(88), // or, reduce: Literal
			reduce(88), // xor, reduce: Literal
			reduce(88), // and, reduce: Literal
			reduce(88), // shift, reduce: Literal
			reduce(88), // +, reduce: Literal
			reduce(88), // -, reduce: Literal
			reduce(88), // product, reduce: Literal
			reduce(88), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(88), // [, reduce: Literal
			nil,        // ]
			reduce(88), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S875
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(89), // }, reduce: Literal
			nil,        // kwdReturn
			reduce(89), // ,, reduce: Literal
			nil,        // :
			reduce(89), // lOr, reduce: Literal
			reduce(89), // lAnd, reduce: Literal
			reduce(89), // lNot, reduce: Literal
			reduce(89), // equals, reduce: Literal
			reduce(89), // lessOrGreater, reduce: Literal
			reduce(89), // or, reduce: Literal
			reduce(89), // xor, reduce: Literal
			reduce(89), // and, reduce: Literal
			reduce(89), // shift, reduce: Literal
			reduce(89), // +, reduce: Literal
			reduce(89), // -, reduce: Literal
			reduce(89), // product, reduce: Literal
			reduce(89), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(89), // [, reduce: Literal
			nil,        // ]
			reduce(89), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S876
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(90), // }, reduce: Literal
			nil,        // kwdReturn
			reduce(90), // ,, reduce: Literal
			nil,        // :
			reduce(90), // lOr, reduce: Literal
			reduce(90), // lAnd, reduce: Literal
			reduce(90), // lNot, reduce: Literal
			reduce(90), // equals, reduce: Literal
			reduce(90), // lessOrGreater, reduce: Literal
			reduce(90), // or, reduce: Literal
			reduce(90), // xor, reduce: Literal
			reduce(90), // and, reduce: Literal
			reduce(90), // shift, reduce: Literal
			reduce(90), // +, reduce: Literal
			reduce(90), // -, reduce: Literal
			reduce(90), // product, reduce: Literal
			reduce(90), // (, reduce: Literal
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(90), // [, reduce: Literal
			nil,        // ]
			reduce(90), // ., reduce: Literal
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S877
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(91), // }, reduce: Null
			nil,        // kwdReturn
			reduce(91), // ,, reduce: Null
			nil,        // :
			reduce(91), // lOr, reduce: Null
			reduce(91), // lAnd, reduce: Null
			reduce(91), // lNot, reduce: Null
			reduce(91), // equals, reduce: Null
			reduce(91), // lessOrGreater, reduce: Null
			reduce(91), // or, reduce: Null
			reduce(91), // xor, reduce: Null
			reduce(91), // and, reduce: Null
			reduce(91), // shift, reduce: Null
			reduce(91), // +, reduce: Null
			reduce(91), // -, reduce: Null
			reduce(91), // product, reduce: Null
			reduce(91), // (, reduce: Null
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(91), // [, reduce: Null
			nil,        // ]
			reduce(91), // ., reduce: Null
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S878
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(92), // }, reduce: BooleanLiteral
			nil,        // kwdReturn
			reduce(92), // ,, reduce: BooleanLiteral
			nil,        // :
			reduce(92), // lOr, reduce: BooleanLiteral
			reduce(92), // lAnd, reduce: BooleanLiteral
			reduce(92), // lNot, reduce: BooleanLiteral
			reduce(92), // equals, reduce: BooleanLiteral
			reduce(92), // lessOrGreater, reduce: BooleanLiteral
			reduce(92), // or, reduce: BooleanLiteral
			reduce(92), // xor, reduce: BooleanLiteral
			reduce(92), // and, reduce: BooleanLiteral
			reduce(92), // shift, reduce: BooleanLiteral
			reduce(92), // +, reduce: BooleanLiteral
			reduce(92), // -, reduce: BooleanLiteral
			reduce(92), // product, reduce: BooleanLiteral
			reduce(92), // (, reduce: BooleanLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(92), // [, reduce: BooleanLiteral
			nil,        // ]
			reduce(92), // ., reduce: BooleanLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S879
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(93), // }, reduce: IntegerLiteral
			nil,        // kwdReturn
			reduce(93), // ,, reduce: IntegerLiteral
			nil,        // :
			reduce(93), // lOr, reduce: IntegerLiteral
			reduce(93), // lAnd, reduce: IntegerLiteral
			reduce(93), // lNot, reduce: IntegerLiteral
			reduce(93), // equals, reduce: IntegerLiteral
			reduce(93), // lessOrGreater, reduce: IntegerLiteral
			reduce(93), // or, reduce: IntegerLiteral
			reduce(93), // xor, reduce: IntegerLiteral
			reduce(93), // and, reduce: IntegerLiteral
			reduce(93), // shift, reduce: IntegerLiteral
			reduce(93), // +, reduce: IntegerLiteral
			reduce(93), // -, reduce: IntegerLiteral
			reduce(93), // product, reduce: IntegerLiteral
			reduce(93), // (, reduce: IntegerLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(93), // [, reduce: IntegerLiteral
			nil,        // ]
			reduce(93), // ., reduce: IntegerLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S880
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(94), // }, reduce: FloatLiteral
			nil,        // kwdReturn
			reduce(94), // ,, reduce: FloatLiteral
			nil,        // :
			reduce(94), // lOr, reduce: FloatLiteral
			reduce(94), // lAnd, reduce: FloatLiteral
			reduce(94), // lNot, reduce: FloatLiteral
			reduce(94), // equals, reduce: FloatLiteral
			reduce(94), // lessOrGreater, reduce: FloatLiteral
			reduce(94), // or, reduce: FloatLiteral
			reduce(94), // xor, reduce: FloatLiteral
			reduce(94), // and, reduce: FloatLiteral
			reduce(94), // shift, reduce: FloatLiteral
			reduce(94), // +, reduce: FloatLiteral
			reduce(94), // -, reduce: FloatLiteral
			reduce(94), // product, reduce: FloatLiteral
			reduce(94), // (, reduce: FloatLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(94), // [, reduce: FloatLiteral
			nil,        // ]
			reduce(94), // ., reduce: FloatLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S881
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(95), // }, reduce: StringLiteral
			nil,        // kwdReturn
			reduce(95), // ,, reduce: StringLiteral
			nil,        // :
			reduce(95), // lOr, reduce: StringLiteral
			reduce(95), // lAnd, reduce: StringLiteral
			reduce(95), // lNot, reduce: StringLiteral
			reduce(95), // equals, reduce: StringLiteral
			reduce(95), // lessOrGreater, reduce: StringLiteral
			reduce(95), // or, reduce: StringLiteral
			reduce(95), // xor, reduce: StringLiteral
			reduce(95), // and, reduce: StringLiteral
			reduce(95), // shift, reduce: StringLiteral
			reduce(95), // +, reduce: StringLiteral
			reduce(95), // -, reduce: StringLiteral
			reduce(95), // product, reduce: StringLiteral
			reduce(95), // (, reduce: StringLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(95), // [, reduce: StringLiteral
			nil,        // ]
			reduce(95), // ., reduce: StringLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S882
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			shift(1304), // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S883
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			shift(1305), // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S884
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(23), // terminator, reduce: Term1
			nil,        // {
			reduce(23), // }, reduce: Term1
			nil,        // kwdReturn
			nil,        // ,
			reduce(23), // :, reduce: Term1
			reduce(23), // lOr, reduce: Term1
			shift(383), // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S885
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(45), // terminator, reduce: Term11
			nil,        // {
			reduce(45), // }, reduce: Term11
			nil,        // kwdReturn
			nil,        // ,
			reduce(45), // :, reduce: Term11
			reduce(45), // lOr, reduce: Term11
			reduce(45), // lAnd, reduce: Term11
			reduce(45), // lNot, reduce: Term11
			reduce(45), // equals, reduce: Term11
			reduce(45), // lessOrGreater, reduce: Term11
			reduce(45), // or, reduce: Term11
			reduce(45), // xor, reduce: Term11
			reduce(45), // and, reduce: Term11
			reduce(45), // shift, reduce: Term11
			reduce(45), // +, reduce: Term11
			reduce(45), // -, reduce: Term11
			reduce(45), // product, reduce: Term11
			shift(394), // (
			nil,        // )
			nil,        // !
			nil,        // ~
			shift(902), // [
			nil,        // ]
			shift(903), // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S886
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(25), // terminator, reduce: Term2
			nil,        // {
			reduce(25), // }, reduce: Term2
			nil,        // kwdReturn
			nil,        // ,
			reduce(25), // :, reduce: Term2
			reduce(25), // lOr, reduce: Term2
			reduce(25), // lAnd, reduce: Term2
			shift(384), // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S887
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(27), // terminator, reduce: Term3
			nil,        // {
			reduce(27), // }, reduce: Term3
			nil,        // kwdReturn
			nil,        // ,
			reduce(27), // :, reduce: Term3
			reduce(27), // lOr, reduce: Term3
			reduce(27), // lAnd, reduce: Term3
			reduce(27), // lNot, reduce: Term3
			shift(385), // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S888
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(29), // terminator, reduce: Term4
			nil,        // {
			reduce(29), // }, reduce: Term4
			nil,        // kwdReturn
			nil,        // ,
			reduce(29), // :, reduce: Term4
			reduce(29), // lOr, reduce: Term4
			reduce(29), // lAnd, reduce: Term4
			reduce(29), // lNot, reduce: Term4
			reduce(29), // equals, reduce: Term4
			shift(386), // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S889
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(31), // terminator, reduce: Term5
			nil,        // {
			reduce(31), // }, reduce: Term5
			nil,        // kwdReturn
			nil,        // ,
			reduce(31), // :, reduce: Term5
			reduce(31), // lOr, reduce: Term5
			reduce(31), // lAnd, reduce: Term5
			reduce(31), // lNot, reduce: Term5
			reduce(31), // equals, reduce: Term5
			reduce(31), // lessOrGreater, reduce: Term5
			shift(387), // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S890
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(33), // terminator, reduce: Term6
			nil,        // {
			reduce(33), // }, reduce: Term6
			nil,        // kwdReturn
			nil,        // ,
			reduce(33), // :, reduce: Term6
			reduce(33), // lOr, reduce: Term6
			reduce(33), // lAnd, reduce: Term6
			reduce(33), // lNot, reduce: Term6
			reduce(33), // equals, reduce: Term6
			reduce(33), // lessOrGreater, reduce: Term6
			reduce(33), // or, reduce: Term6
			shift(388), // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S891
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(35), // terminator, reduce: Term7
			nil,        // {
			reduce(35), // }, reduce: Term7
			nil,        // kwdReturn
			nil,        // ,
			reduce(35), // :, reduce: Term7
			reduce(35), // lOr, reduce: Term7
			reduce(35), // lAnd, reduce: Term7
			reduce(35), // lNot, reduce: Term7
			reduce(35), // equals, reduce: Term7
			reduce(35), // lessOrGreater, reduce: Term7
			reduce(35), // or, reduce: Term7
			reduce(35), // xor, reduce: Term7
			shift(389), // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S892
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(37), // terminator, reduce: Term8
			nil,        // {
			reduce(37), // }, reduce: Term8
			nil,        // kwdReturn
			nil,        // ,
			reduce(37), // :, reduce: Term8
			reduce(37), // lOr, reduce: Term8
			reduce(37), // lAnd, reduce: Term8
			reduce(37), // lNot, reduce: Term8
			reduce(37), // equals, reduce: Term8
			reduce(37), // lessOrGreater, reduce: Term8
			reduce(37), // or, reduce: Term8
			reduce(37), // xor, reduce: Term8
			reduce(37), // and, reduce: Term8
			shift(390), // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S893
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(39), // terminator, reduce: Term9
			nil,        // {
			reduce(39), // }, reduce: Term9
			nil,        // kwdReturn
			nil,        // ,
			reduce(39), // :, reduce: Term9
			reduce(39), // lOr, reduce: Term9
			reduce(39), // lAnd, reduce: Term9
			reduce(39), // lNot, reduce: Term9
			reduce(39), // equals, reduce: Term9
			reduce(39), // lessOrGreater, reduce: Term9
			reduce(39), // or, reduce: Term9
			reduce(39), // xor, reduce: Term9
			reduce(39), // and, reduce: Term9
			reduce(39), // shift, reduce: Term9
			shift(391), // +
			shift(392), // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S894
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(41), // terminator, reduce: Term10
			nil,        // {
			reduce(41), // }, reduce: Term10
			nil,        // kwdReturn
			nil,        // ,
			reduce(41), // :, reduce: Term10
			reduce(41), // lOr, reduce: Term10
			reduce(41), // lAnd, reduce: Term10
			reduce(41), // lNot, reduce: Term10
			reduce(41), // equals, reduce: Term10
			reduce(41), // lessOrGreater, reduce: Term10
			reduce(41), // or, reduce: Term10
			reduce(41), // xor, reduce: Term10
			reduce(41), // and, reduce: Term10
			reduce(41), // shift, reduce: Term10
			reduce(41), // +, reduce: Term10
			reduce(41), // -, reduce: Term10
			shift(393), // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S895
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(42), // terminator, reduce: Term10
			nil,        // {
			reduce(42), // }, reduce: Term10
			nil,        // kwdReturn
			nil,        // ,
			reduce(42), // :, reduce: Term10
			reduce(42), // lOr, reduce: Term10
			reduce(42), // lAnd, reduce: Term10
			reduce(42), // lNot, reduce: Term10
			reduce(42), // equals, reduce: Term10
			reduce(42), // lessOrGreater, reduce: Term10
			reduce(42), // or, reduce: Term10
			reduce(42), // xor, reduce: Term10
			reduce(42), // and, reduce: Term10
			reduce(42), // shift, reduce: Term10
			reduce(42), // +, reduce: Term10
			reduce(42), // -, reduce: Term10
			shift(393), // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S896
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(44), // terminator, reduce: Term11
			nil,        // {
			reduce(44), // }, reduce: Term11
			nil,        // kwdReturn
			nil,        // ,
			reduce(44), // :, reduce: Term11
			reduce(44), // lOr, reduce: Term11
			reduce(44), // lAnd, reduce: Term11
			reduce(44), // lNot, reduce: Term11
			reduce(44), // equals, reduce: Term11
			reduce(44), // lessOrGreater, reduce: Term11
			reduce(44), // or, reduce: Term11
			reduce(44), // xor, reduce: Term11
			reduce(44), // and, reduce: Term11
			reduce(44), // shift, reduce: Term11
			reduce(44), // +, reduce: Term11
			reduce(44), // -, reduce: Term11
			reduce(44), // product, reduce: Term11
			shift(394), // (
			nil,        // )
			nil,        // !
			nil,        // ~
			shift(902), // [
			nil,        // ]
			shift(903), // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S897
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(956),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1306), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S898
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(59), // terminator, reduce: CallExpression
			nil,        // {
			reduce(59), // }, reduce: CallExpression
			nil,        // kwdReturn
			nil,        // ,
			reduce(59), // :, reduce: CallExpression
			reduce(59), // lOr, reduce: CallExpression
			reduce(59), // lAnd, reduce: CallExpression
			reduce(59), // lNot, reduce: CallExpression
			reduce(59), // equals, reduce: CallExpression
			reduce(59), // lessOrGreater, reduce: CallExpression
			reduce(59), // or, reduce: CallExpression
			reduce(59), // xor, reduce: CallExpression
			reduce(59), // and, reduce: CallExpression
			reduce(59), // shift, reduce: CallExpression
			reduce(59), // +, reduce: CallExpression
			reduce(59), // -, reduce: CallExpression
			reduce(59), // product, reduce: CallExpression
			reduce(59), // (, reduce: CallExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(59), // [, reduce: CallExpression
			nil,        // ]
			reduce(59), // ., reduce: CallExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S899
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1307), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S900
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(61), // terminator, reduce: SelectorExpression
			nil,        // {
			reduce(61), // }, reduce: SelectorExpression
			nil,        // kwdReturn
			nil,        // ,
			reduce(61), // :, reduce: SelectorExpression
			reduce(61), // lOr, reduce: SelectorExpression
			reduce(61), // lAnd, reduce: SelectorExpression
			reduce(61), // lNot, reduce: SelectorExpression
			reduce(61), // equals, reduce: SelectorExpression
			reduce(61), // lessOrGreater, reduce: SelectorExpression
			reduce(61), // or, reduce: SelectorExpression
			reduce(61), // xor, reduce: SelectorExpression
			reduce(61), // and, reduce: SelectorExpression
			reduce(61), // shift, reduce: SelectorExpression
			reduce(61), // +, reduce: SelectorExpression
			reduce(61), // -, reduce: SelectorExpression
			reduce(61), // product, reduce: SelectorExpression
			reduce(61), // (, reduce: SelectorExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(61), // [, reduce: SelectorExpression
			nil,        // ]
			reduce(61), // ., reduce: SelectorExpression
			reduce(61), // assign, reduce: SelectorExpression
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S901
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(47), // terminator, reduce: Term12
			nil,        // {
			reduce(47), // }, reduce: Term12
			nil,        // kwdReturn
			nil,        // ,
			reduce(47), // :, reduce: Term12
			reduce(47), // lOr, reduce: Term12
			reduce(47), // lAnd, reduce: Term12
			reduce(47), // lNot, reduce: Term12
			reduce(47), // equals, reduce: Term12
			reduce(47), // lessOrGreater, reduce: Term12
			reduce(47), // or, reduce: Term12
			reduce(47), // xor, reduce: Term12
			reduce(47), // and, reduce: Term12
			reduce(47), // shift, reduce: Term12
			reduce(47), // +, reduce: Term12
			reduce(47), // -, reduce: Term12
			reduce(47), // product, reduce: Term12
			reduce(47), // (, reduce: Term12
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(47), // [, reduce: Term12
			nil,        // ]
			reduce(47), // ., reduce: Term12
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S902
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(521), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(539), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(546), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(548), // kwdIf
			nil,        // kwdElse
			shift(549), // kwdFor
			shift(551), // identifier
			shift(560), // kwdNull
			shift(561), // boolLit
			shift(562), // intLit
			shift(563), // floatLit
			shift(564), // stringLit
			shift(565), // kwdFn
		},
	},
	actionRow{ // S903
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(404), // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S904
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(63), // terminator, reduce: AssignExpression
			nil,        // {
			reduce(63), // }, reduce: AssignExpression
			nil,        // kwdReturn
			nil,        // ,
			reduce(63), // :, reduce: AssignExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S905
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(64), // terminator, reduce: AssignExpression
			nil,        // {
			reduce(64), // }, reduce: AssignExpression
			nil,        // kwdReturn
			nil,        // ,
			reduce(64), // :, reduce: AssignExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S906
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(99), // terminator, reduce: ArrayLiteral
			nil,        // {
			reduce(99), // }, reduce: ArrayLiteral
			nil,        // kwdReturn
			nil,        // ,
			reduce(99), // :, reduce: ArrayLiteral
			reduce(99), // lOr, reduce: ArrayLiteral
			reduce(99), // lAnd, reduce: ArrayLiteral
			reduce(99), // lNot, reduce: ArrayLiteral
			reduce(99), // equals, reduce: ArrayLiteral
			reduce(99), // lessOrGreater, reduce: ArrayLiteral
			reduce(99), // or, reduce: ArrayLiteral
			reduce(99), // xor, reduce: ArrayLiteral
			reduce(99), // and, reduce: ArrayLiteral
			reduce(99), // shift, reduce: ArrayLiteral
			reduce(99), // +, reduce: ArrayLiteral
			reduce(99), // -, reduce: ArrayLiteral
			reduce(99), // product, reduce: ArrayLiteral
			reduce(99), // (, reduce: ArrayLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(99), // [, reduce: ArrayLiteral
			nil,        // ]
			reduce(99), // ., reduce: ArrayLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S907
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(62), // terminator, reduce: AssignExpression
			nil,        // {
			reduce(62), // }, reduce: AssignExpression
			nil,        // kwdReturn
			nil,        // ,
			reduce(62), // :, reduce: AssignExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S908
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(65),  // terminator, reduce: IfExpression
			nil,         // {
			reduce(65),  // }, reduce: IfExpression
			nil,         // kwdReturn
			nil,         // ,
			reduce(65),  // :, reduce: IfExpression
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			shift(1310), // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S909
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1312), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S910
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1314), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S911
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1316), // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S912
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1317), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S913
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			reduce(9), // terminator, reduce: BlockStatement
			nil,       // {
			reduce(9), // }, reduce: BlockStatement
			nil,       // kwdReturn
			nil,       // ,
			reduce(9), // :, reduce: BlockStatement
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S914
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1318), // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(736),  // kwdIf
			nil,         // kwdElse
			shift(737),  // kwdFor
			shift(739),  // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S915
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(69), // terminator, reduce: ForExpression
			nil,        // {
			reduce(69), // }, reduce: ForExpression
			nil,        // kwdReturn
			nil,        // ,
			reduce(69), // :, reduce: ForExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S916
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(798), // {
			shift(913), // }
			shift(65),  // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(351), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(358), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(360), // kwdIf
			nil,        // kwdElse
			shift(361), // kwdFor
			shift(363), // identifier
			shift(372), // kwdNull
			shift(373), // boolLit
			shift(374), // intLit
			shift(375), // floatLit
			shift(376), // stringLit
			shift(377), // kwdFn
		},
	},
	actionRow{ // S917
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1321), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S918
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(1233), // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1322), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S919
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			shift(1323), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S920
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			shift(1324), // }
			nil,         // kwdReturn
			shift(381),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S921
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(416), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(434), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(441), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(942), // identifier
			shift(455), // kwdNull
			shift(456), // boolLit
			shift(457), // intLit
			shift(458), // floatLit
			shift(459), // stringLit
			shift(460), // kwdFn
		},
	},
	actionRow{ // S922
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(416), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(434), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(441), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(942), // identifier
			shift(455), // kwdNull
			shift(456), // boolLit
			shift(457), // intLit
			shift(458), // floatLit
			shift(459), // stringLit
			shift(460), // kwdFn
		},
	},
	actionRow{ // S923
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(416), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(434), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(441), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(942), // identifier
			shift(455), // kwdNull
			shift(456), // boolLit
			shift(457), // intLit
			shift(458), // floatLit
			shift(459), // stringLit
			shift(460), // kwdFn
		},
	},
	actionRow{ // S924
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(416), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(434), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(441), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(942), // identifier
			shift(455), // kwdNull
			shift(456), // boolLit
			shift(457), // intLit
			shift(458), // floatLit
			shift(459), // stringLit
			shift(460), // kwdFn
		},
	},
	actionRow{ // S925
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(416), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(434), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(441), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(942), // identifier
			shift(455), // kwdNull
			shift(456), // boolLit
			shift(457), // intLit
			shift(458), // floatLit
			shift(459), // stringLit
			shift(460), // kwdFn
		},
	},
	actionRow{ // S926
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(416), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(434), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(441), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(942), // identifier
			shift(455), // kwdNull
			shift(456), // boolLit
			shift(457), // intLit
			shift(458), // floatLit
			shift(459), // stringLit
			shift(460), // kwdFn
		},
	},
	actionRow{ // S927
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(416), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(434), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(441), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(942), // identifier
			shift(455), // kwdNull
			shift(456), // boolLit
			shift(457), // intLit
			shift(458), // floatLit
			shift(459), // stringLit
			shift(460), // kwdFn
		},
	},
	actionRow{ // S928
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(416), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(434), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(441), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(942), // identifier
			shift(455), // kwdNull
			shift(456), // boolLit
			shift(457), // intLit
			shift(458), // floatLit
			shift(459), // stringLit
			shift(460), // kwdFn
		},
	},
	actionRow{ // S929
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(416), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(434), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(441), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(942), // identifier
			shift(455), // kwdNull
			shift(456), // boolLit
			shift(457), // intLit
			shift(458), // floatLit
			shift(459), // stringLit
			shift(460), // kwdFn
		},
	},
	actionRow{ // S930
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(416), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(434), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(441), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(942), // identifier
			shift(455), // kwdNull
			shift(456), // boolLit
			shift(457), // intLit
			shift(458), // floatLit
			shift(459), // stringLit
			shift(460), // kwdFn
		},
	},
	actionRow{ // S931
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(416), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(434), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(441), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(942), // identifier
			shift(455), // kwdNull
			shift(456), // boolLit
			shift(457), // intLit
			shift(458), // floatLit
			shift(459), // stringLit
			shift(460), // kwdFn
		},
	},
	actionRow{ // S932
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(416), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(434), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(441), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(942), // identifier
			shift(455), // kwdNull
			shift(456), // boolLit
			shift(457), // intLit
			shift(458), // floatLit
			shift(459), // stringLit
			shift(460), // kwdFn
		},
	},
	actionRow{ // S933
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(474),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(493),  // (
			shift(1339), // )
			shift(31),   // !
			shift(32),   // ~
			shift(501),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(503),  // kwdIf
			nil,         // kwdElse
			shift(504),  // kwdFor
			shift(506),  // identifier
			shift(515),  // kwdNull
			shift(516),  // boolLit
			shift(517),  // intLit
			shift(518),  // floatLit
			shift(519),  // stringLit
			shift(520),  // kwdFn
		},
	},
	actionRow{ // S934
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(521), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(539), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(546), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(548), // kwdIf
			nil,        // kwdElse
			shift(549), // kwdFor
			shift(551), // identifier
			shift(560), // kwdNull
			shift(561), // boolLit
			shift(562), // intLit
			shift(563), // floatLit
			shift(564), // stringLit
			shift(565), // kwdFn
		},
	},
	actionRow{ // S935
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(446), // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S936
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1342), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S937
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			shift(933),  // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1343), // [
			nil,         // ]
			shift(1344), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S938
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(49), // :, reduce: PrefixExpression
			reduce(49), // lOr, reduce: PrefixExpression
			reduce(49), // lAnd, reduce: PrefixExpression
			reduce(49), // lNot, reduce: PrefixExpression
			reduce(49), // equals, reduce: PrefixExpression
			reduce(49), // lessOrGreater, reduce: PrefixExpression
			reduce(49), // or, reduce: PrefixExpression
			reduce(49), // xor, reduce: PrefixExpression
			reduce(49), // and, reduce: PrefixExpression
			reduce(49), // shift, reduce: PrefixExpression
			reduce(49), // +, reduce: PrefixExpression
			reduce(49), // -, reduce: PrefixExpression
			reduce(49), // product, reduce: PrefixExpression
			reduce(48), // (, reduce: PrefixExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(48), // [, reduce: PrefixExpression
			nil,        // ]
			reduce(48), // ., reduce: PrefixExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S939
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(55), // :, reduce: PrimaryExpr
			reduce(55), // lOr, reduce: PrimaryExpr
			reduce(55), // lAnd, reduce: PrimaryExpr
			reduce(55), // lNot, reduce: PrimaryExpr
			reduce(55), // equals, reduce: PrimaryExpr
			reduce(55), // lessOrGreater, reduce: PrimaryExpr
			reduce(55), // or, reduce: PrimaryExpr
			reduce(55), // xor, reduce: PrimaryExpr
			reduce(55), // and, reduce: PrimaryExpr
			reduce(55), // shift, reduce: PrimaryExpr
			reduce(55), // +, reduce: PrimaryExpr
			reduce(55), // -, reduce: PrimaryExpr
			reduce(55), // product, reduce: PrimaryExpr
			reduce(55), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(55), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(55), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S940
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(57), // :, reduce: PrimaryExpr
			reduce(57), // lOr, reduce: PrimaryExpr
			reduce(57), // lAnd, reduce: PrimaryExpr
			reduce(57), // lNot, reduce: PrimaryExpr
			reduce(57), // equals, reduce: PrimaryExpr
			reduce(57), // lessOrGreater, reduce: PrimaryExpr
			reduce(57), // or, reduce: PrimaryExpr
			reduce(57), // xor, reduce: PrimaryExpr
			reduce(57), // and, reduce: PrimaryExpr
			reduce(57), // shift, reduce: PrimaryExpr
			reduce(57), // +, reduce: PrimaryExpr
			reduce(57), // -, reduce: PrimaryExpr
			reduce(57), // product, reduce: PrimaryExpr
			reduce(57), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(57), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(57), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S941
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(79), // :, reduce: Operand
			reduce(79), // lOr, reduce: Operand
			reduce(79), // lAnd, reduce: Operand
			reduce(79), // lNot, reduce: Operand
			reduce(79), // equals, reduce: Operand
			reduce(79), // lessOrGreater, reduce: Operand
			reduce(79), // or, reduce: Operand
			reduce(79), // xor, reduce: Operand
			reduce(79), // and, reduce: Operand
			reduce(79), // shift, reduce: Operand
			reduce(79), // +, reduce: Operand
			reduce(79), // -, reduce: Operand
			reduce(79), // product, reduce: Operand
			reduce(79), // (, reduce: Operand
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(79), // [, reduce: Operand
			nil,        // ]
			reduce(79), // ., reduce: Operand
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S942
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(82), // :, reduce: Identifier
			reduce(82), // lOr, reduce: Identifier
			reduce(82), // lAnd, reduce: Identifier
			reduce(82), // lNot, reduce: Identifier
			reduce(82), // equals, reduce: Identifier
			reduce(82), // lessOrGreater, reduce: Identifier
			reduce(82), // or, reduce: Identifier
			reduce(82), // xor, reduce: Identifier
			reduce(82), // and, reduce: Identifier
			reduce(82), // shift, reduce: Identifier
			reduce(82), // +, reduce: Identifier
			reduce(82), // -, reduce: Identifier
			reduce(82), // product, reduce: Identifier
			reduce(82), // (, reduce: Identifier
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(82), // [, reduce: Identifier
			nil,        // ]
			reduce(82), // ., reduce: Identifier
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S943
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(416), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(434), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(441), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(443), // kwdIf
			nil,        // kwdElse
			shift(444), // kwdFor
			shift(446), // identifier
			shift(455), // kwdNull
			shift(456), // boolLit
			shift(457), // intLit
			shift(458), // floatLit
			shift(459), // stringLit
			shift(460), // kwdFn
		},
	},
	actionRow{ // S944
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(416), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(434), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(441), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(443), // kwdIf
			nil,        // kwdElse
			shift(444), // kwdFor
			shift(446), // identifier
			shift(455), // kwdNull
			shift(456), // boolLit
			shift(457), // intLit
			shift(458), // floatLit
			shift(459), // stringLit
			shift(460), // kwdFn
		},
	},
	actionRow{ // S945
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(635),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1347), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S946
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(98), // :, reduce: ArrayLiteral
			reduce(98), // lOr, reduce: ArrayLiteral
			reduce(98), // lAnd, reduce: ArrayLiteral
			reduce(98), // lNot, reduce: ArrayLiteral
			reduce(98), // equals, reduce: ArrayLiteral
			reduce(98), // lessOrGreater, reduce: ArrayLiteral
			reduce(98), // or, reduce: ArrayLiteral
			reduce(98), // xor, reduce: ArrayLiteral
			reduce(98), // and, reduce: ArrayLiteral
			reduce(98), // shift, reduce: ArrayLiteral
			reduce(98), // +, reduce: ArrayLiteral
			reduce(98), // -, reduce: ArrayLiteral
			reduce(98), // product, reduce: ArrayLiteral
			reduce(98), // (, reduce: ArrayLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(98), // [, reduce: ArrayLiteral
			nil,        // ]
			reduce(98), // ., reduce: ArrayLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S947
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(416), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(434), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(441), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(443), // kwdIf
			nil,        // kwdElse
			shift(444), // kwdFor
			shift(446), // identifier
			shift(455), // kwdNull
			shift(456), // boolLit
			shift(457), // intLit
			shift(458), // floatLit
			shift(459), // stringLit
			shift(460), // kwdFn
		},
	},
	actionRow{ // S948
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1350), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S949
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1351), // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(736),  // kwdIf
			nil,         // kwdElse
			shift(737),  // kwdFor
			shift(739),  // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S950
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(68), // :, reduce: ForExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S951
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(63),   // {
			shift(1354), // }
			shift(65),   // kwdReturn
			shift(754),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(85),   // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(92),   // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(94),   // kwdIf
			nil,         // kwdElse
			shift(95),   // kwdFor
			shift(97),   // identifier
			shift(106),  // kwdNull
			shift(107),  // boolLit
			shift(108),  // intLit
			shift(109),  // floatLit
			shift(110),  // stringLit
			shift(111),  // kwdFn
		},
	},
	actionRow{ // S952
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1355), // terminator
			shift(1357), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S953
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1358), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(796),  // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S954
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			shift(1360), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S955
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			shift(1361), // }
			nil,         // kwdReturn
			shift(381),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S956
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(474), // {
			nil,        // }
			nil,        // kwdReturn
			reduce(15), // ,, reduce: ExpressionList
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(493), // (
			reduce(15), // ), reduce: ExpressionList
			shift(31),  // !
			shift(32),  // ~
			shift(501), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(503), // kwdIf
			nil,        // kwdElse
			shift(504), // kwdFor
			shift(506), // identifier
			shift(515), // kwdNull
			shift(516), // boolLit
			shift(517), // intLit
			shift(518), // floatLit
			shift(519), // stringLit
			shift(520), // kwdFn
		},
	},
	actionRow{ // S957
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(60), // $, reduce: CallExpression
			reduce(60), // terminator, reduce: CallExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(60), // lOr, reduce: CallExpression
			reduce(60), // lAnd, reduce: CallExpression
			reduce(60), // lNot, reduce: CallExpression
			reduce(60), // equals, reduce: CallExpression
			reduce(60), // lessOrGreater, reduce: CallExpression
			reduce(60), // or, reduce: CallExpression
			reduce(60), // xor, reduce: CallExpression
			reduce(60), // and, reduce: CallExpression
			reduce(60), // shift, reduce: CallExpression
			reduce(60), // +, reduce: CallExpression
			reduce(60), // -, reduce: CallExpression
			reduce(60), // product, reduce: CallExpression
			reduce(60), // (, reduce: CallExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(60), // [, reduce: CallExpression
			nil,        // ]
			reduce(60), // ., reduce: CallExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S958
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(474), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(493), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(501), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(979), // identifier
			shift(515), // kwdNull
			shift(516), // boolLit
			shift(517), // intLit
			shift(518), // floatLit
			shift(519), // stringLit
			shift(520), // kwdFn
		},
	},
	actionRow{ // S959
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(474), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(493), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(501), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(979), // identifier
			shift(515), // kwdNull
			shift(516), // boolLit
			shift(517), // intLit
			shift(518), // floatLit
			shift(519), // stringLit
			shift(520), // kwdFn
		},
	},
	actionRow{ // S960
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(474), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(493), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(501), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(979), // identifier
			shift(515), // kwdNull
			shift(516), // boolLit
			shift(517), // intLit
			shift(518), // floatLit
			shift(519), // stringLit
			shift(520), // kwdFn
		},
	},
	actionRow{ // S961
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(474), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(493), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(501), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(979), // identifier
			shift(515), // kwdNull
			shift(516), // boolLit
			shift(517), // intLit
			shift(518), // floatLit
			shift(519), // stringLit
			shift(520), // kwdFn
		},
	},
	actionRow{ // S962
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(474), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(493), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(501), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(979), // identifier
			shift(515), // kwdNull
			shift(516), // boolLit
			shift(517), // intLit
			shift(518), // floatLit
			shift(519), // stringLit
			shift(520), // kwdFn
		},
	},
	actionRow{ // S963
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(474), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(493), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(501), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(979), // identifier
			shift(515), // kwdNull
			shift(516), // boolLit
			shift(517), // intLit
			shift(518), // floatLit
			shift(519), // stringLit
			shift(520), // kwdFn
		},
	},
	actionRow{ // S964
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(474), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(493), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(501), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(979), // identifier
			shift(515), // kwdNull
			shift(516), // boolLit
			shift(517), // intLit
			shift(518), // floatLit
			shift(519), // stringLit
			shift(520), // kwdFn
		},
	},
	actionRow{ // S965
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(474), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(493), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(501), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(979), // identifier
			shift(515), // kwdNull
			shift(516), // boolLit
			shift(517), // intLit
			shift(518), // floatLit
			shift(519), // stringLit
			shift(520), // kwdFn
		},
	},
	actionRow{ // S966
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(474), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(493), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(501), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(979), // identifier
			shift(515), // kwdNull
			shift(516), // boolLit
			shift(517), // intLit
			shift(518), // floatLit
			shift(519), // stringLit
			shift(520), // kwdFn
		},
	},
	actionRow{ // S967
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(474), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(493), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(501), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(979), // identifier
			shift(515), // kwdNull
			shift(516), // boolLit
			shift(517), // intLit
			shift(518), // floatLit
			shift(519), // stringLit
			shift(520), // kwdFn
		},
	},
	actionRow{ // S968
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(474), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(493), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(501), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(979), // identifier
			shift(515), // kwdNull
			shift(516), // boolLit
			shift(517), // intLit
			shift(518), // floatLit
			shift(519), // stringLit
			shift(520), // kwdFn
		},
	},
	actionRow{ // S969
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(474), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(493), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(501), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(979), // identifier
			shift(515), // kwdNull
			shift(516), // boolLit
			shift(517), // intLit
			shift(518), // floatLit
			shift(519), // stringLit
			shift(520), // kwdFn
		},
	},
	actionRow{ // S970
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(474),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(493),  // (
			shift(1377), // )
			shift(31),   // !
			shift(32),   // ~
			shift(501),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(503),  // kwdIf
			nil,         // kwdElse
			shift(504),  // kwdFor
			shift(506),  // identifier
			shift(515),  // kwdNull
			shift(516),  // boolLit
			shift(517),  // intLit
			shift(518),  // floatLit
			shift(519),  // stringLit
			shift(520),  // kwdFn
		},
	},
	actionRow{ // S971
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(521), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(539), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(546), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(548), // kwdIf
			nil,        // kwdElse
			shift(549), // kwdFor
			shift(551), // identifier
			shift(560), // kwdNull
			shift(561), // boolLit
			shift(562), // intLit
			shift(563), // floatLit
			shift(564), // stringLit
			shift(565), // kwdFn
		},
	},
	actionRow{ // S972
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(506), // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S973
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1380), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S974
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			shift(970),  // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1381), // [
			nil,         // ]
			shift(1382), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S975
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(49), // ,, reduce: PrefixExpression
			nil,        // :
			reduce(49), // lOr, reduce: PrefixExpression
			reduce(49), // lAnd, reduce: PrefixExpression
			reduce(49), // lNot, reduce: PrefixExpression
			reduce(49), // equals, reduce: PrefixExpression
			reduce(49), // lessOrGreater, reduce: PrefixExpression
			reduce(49), // or, reduce: PrefixExpression
			reduce(49), // xor, reduce: PrefixExpression
			reduce(49), // and, reduce: PrefixExpression
			reduce(49), // shift, reduce: PrefixExpression
			reduce(49), // +, reduce: PrefixExpression
			reduce(49), // -, reduce: PrefixExpression
			reduce(49), // product, reduce: PrefixExpression
			reduce(48), // (, reduce: PrefixExpression
			reduce(49), // ), reduce: PrefixExpression
			nil,        // !
			nil,        // ~
			reduce(48), // [, reduce: PrefixExpression
			nil,        // ]
			reduce(48), // ., reduce: PrefixExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S976
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(55), // ,, reduce: PrimaryExpr
			nil,        // :
			reduce(55), // lOr, reduce: PrimaryExpr
			reduce(55), // lAnd, reduce: PrimaryExpr
			reduce(55), // lNot, reduce: PrimaryExpr
			reduce(55), // equals, reduce: PrimaryExpr
			reduce(55), // lessOrGreater, reduce: PrimaryExpr
			reduce(55), // or, reduce: PrimaryExpr
			reduce(55), // xor, reduce: PrimaryExpr
			reduce(55), // and, reduce: PrimaryExpr
			reduce(55), // shift, reduce: PrimaryExpr
			reduce(55), // +, reduce: PrimaryExpr
			reduce(55), // -, reduce: PrimaryExpr
			reduce(55), // product, reduce: PrimaryExpr
			reduce(55), // (, reduce: PrimaryExpr
			reduce(55), // ), reduce: PrimaryExpr
			nil,        // !
			nil,        // ~
			reduce(55), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(55), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S977
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(57), // ,, reduce: PrimaryExpr
			nil,        // :
			reduce(57), // lOr, reduce: PrimaryExpr
			reduce(57), // lAnd, reduce: PrimaryExpr
			reduce(57), // lNot, reduce: PrimaryExpr
			reduce(57), // equals, reduce: PrimaryExpr
			reduce(57), // lessOrGreater, reduce: PrimaryExpr
			reduce(57), // or, reduce: PrimaryExpr
			reduce(57), // xor, reduce: PrimaryExpr
			reduce(57), // and, reduce: PrimaryExpr
			reduce(57), // shift, reduce: PrimaryExpr
			reduce(57), // +, reduce: PrimaryExpr
			reduce(57), // -, reduce: PrimaryExpr
			reduce(57), // product, reduce: PrimaryExpr
			reduce(57), // (, reduce: PrimaryExpr
			reduce(57), // ), reduce: PrimaryExpr
			nil,        // !
			nil,        // ~
			reduce(57), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(57), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S978
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(79), // ,, reduce: Operand
			nil,        // :
			reduce(79), // lOr, reduce: Operand
			reduce(79), // lAnd, reduce: Operand
			reduce(79), // lNot, reduce: Operand
			reduce(79), // equals, reduce: Operand
			reduce(79), // lessOrGreater, reduce: Operand
			reduce(79), // or, reduce: Operand
			reduce(79), // xor, reduce: Operand
			reduce(79), // and, reduce: Operand
			reduce(79), // shift, reduce: Operand
			reduce(79), // +, reduce: Operand
			reduce(79), // -, reduce: Operand
			reduce(79), // product, reduce: Operand
			reduce(79), // (, reduce: Operand
			reduce(79), // ), reduce: Operand
			nil,        // !
			nil,        // ~
			reduce(79), // [, reduce: Operand
			nil,        // ]
			reduce(79), // ., reduce: Operand
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S979
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(82), // ,, reduce: Identifier
			nil,        // :
			reduce(82), // lOr, reduce: Identifier
			reduce(82), // lAnd, reduce: Identifier
			reduce(82), // lNot, reduce: Identifier
			reduce(82), // equals, reduce: Identifier
			reduce(82), // lessOrGreater, reduce: Identifier
			reduce(82), // or, reduce: Identifier
			reduce(82), // xor, reduce: Identifier
			reduce(82), // and, reduce: Identifier
			reduce(82), // shift, reduce: Identifier
			reduce(82), // +, reduce: Identifier
			reduce(82), // -, reduce: Identifier
			reduce(82), // product, reduce: Identifier
			reduce(82), // (, reduce: Identifier
			reduce(82), // ), reduce: Identifier
			nil,        // !
			nil,        // ~
			reduce(82), // [, reduce: Identifier
			nil,        // ]
			reduce(82), // ., reduce: Identifier
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S980
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(474), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(493), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(501), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(503), // kwdIf
			nil,        // kwdElse
			shift(504), // kwdFor
			shift(506), // identifier
			shift(515), // kwdNull
			shift(516), // boolLit
			shift(517), // intLit
			shift(518), // floatLit
			shift(519), // stringLit
			shift(520), // kwdFn
		},
	},
	actionRow{ // S981
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(474), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(493), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(501), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(503), // kwdIf
			nil,        // kwdElse
			shift(504), // kwdFor
			shift(506), // identifier
			shift(515), // kwdNull
			shift(516), // boolLit
			shift(517), // intLit
			shift(518), // floatLit
			shift(519), // stringLit
			shift(520), // kwdFn
		},
	},
	actionRow{ // S982
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(635),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1385), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S983
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(98), // ,, reduce: ArrayLiteral
			nil,        // :
			reduce(98), // lOr, reduce: ArrayLiteral
			reduce(98), // lAnd, reduce: ArrayLiteral
			reduce(98), // lNot, reduce: ArrayLiteral
			reduce(98), // equals, reduce: ArrayLiteral
			reduce(98), // lessOrGreater, reduce: ArrayLiteral
			reduce(98), // or, reduce: ArrayLiteral
			reduce(98), // xor, reduce: ArrayLiteral
			reduce(98), // and, reduce: ArrayLiteral
			reduce(98), // shift, reduce: ArrayLiteral
			reduce(98), // +, reduce: ArrayLiteral
			reduce(98), // -, reduce: ArrayLiteral
			reduce(98), // product, reduce: ArrayLiteral
			reduce(98), // (, reduce: ArrayLiteral
			reduce(98), // ), reduce: ArrayLiteral
			nil,        // !
			nil,        // ~
			reduce(98), // [, reduce: ArrayLiteral
			nil,        // ]
			reduce(98), // ., reduce: ArrayLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S984
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(474), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(493), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(501), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(503), // kwdIf
			nil,        // kwdElse
			shift(504), // kwdFor
			shift(506), // identifier
			shift(515), // kwdNull
			shift(516), // boolLit
			shift(517), // intLit
			shift(518), // floatLit
			shift(519), // stringLit
			shift(520), // kwdFn
		},
	},
	actionRow{ // S985
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1388), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S986
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1389), // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(736),  // kwdIf
			nil,         // kwdElse
			shift(737),  // kwdFor
			shift(739),  // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S987
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(68), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(68), // ), reduce: ForExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S988
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(63),   // {
			shift(1392), // }
			shift(65),   // kwdReturn
			shift(754),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(85),   // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(92),   // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(94),   // kwdIf
			nil,         // kwdElse
			shift(95),   // kwdFor
			shift(97),   // identifier
			shift(106),  // kwdNull
			shift(107),  // boolLit
			shift(108),  // intLit
			shift(109),  // floatLit
			shift(110),  // stringLit
			shift(111),  // kwdFn
		},
	},
	actionRow{ // S989
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1393), // terminator
			shift(1395), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S990
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1396), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(796),  // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S991
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			shift(1398), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S992
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			shift(1399), // }
			nil,         // kwdReturn
			shift(381),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S993
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(58), // $, reduce: IndexExpression
			reduce(58), // terminator, reduce: IndexExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(58), // lOr, reduce: IndexExpression
			reduce(58), // lAnd, reduce: IndexExpression
			reduce(58), // lNot, reduce: IndexExpression
			reduce(58), // equals, reduce: IndexExpression
			reduce(58), // lessOrGreater, reduce: IndexExpression
			reduce(58), // or, reduce: IndexExpression
			reduce(58), // xor, reduce: IndexExpression
			reduce(58), // and, reduce: IndexExpression
			reduce(58), // shift, reduce: IndexExpression
			reduce(58), // +, reduce: IndexExpression
			reduce(58), // -, reduce: IndexExpression
			reduce(58), // product, reduce: IndexExpression
			reduce(58), // (, reduce: IndexExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(58), // [, reduce: IndexExpression
			nil,        // ]
			reduce(58), // ., reduce: IndexExpression
			reduce(58), // assign, reduce: IndexExpression
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S994
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(521),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(539),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(546),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1015), // identifier
			shift(560),  // kwdNull
			shift(561),  // boolLit
			shift(562),  // intLit
			shift(563),  // floatLit
			shift(564),  // stringLit
			shift(565),  // kwdFn
		},
	},
	actionRow{ // S995
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(521),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(539),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(546),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1015), // identifier
			shift(560),  // kwdNull
			shift(561),  // boolLit
			shift(562),  // intLit
			shift(563),  // floatLit
			shift(564),  // stringLit
			shift(565),  // kwdFn
		},
	},
	actionRow{ // S996
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(521),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(539),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(546),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1015), // identifier
			shift(560),  // kwdNull
			shift(561),  // boolLit
			shift(562),  // intLit
			shift(563),  // floatLit
			shift(564),  // stringLit
			shift(565),  // kwdFn
		},
	},
	actionRow{ // S997
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(521),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(539),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(546),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1015), // identifier
			shift(560),  // kwdNull
			shift(561),  // boolLit
			shift(562),  // intLit
			shift(563),  // floatLit
			shift(564),  // stringLit
			shift(565),  // kwdFn
		},
	},
	actionRow{ // S998
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(521),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(539),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(546),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1015), // identifier
			shift(560),  // kwdNull
			shift(561),  // boolLit
			shift(562),  // intLit
			shift(563),  // floatLit
			shift(564),  // stringLit
			shift(565),  // kwdFn
		},
	},
	actionRow{ // S999
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(521),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(539),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(546),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1015), // identifier
			shift(560),  // kwdNull
			shift(561),  // boolLit
			shift(562),  // intLit
			shift(563),  // floatLit
			shift(564),  // stringLit
			shift(565),  // kwdFn
		},
	},
	actionRow{ // S1000
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(521),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(539),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(546),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1015), // identifier
			shift(560),  // kwdNull
			shift(561),  // boolLit
			shift(562),  // intLit
			shift(563),  // floatLit
			shift(564),  // stringLit
			shift(565),  // kwdFn
		},
	},
	actionRow{ // S1001
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(521),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(539),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(546),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1015), // identifier
			shift(560),  // kwdNull
			shift(561),  // boolLit
			shift(562),  // intLit
			shift(563),  // floatLit
			shift(564),  // stringLit
			shift(565),  // kwdFn
		},
	},
	actionRow{ // S1002
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(521),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(539),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(546),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1015), // identifier
			shift(560),  // kwdNull
			shift(561),  // boolLit
			shift(562),  // intLit
			shift(563),  // floatLit
			shift(564),  // stringLit
			shift(565),  // kwdFn
		},
	},
	actionRow{ // S1003
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(521),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(539),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(546),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1015), // identifier
			shift(560),  // kwdNull
			shift(561),  // boolLit
			shift(562),  // intLit
			shift(563),  // floatLit
			shift(564),  // stringLit
			shift(565),  // kwdFn
		},
	},
	actionRow{ // S1004
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(521),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(539),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(546),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1015), // identifier
			shift(560),  // kwdNull
			shift(561),  // boolLit
			shift(562),  // intLit
			shift(563),  // floatLit
			shift(564),  // stringLit
			shift(565),  // kwdFn
		},
	},
	actionRow{ // S1005
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(521),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(539),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(546),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1015), // identifier
			shift(560),  // kwdNull
			shift(561),  // boolLit
			shift(562),  // intLit
			shift(563),  // floatLit
			shift(564),  // stringLit
			shift(565),  // kwdFn
		},
	},
	actionRow{ // S1006
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(474),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(493),  // (
			shift(1414), // )
			shift(31),   // !
			shift(32),   // ~
			shift(501),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(503),  // kwdIf
			nil,         // kwdElse
			shift(504),  // kwdFor
			shift(506),  // identifier
			shift(515),  // kwdNull
			shift(516),  // boolLit
			shift(517),  // intLit
			shift(518),  // floatLit
			shift(519),  // stringLit
			shift(520),  // kwdFn
		},
	},
	actionRow{ // S1007
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(521), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(539), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(546), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(548), // kwdIf
			nil,        // kwdElse
			shift(549), // kwdFor
			shift(551), // identifier
			shift(560), // kwdNull
			shift(561), // boolLit
			shift(562), // intLit
			shift(563), // floatLit
			shift(564), // stringLit
			shift(565), // kwdFn
		},
	},
	actionRow{ // S1008
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(551), // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1009
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1417), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1010
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			shift(1006), // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1418), // [
			nil,         // ]
			shift(1419), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1011
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(49), // lOr, reduce: PrefixExpression
			reduce(49), // lAnd, reduce: PrefixExpression
			reduce(49), // lNot, reduce: PrefixExpression
			reduce(49), // equals, reduce: PrefixExpression
			reduce(49), // lessOrGreater, reduce: PrefixExpression
			reduce(49), // or, reduce: PrefixExpression
			reduce(49), // xor, reduce: PrefixExpression
			reduce(49), // and, reduce: PrefixExpression
			reduce(49), // shift, reduce: PrefixExpression
			reduce(49), // +, reduce: PrefixExpression
			reduce(49), // -, reduce: PrefixExpression
			reduce(49), // product, reduce: PrefixExpression
			reduce(48), // (, reduce: PrefixExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(48), // [, reduce: PrefixExpression
			reduce(49), // ], reduce: PrefixExpression
			reduce(48), // ., reduce: PrefixExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1012
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(55), // lOr, reduce: PrimaryExpr
			reduce(55), // lAnd, reduce: PrimaryExpr
			reduce(55), // lNot, reduce: PrimaryExpr
			reduce(55), // equals, reduce: PrimaryExpr
			reduce(55), // lessOrGreater, reduce: PrimaryExpr
			reduce(55), // or, reduce: PrimaryExpr
			reduce(55), // xor, reduce: PrimaryExpr
			reduce(55), // and, reduce: PrimaryExpr
			reduce(55), // shift, reduce: PrimaryExpr
			reduce(55), // +, reduce: PrimaryExpr
			reduce(55), // -, reduce: PrimaryExpr
			reduce(55), // product, reduce: PrimaryExpr
			reduce(55), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(55), // [, reduce: PrimaryExpr
			reduce(55), // ], reduce: PrimaryExpr
			reduce(55), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1013
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(57), // lOr, reduce: PrimaryExpr
			reduce(57), // lAnd, reduce: PrimaryExpr
			reduce(57), // lNot, reduce: PrimaryExpr
			reduce(57), // equals, reduce: PrimaryExpr
			reduce(57), // lessOrGreater, reduce: PrimaryExpr
			reduce(57), // or, reduce: PrimaryExpr
			reduce(57), // xor, reduce: PrimaryExpr
			reduce(57), // and, reduce: PrimaryExpr
			reduce(57), // shift, reduce: PrimaryExpr
			reduce(57), // +, reduce: PrimaryExpr
			reduce(57), // -, reduce: PrimaryExpr
			reduce(57), // product, reduce: PrimaryExpr
			reduce(57), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(57), // [, reduce: PrimaryExpr
			reduce(57), // ], reduce: PrimaryExpr
			reduce(57), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1014
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(79), // lOr, reduce: Operand
			reduce(79), // lAnd, reduce: Operand
			reduce(79), // lNot, reduce: Operand
			reduce(79), // equals, reduce: Operand
			reduce(79), // lessOrGreater, reduce: Operand
			reduce(79), // or, reduce: Operand
			reduce(79), // xor, reduce: Operand
			reduce(79), // and, reduce: Operand
			reduce(79), // shift, reduce: Operand
			reduce(79), // +, reduce: Operand
			reduce(79), // -, reduce: Operand
			reduce(79), // product, reduce: Operand
			reduce(79), // (, reduce: Operand
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(79), // [, reduce: Operand
			reduce(79), // ], reduce: Operand
			reduce(79), // ., reduce: Operand
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1015
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(82), // lOr, reduce: Identifier
			reduce(82), // lAnd, reduce: Identifier
			reduce(82), // lNot, reduce: Identifier
			reduce(82), // equals, reduce: Identifier
			reduce(82), // lessOrGreater, reduce: Identifier
			reduce(82), // or, reduce: Identifier
			reduce(82), // xor, reduce: Identifier
			reduce(82), // and, reduce: Identifier
			reduce(82), // shift, reduce: Identifier
			reduce(82), // +, reduce: Identifier
			reduce(82), // -, reduce: Identifier
			reduce(82), // product, reduce: Identifier
			reduce(82), // (, reduce: Identifier
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(82), // [, reduce: Identifier
			reduce(82), // ], reduce: Identifier
			reduce(82), // ., reduce: Identifier
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1016
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(521), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(539), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(546), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(548), // kwdIf
			nil,        // kwdElse
			shift(549), // kwdFor
			shift(551), // identifier
			shift(560), // kwdNull
			shift(561), // boolLit
			shift(562), // intLit
			shift(563), // floatLit
			shift(564), // stringLit
			shift(565), // kwdFn
		},
	},
	actionRow{ // S1017
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(521), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(539), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(546), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(548), // kwdIf
			nil,        // kwdElse
			shift(549), // kwdFor
			shift(551), // identifier
			shift(560), // kwdNull
			shift(561), // boolLit
			shift(562), // intLit
			shift(563), // floatLit
			shift(564), // stringLit
			shift(565), // kwdFn
		},
	},
	actionRow{ // S1018
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(635),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1422), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1019
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(98), // lOr, reduce: ArrayLiteral
			reduce(98), // lAnd, reduce: ArrayLiteral
			reduce(98), // lNot, reduce: ArrayLiteral
			reduce(98), // equals, reduce: ArrayLiteral
			reduce(98), // lessOrGreater, reduce: ArrayLiteral
			reduce(98), // or, reduce: ArrayLiteral
			reduce(98), // xor, reduce: ArrayLiteral
			reduce(98), // and, reduce: ArrayLiteral
			reduce(98), // shift, reduce: ArrayLiteral
			reduce(98), // +, reduce: ArrayLiteral
			reduce(98), // -, reduce: ArrayLiteral
			reduce(98), // product, reduce: ArrayLiteral
			reduce(98), // (, reduce: ArrayLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(98), // [, reduce: ArrayLiteral
			reduce(98), // ], reduce: ArrayLiteral
			reduce(98), // ., reduce: ArrayLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1020
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(521), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(539), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(546), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(548), // kwdIf
			nil,        // kwdElse
			shift(549), // kwdFor
			shift(551), // identifier
			shift(560), // kwdNull
			shift(561), // boolLit
			shift(562), // intLit
			shift(563), // floatLit
			shift(564), // stringLit
			shift(565), // kwdFn
		},
	},
	actionRow{ // S1021
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1425), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1022
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1426), // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(736),  // kwdIf
			nil,         // kwdElse
			shift(737),  // kwdFor
			shift(739),  // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S1023
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(68), // ], reduce: ForExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1024
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(63),   // {
			shift(1429), // }
			shift(65),   // kwdReturn
			shift(754),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(85),   // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(92),   // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(94),   // kwdIf
			nil,         // kwdElse
			shift(95),   // kwdFor
			shift(97),   // identifier
			shift(106),  // kwdNull
			shift(107),  // boolLit
			shift(108),  // intLit
			shift(109),  // floatLit
			shift(110),  // stringLit
			shift(111),  // kwdFn
		},
	},
	actionRow{ // S1025
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1430), // terminator
			shift(1432), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1026
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1433), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(796),  // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1027
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(100), // lOr, reduce: HashLiteral
			reduce(100), // lAnd, reduce: HashLiteral
			reduce(100), // lNot, reduce: HashLiteral
			reduce(100), // equals, reduce: HashLiteral
			reduce(100), // lessOrGreater, reduce: HashLiteral
			reduce(100), // or, reduce: HashLiteral
			reduce(100), // xor, reduce: HashLiteral
			reduce(100), // and, reduce: HashLiteral
			reduce(100), // shift, reduce: HashLiteral
			reduce(100), // +, reduce: HashLiteral
			reduce(100), // -, reduce: HashLiteral
			reduce(100), // product, reduce: HashLiteral
			reduce(100), // (, reduce: HashLiteral
			reduce(100), // ), reduce: HashLiteral
			nil,         // !
			nil,         // ~
			reduce(100), // [, reduce: HashLiteral
			nil,         // ]
			reduce(100), // ., reduce: HashLiteral
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1028
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(101), // lOr, reduce: HashLiteral
			reduce(101), // lAnd, reduce: HashLiteral
			reduce(101), // lNot, reduce: HashLiteral
			reduce(101), // equals, reduce: HashLiteral
			reduce(101), // lessOrGreater, reduce: HashLiteral
			reduce(101), // or, reduce: HashLiteral
			reduce(101), // xor, reduce: HashLiteral
			reduce(101), // and, reduce: HashLiteral
			reduce(101), // shift, reduce: HashLiteral
			reduce(101), // +, reduce: HashLiteral
			reduce(101), // -, reduce: HashLiteral
			reduce(101), // product, reduce: HashLiteral
			reduce(101), // (, reduce: HashLiteral
			reduce(101), // ), reduce: HashLiteral
			nil,         // !
			nil,         // ~
			reduce(101), // [, reduce: HashLiteral
			nil,         // ]
			reduce(101), // ., reduce: HashLiteral
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1029
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(23), // lOr, reduce: Term1
			shift(571), // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(23), // ), reduce: Term1
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1030
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(45),  // lOr, reduce: Term11
			reduce(45),  // lAnd, reduce: Term11
			reduce(45),  // lNot, reduce: Term11
			reduce(45),  // equals, reduce: Term11
			reduce(45),  // lessOrGreater, reduce: Term11
			reduce(45),  // or, reduce: Term11
			reduce(45),  // xor, reduce: Term11
			reduce(45),  // and, reduce: Term11
			reduce(45),  // shift, reduce: Term11
			reduce(45),  // +, reduce: Term11
			reduce(45),  // -, reduce: Term11
			reduce(45),  // product, reduce: Term11
			shift(582),  // (
			reduce(45),  // ), reduce: Term11
			nil,         // !
			nil,         // ~
			shift(1047), // [
			nil,         // ]
			shift(1048), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1031
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(25), // lOr, reduce: Term2
			reduce(25), // lAnd, reduce: Term2
			shift(572), // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(25), // ), reduce: Term2
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1032
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(27), // lOr, reduce: Term3
			reduce(27), // lAnd, reduce: Term3
			reduce(27), // lNot, reduce: Term3
			shift(573), // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(27), // ), reduce: Term3
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1033
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(29), // lOr, reduce: Term4
			reduce(29), // lAnd, reduce: Term4
			reduce(29), // lNot, reduce: Term4
			reduce(29), // equals, reduce: Term4
			shift(574), // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(29), // ), reduce: Term4
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1034
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(31), // lOr, reduce: Term5
			reduce(31), // lAnd, reduce: Term5
			reduce(31), // lNot, reduce: Term5
			reduce(31), // equals, reduce: Term5
			reduce(31), // lessOrGreater, reduce: Term5
			shift(575), // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(31), // ), reduce: Term5
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1035
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(33), // lOr, reduce: Term6
			reduce(33), // lAnd, reduce: Term6
			reduce(33), // lNot, reduce: Term6
			reduce(33), // equals, reduce: Term6
			reduce(33), // lessOrGreater, reduce: Term6
			reduce(33), // or, reduce: Term6
			shift(576), // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(33), // ), reduce: Term6
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1036
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(35), // lOr, reduce: Term7
			reduce(35), // lAnd, reduce: Term7
			reduce(35), // lNot, reduce: Term7
			reduce(35), // equals, reduce: Term7
			reduce(35), // lessOrGreater, reduce: Term7
			reduce(35), // or, reduce: Term7
			reduce(35), // xor, reduce: Term7
			shift(577), // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(35), // ), reduce: Term7
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1037
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(37), // lOr, reduce: Term8
			reduce(37), // lAnd, reduce: Term8
			reduce(37), // lNot, reduce: Term8
			reduce(37), // equals, reduce: Term8
			reduce(37), // lessOrGreater, reduce: Term8
			reduce(37), // or, reduce: Term8
			reduce(37), // xor, reduce: Term8
			reduce(37), // and, reduce: Term8
			shift(578), // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(37), // ), reduce: Term8
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1038
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(39), // lOr, reduce: Term9
			reduce(39), // lAnd, reduce: Term9
			reduce(39), // lNot, reduce: Term9
			reduce(39), // equals, reduce: Term9
			reduce(39), // lessOrGreater, reduce: Term9
			reduce(39), // or, reduce: Term9
			reduce(39), // xor, reduce: Term9
			reduce(39), // and, reduce: Term9
			reduce(39), // shift, reduce: Term9
			shift(579), // +
			shift(580), // -
			nil,        // product
			nil,        // (
			reduce(39), // ), reduce: Term9
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1039
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(41), // lOr, reduce: Term10
			reduce(41), // lAnd, reduce: Term10
			reduce(41), // lNot, reduce: Term10
			reduce(41), // equals, reduce: Term10
			reduce(41), // lessOrGreater, reduce: Term10
			reduce(41), // or, reduce: Term10
			reduce(41), // xor, reduce: Term10
			reduce(41), // and, reduce: Term10
			reduce(41), // shift, reduce: Term10
			reduce(41), // +, reduce: Term10
			reduce(41), // -, reduce: Term10
			shift(581), // product
			nil,        // (
			reduce(41), // ), reduce: Term10
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1040
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(42), // lOr, reduce: Term10
			reduce(42), // lAnd, reduce: Term10
			reduce(42), // lNot, reduce: Term10
			reduce(42), // equals, reduce: Term10
			reduce(42), // lessOrGreater, reduce: Term10
			reduce(42), // or, reduce: Term10
			reduce(42), // xor, reduce: Term10
			reduce(42), // and, reduce: Term10
			reduce(42), // shift, reduce: Term10
			reduce(42), // +, reduce: Term10
			reduce(42), // -, reduce: Term10
			shift(581), // product
			nil,        // (
			reduce(42), // ), reduce: Term10
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1041
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(44),  // lOr, reduce: Term11
			reduce(44),  // lAnd, reduce: Term11
			reduce(44),  // lNot, reduce: Term11
			reduce(44),  // equals, reduce: Term11
			reduce(44),  // lessOrGreater, reduce: Term11
			reduce(44),  // or, reduce: Term11
			reduce(44),  // xor, reduce: Term11
			reduce(44),  // and, reduce: Term11
			reduce(44),  // shift, reduce: Term11
			reduce(44),  // +, reduce: Term11
			reduce(44),  // -, reduce: Term11
			reduce(44),  // product, reduce: Term11
			shift(582),  // (
			reduce(44),  // ), reduce: Term11
			nil,         // !
			nil,         // ~
			shift(1047), // [
			nil,         // ]
			shift(1048), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1042
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(956),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1435), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1043
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(59), // lOr, reduce: CallExpression
			reduce(59), // lAnd, reduce: CallExpression
			reduce(59), // lNot, reduce: CallExpression
			reduce(59), // equals, reduce: CallExpression
			reduce(59), // lessOrGreater, reduce: CallExpression
			reduce(59), // or, reduce: CallExpression
			reduce(59), // xor, reduce: CallExpression
			reduce(59), // and, reduce: CallExpression
			reduce(59), // shift, reduce: CallExpression
			reduce(59), // +, reduce: CallExpression
			reduce(59), // -, reduce: CallExpression
			reduce(59), // product, reduce: CallExpression
			reduce(59), // (, reduce: CallExpression
			reduce(59), // ), reduce: CallExpression
			nil,        // !
			nil,        // ~
			reduce(59), // [, reduce: CallExpression
			nil,        // ]
			reduce(59), // ., reduce: CallExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1044
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1436), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1045
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(61), // lOr, reduce: SelectorExpression
			reduce(61), // lAnd, reduce: SelectorExpression
			reduce(61), // lNot, reduce: SelectorExpression
			reduce(61), // equals, reduce: SelectorExpression
			reduce(61), // lessOrGreater, reduce: SelectorExpression
			reduce(61), // or, reduce: SelectorExpression
			reduce(61), // xor, reduce: SelectorExpression
			reduce(61), // and, reduce: SelectorExpression
			reduce(61), // shift, reduce: SelectorExpression
			reduce(61), // +, reduce: SelectorExpression
			reduce(61), // -, reduce: SelectorExpression
			reduce(61), // product, reduce: SelectorExpression
			reduce(61), // (, reduce: SelectorExpression
			reduce(61), // ), reduce: SelectorExpression
			nil,        // !
			nil,        // ~
			reduce(61), // [, reduce: SelectorExpression
			nil,        // ]
			reduce(61), // ., reduce: SelectorExpression
			reduce(61), // assign, reduce: SelectorExpression
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1046
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(47), // lOr, reduce: Term12
			reduce(47), // lAnd, reduce: Term12
			reduce(47), // lNot, reduce: Term12
			reduce(47), // equals, reduce: Term12
			reduce(47), // lessOrGreater, reduce: Term12
			reduce(47), // or, reduce: Term12
			reduce(47), // xor, reduce: Term12
			reduce(47), // and, reduce: Term12
			reduce(47), // shift, reduce: Term12
			reduce(47), // +, reduce: Term12
			reduce(47), // -, reduce: Term12
			reduce(47), // product, reduce: Term12
			reduce(47), // (, reduce: Term12
			reduce(47), // ), reduce: Term12
			nil,        // !
			nil,        // ~
			reduce(47), // [, reduce: Term12
			nil,        // ]
			reduce(47), // ., reduce: Term12
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1047
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(521), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(539), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(546), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(548), // kwdIf
			nil,        // kwdElse
			shift(549), // kwdFor
			shift(551), // identifier
			shift(560), // kwdNull
			shift(561), // boolLit
			shift(562), // intLit
			shift(563), // floatLit
			shift(564), // stringLit
			shift(565), // kwdFn
		},
	},
	actionRow{ // S1048
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(591), // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1049
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(63), // ), reduce: AssignExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1050
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(64), // ), reduce: AssignExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1051
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(99), // lOr, reduce: ArrayLiteral
			reduce(99), // lAnd, reduce: ArrayLiteral
			reduce(99), // lNot, reduce: ArrayLiteral
			reduce(99), // equals, reduce: ArrayLiteral
			reduce(99), // lessOrGreater, reduce: ArrayLiteral
			reduce(99), // or, reduce: ArrayLiteral
			reduce(99), // xor, reduce: ArrayLiteral
			reduce(99), // and, reduce: ArrayLiteral
			reduce(99), // shift, reduce: ArrayLiteral
			reduce(99), // +, reduce: ArrayLiteral
			reduce(99), // -, reduce: ArrayLiteral
			reduce(99), // product, reduce: ArrayLiteral
			reduce(99), // (, reduce: ArrayLiteral
			reduce(99), // ), reduce: ArrayLiteral
			nil,        // !
			nil,        // ~
			reduce(99), // [, reduce: ArrayLiteral
			nil,        // ]
			reduce(99), // ., reduce: ArrayLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1052
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(62), // ), reduce: AssignExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1053
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			reduce(65),  // ), reduce: IfExpression
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			shift(1439), // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1054
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1441), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1055
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1443), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1056
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1445), // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1057
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1446), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1058
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			reduce(9), // ), reduce: BlockStatement
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1059
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1447), // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(736),  // kwdIf
			nil,         // kwdElse
			shift(737),  // kwdFor
			shift(739),  // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S1060
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(69), // ), reduce: ForExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1061
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1058), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1062
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1450), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1063
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(1233), // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1451), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1064
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1452), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1065
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(61), // $, reduce: SelectorExpression
			reduce(61), // terminator, reduce: SelectorExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(61), // lOr, reduce: SelectorExpression
			reduce(61), // lAnd, reduce: SelectorExpression
			reduce(61), // lNot, reduce: SelectorExpression
			reduce(61), // equals, reduce: SelectorExpression
			reduce(61), // lessOrGreater, reduce: SelectorExpression
			reduce(61), // or, reduce: SelectorExpression
			reduce(61), // xor, reduce: SelectorExpression
			reduce(61), // and, reduce: SelectorExpression
			reduce(61), // shift, reduce: SelectorExpression
			reduce(61), // +, reduce: SelectorExpression
			reduce(61), // -, reduce: SelectorExpression
			reduce(61), // product, reduce: SelectorExpression
			reduce(61), // (, reduce: SelectorExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(61), // [, reduce: SelectorExpression
			nil,        // ]
			reduce(61), // ., reduce: SelectorExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1066
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(47), // (, reduce: Term12
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(47), // [, reduce: Term12
			nil,        // ]
			reduce(47), // ., reduce: Term12
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1067
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			shift(1453), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1068
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			shift(1454), // }
			nil,         // kwdReturn
			shift(381),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1069
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(474),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(493),  // (
			shift(1456), // )
			shift(31),   // !
			shift(32),   // ~
			shift(501),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(503),  // kwdIf
			nil,         // kwdElse
			shift(504),  // kwdFor
			shift(506),  // identifier
			shift(515),  // kwdNull
			shift(516),  // boolLit
			shift(517),  // intLit
			shift(518),  // floatLit
			shift(519),  // stringLit
			shift(520),  // kwdFn
		},
	},
	actionRow{ // S1070
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(521), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(539), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(546), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(548), // kwdIf
			nil,        // kwdElse
			shift(549), // kwdFor
			shift(551), // identifier
			shift(560), // kwdNull
			shift(561), // boolLit
			shift(562), // intLit
			shift(563), // floatLit
			shift(564), // stringLit
			shift(565), // kwdFn
		},
	},
	actionRow{ // S1071
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(616), // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1072
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(635),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1459), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1073
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(98), // (, reduce: ArrayLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(98), // [, reduce: ArrayLiteral
			nil,        // ]
			reduce(98), // ., reduce: ArrayLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1074
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1460), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(796),  // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1075
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			reduce(100), // ,, reduce: HashLiteral
			nil,         // :
			reduce(100), // lOr, reduce: HashLiteral
			reduce(100), // lAnd, reduce: HashLiteral
			reduce(100), // lNot, reduce: HashLiteral
			reduce(100), // equals, reduce: HashLiteral
			reduce(100), // lessOrGreater, reduce: HashLiteral
			reduce(100), // or, reduce: HashLiteral
			reduce(100), // xor, reduce: HashLiteral
			reduce(100), // and, reduce: HashLiteral
			reduce(100), // shift, reduce: HashLiteral
			reduce(100), // +, reduce: HashLiteral
			reduce(100), // -, reduce: HashLiteral
			reduce(100), // product, reduce: HashLiteral
			reduce(100), // (, reduce: HashLiteral
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(100), // [, reduce: HashLiteral
			reduce(100), // ], reduce: HashLiteral
			reduce(100), // ., reduce: HashLiteral
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1076
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			reduce(101), // ,, reduce: HashLiteral
			nil,         // :
			reduce(101), // lOr, reduce: HashLiteral
			reduce(101), // lAnd, reduce: HashLiteral
			reduce(101), // lNot, reduce: HashLiteral
			reduce(101), // equals, reduce: HashLiteral
			reduce(101), // lessOrGreater, reduce: HashLiteral
			reduce(101), // or, reduce: HashLiteral
			reduce(101), // xor, reduce: HashLiteral
			reduce(101), // and, reduce: HashLiteral
			reduce(101), // shift, reduce: HashLiteral
			reduce(101), // +, reduce: HashLiteral
			reduce(101), // -, reduce: HashLiteral
			reduce(101), // product, reduce: HashLiteral
			reduce(101), // (, reduce: HashLiteral
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(101), // [, reduce: HashLiteral
			reduce(101), // ], reduce: HashLiteral
			reduce(101), // ., reduce: HashLiteral
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1077
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(14), // ,, reduce: ExpressionList
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(14), // ], reduce: ExpressionList
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1078
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(23), // ,, reduce: Term1
			nil,        // :
			reduce(23), // lOr, reduce: Term1
			shift(638), // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(23), // ], reduce: Term1
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1079
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			reduce(45),  // ,, reduce: Term11
			nil,         // :
			reduce(45),  // lOr, reduce: Term11
			reduce(45),  // lAnd, reduce: Term11
			reduce(45),  // lNot, reduce: Term11
			reduce(45),  // equals, reduce: Term11
			reduce(45),  // lessOrGreater, reduce: Term11
			reduce(45),  // or, reduce: Term11
			reduce(45),  // xor, reduce: Term11
			reduce(45),  // and, reduce: Term11
			reduce(45),  // shift, reduce: Term11
			reduce(45),  // +, reduce: Term11
			reduce(45),  // -, reduce: Term11
			reduce(45),  // product, reduce: Term11
			shift(649),  // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1096), // [
			reduce(45),  // ], reduce: Term11
			shift(1097), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1080
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(25), // ,, reduce: Term2
			nil,        // :
			reduce(25), // lOr, reduce: Term2
			reduce(25), // lAnd, reduce: Term2
			shift(639), // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(25), // ], reduce: Term2
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1081
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(27), // ,, reduce: Term3
			nil,        // :
			reduce(27), // lOr, reduce: Term3
			reduce(27), // lAnd, reduce: Term3
			reduce(27), // lNot, reduce: Term3
			shift(640), // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(27), // ], reduce: Term3
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1082
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(29), // ,, reduce: Term4
			nil,        // :
			reduce(29), // lOr, reduce: Term4
			reduce(29), // lAnd, reduce: Term4
			reduce(29), // lNot, reduce: Term4
			reduce(29), // equals, reduce: Term4
			shift(641), // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(29), // ], reduce: Term4
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1083
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(31), // ,, reduce: Term5
			nil,        // :
			reduce(31), // lOr, reduce: Term5
			reduce(31), // lAnd, reduce: Term5
			reduce(31), // lNot, reduce: Term5
			reduce(31), // equals, reduce: Term5
			reduce(31), // lessOrGreater, reduce: Term5
			shift(642), // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(31), // ], reduce: Term5
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1084
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(33), // ,, reduce: Term6
			nil,        // :
			reduce(33), // lOr, reduce: Term6
			reduce(33), // lAnd, reduce: Term6
			reduce(33), // lNot, reduce: Term6
			reduce(33), // equals, reduce: Term6
			reduce(33), // lessOrGreater, reduce: Term6
			reduce(33), // or, reduce: Term6
			shift(643), // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(33), // ], reduce: Term6
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1085
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(35), // ,, reduce: Term7
			nil,        // :
			reduce(35), // lOr, reduce: Term7
			reduce(35), // lAnd, reduce: Term7
			reduce(35), // lNot, reduce: Term7
			reduce(35), // equals, reduce: Term7
			reduce(35), // lessOrGreater, reduce: Term7
			reduce(35), // or, reduce: Term7
			reduce(35), // xor, reduce: Term7
			shift(644), // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(35), // ], reduce: Term7
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1086
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(37), // ,, reduce: Term8
			nil,        // :
			reduce(37), // lOr, reduce: Term8
			reduce(37), // lAnd, reduce: Term8
			reduce(37), // lNot, reduce: Term8
			reduce(37), // equals, reduce: Term8
			reduce(37), // lessOrGreater, reduce: Term8
			reduce(37), // or, reduce: Term8
			reduce(37), // xor, reduce: Term8
			reduce(37), // and, reduce: Term8
			shift(645), // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(37), // ], reduce: Term8
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1087
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(39), // ,, reduce: Term9
			nil,        // :
			reduce(39), // lOr, reduce: Term9
			reduce(39), // lAnd, reduce: Term9
			reduce(39), // lNot, reduce: Term9
			reduce(39), // equals, reduce: Term9
			reduce(39), // lessOrGreater, reduce: Term9
			reduce(39), // or, reduce: Term9
			reduce(39), // xor, reduce: Term9
			reduce(39), // and, reduce: Term9
			reduce(39), // shift, reduce: Term9
			shift(646), // +
			shift(647), // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(39), // ], reduce: Term9
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1088
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(41), // ,, reduce: Term10
			nil,        // :
			reduce(41), // lOr, reduce: Term10
			reduce(41), // lAnd, reduce: Term10
			reduce(41), // lNot, reduce: Term10
			reduce(41), // equals, reduce: Term10
			reduce(41), // lessOrGreater, reduce: Term10
			reduce(41), // or, reduce: Term10
			reduce(41), // xor, reduce: Term10
			reduce(41), // and, reduce: Term10
			reduce(41), // shift, reduce: Term10
			reduce(41), // +, reduce: Term10
			reduce(41), // -, reduce: Term10
			shift(648), // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(41), // ], reduce: Term10
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1089
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(42), // ,, reduce: Term10
			nil,        // :
			reduce(42), // lOr, reduce: Term10
			reduce(42), // lAnd, reduce: Term10
			reduce(42), // lNot, reduce: Term10
			reduce(42), // equals, reduce: Term10
			reduce(42), // lessOrGreater, reduce: Term10
			reduce(42), // or, reduce: Term10
			reduce(42), // xor, reduce: Term10
			reduce(42), // and, reduce: Term10
			reduce(42), // shift, reduce: Term10
			reduce(42), // +, reduce: Term10
			reduce(42), // -, reduce: Term10
			shift(648), // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(42), // ], reduce: Term10
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1090
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			reduce(44),  // ,, reduce: Term11
			nil,         // :
			reduce(44),  // lOr, reduce: Term11
			reduce(44),  // lAnd, reduce: Term11
			reduce(44),  // lNot, reduce: Term11
			reduce(44),  // equals, reduce: Term11
			reduce(44),  // lessOrGreater, reduce: Term11
			reduce(44),  // or, reduce: Term11
			reduce(44),  // xor, reduce: Term11
			reduce(44),  // and, reduce: Term11
			reduce(44),  // shift, reduce: Term11
			reduce(44),  // +, reduce: Term11
			reduce(44),  // -, reduce: Term11
			reduce(44),  // product, reduce: Term11
			shift(649),  // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1096), // [
			reduce(44),  // ], reduce: Term11
			shift(1097), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1091
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(956),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1462), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1092
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(59), // ,, reduce: CallExpression
			nil,        // :
			reduce(59), // lOr, reduce: CallExpression
			reduce(59), // lAnd, reduce: CallExpression
			reduce(59), // lNot, reduce: CallExpression
			reduce(59), // equals, reduce: CallExpression
			reduce(59), // lessOrGreater, reduce: CallExpression
			reduce(59), // or, reduce: CallExpression
			reduce(59), // xor, reduce: CallExpression
			reduce(59), // and, reduce: CallExpression
			reduce(59), // shift, reduce: CallExpression
			reduce(59), // +, reduce: CallExpression
			reduce(59), // -, reduce: CallExpression
			reduce(59), // product, reduce: CallExpression
			reduce(59), // (, reduce: CallExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(59), // [, reduce: CallExpression
			reduce(59), // ], reduce: CallExpression
			reduce(59), // ., reduce: CallExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1093
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1463), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1094
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(61), // ,, reduce: SelectorExpression
			nil,        // :
			reduce(61), // lOr, reduce: SelectorExpression
			reduce(61), // lAnd, reduce: SelectorExpression
			reduce(61), // lNot, reduce: SelectorExpression
			reduce(61), // equals, reduce: SelectorExpression
			reduce(61), // lessOrGreater, reduce: SelectorExpression
			reduce(61), // or, reduce: SelectorExpression
			reduce(61), // xor, reduce: SelectorExpression
			reduce(61), // and, reduce: SelectorExpression
			reduce(61), // shift, reduce: SelectorExpression
			reduce(61), // +, reduce: SelectorExpression
			reduce(61), // -, reduce: SelectorExpression
			reduce(61), // product, reduce: SelectorExpression
			reduce(61), // (, reduce: SelectorExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(61), // [, reduce: SelectorExpression
			reduce(61), // ], reduce: SelectorExpression
			reduce(61), // ., reduce: SelectorExpression
			reduce(61), // assign, reduce: SelectorExpression
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1095
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(47), // ,, reduce: Term12
			nil,        // :
			reduce(47), // lOr, reduce: Term12
			reduce(47), // lAnd, reduce: Term12
			reduce(47), // lNot, reduce: Term12
			reduce(47), // equals, reduce: Term12
			reduce(47), // lessOrGreater, reduce: Term12
			reduce(47), // or, reduce: Term12
			reduce(47), // xor, reduce: Term12
			reduce(47), // and, reduce: Term12
			reduce(47), // shift, reduce: Term12
			reduce(47), // +, reduce: Term12
			reduce(47), // -, reduce: Term12
			reduce(47), // product, reduce: Term12
			reduce(47), // (, reduce: Term12
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(47), // [, reduce: Term12
			reduce(47), // ], reduce: Term12
			reduce(47), // ., reduce: Term12
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1096
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(521), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(539), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(546), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(548), // kwdIf
			nil,        // kwdElse
			shift(549), // kwdFor
			shift(551), // identifier
			shift(560), // kwdNull
			shift(561), // boolLit
			shift(562), // intLit
			shift(563), // floatLit
			shift(564), // stringLit
			shift(565), // kwdFn
		},
	},
	actionRow{ // S1097
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(658), // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1098
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(63), // ,, reduce: AssignExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(63), // ], reduce: AssignExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1099
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(64), // ,, reduce: AssignExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(64), // ], reduce: AssignExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1100
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(99), // ,, reduce: ArrayLiteral
			nil,        // :
			reduce(99), // lOr, reduce: ArrayLiteral
			reduce(99), // lAnd, reduce: ArrayLiteral
			reduce(99), // lNot, reduce: ArrayLiteral
			reduce(99), // equals, reduce: ArrayLiteral
			reduce(99), // lessOrGreater, reduce: ArrayLiteral
			reduce(99), // or, reduce: ArrayLiteral
			reduce(99), // xor, reduce: ArrayLiteral
			reduce(99), // and, reduce: ArrayLiteral
			reduce(99), // shift, reduce: ArrayLiteral
			reduce(99), // +, reduce: ArrayLiteral
			reduce(99), // -, reduce: ArrayLiteral
			reduce(99), // product, reduce: ArrayLiteral
			reduce(99), // (, reduce: ArrayLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(99), // [, reduce: ArrayLiteral
			reduce(99), // ], reduce: ArrayLiteral
			reduce(99), // ., reduce: ArrayLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1101
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(62), // ,, reduce: AssignExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(62), // ], reduce: AssignExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1102
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			reduce(65),  // ,, reduce: IfExpression
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			reduce(65),  // ], reduce: IfExpression
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			shift(1466), // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1103
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1468), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1104
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1470), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1105
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1472), // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1106
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1473), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1107
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			reduce(9), // ,, reduce: BlockStatement
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			reduce(9), // ], reduce: BlockStatement
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1108
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1474), // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(736),  // kwdIf
			nil,         // kwdElse
			shift(737),  // kwdFor
			shift(739),  // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S1109
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(69), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(69), // ], reduce: ForExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1110
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1107), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1111
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1477), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1112
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(1233), // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1478), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1113
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			reduce(100), // {, reduce: HashLiteral
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(100), // lOr, reduce: HashLiteral
			reduce(100), // lAnd, reduce: HashLiteral
			reduce(100), // lNot, reduce: HashLiteral
			reduce(100), // equals, reduce: HashLiteral
			reduce(100), // lessOrGreater, reduce: HashLiteral
			reduce(100), // or, reduce: HashLiteral
			reduce(100), // xor, reduce: HashLiteral
			reduce(100), // and, reduce: HashLiteral
			reduce(100), // shift, reduce: HashLiteral
			reduce(100), // +, reduce: HashLiteral
			reduce(100), // -, reduce: HashLiteral
			reduce(100), // product, reduce: HashLiteral
			reduce(100), // (, reduce: HashLiteral
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(100), // [, reduce: HashLiteral
			nil,         // ]
			reduce(100), // ., reduce: HashLiteral
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1114
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			reduce(101), // {, reduce: HashLiteral
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(101), // lOr, reduce: HashLiteral
			reduce(101), // lAnd, reduce: HashLiteral
			reduce(101), // lNot, reduce: HashLiteral
			reduce(101), // equals, reduce: HashLiteral
			reduce(101), // lessOrGreater, reduce: HashLiteral
			reduce(101), // or, reduce: HashLiteral
			reduce(101), // xor, reduce: HashLiteral
			reduce(101), // and, reduce: HashLiteral
			reduce(101), // shift, reduce: HashLiteral
			reduce(101), // +, reduce: HashLiteral
			reduce(101), // -, reduce: HashLiteral
			reduce(101), // product, reduce: HashLiteral
			reduce(101), // (, reduce: HashLiteral
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(101), // [, reduce: HashLiteral
			nil,         // ]
			reduce(101), // ., reduce: HashLiteral
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1115
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(758), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(39),  // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1116
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1481), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1117
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(9), // $, reduce: BlockStatement
			reduce(9), // terminator, reduce: BlockStatement
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			reduce(9), // kwdElse, reduce: BlockStatement
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1118
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(23), // {, reduce: Term1
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(23), // lOr, reduce: Term1
			shift(676), // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1119
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			reduce(45),  // {, reduce: Term11
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(45),  // lOr, reduce: Term11
			reduce(45),  // lAnd, reduce: Term11
			reduce(45),  // lNot, reduce: Term11
			reduce(45),  // equals, reduce: Term11
			reduce(45),  // lessOrGreater, reduce: Term11
			reduce(45),  // or, reduce: Term11
			reduce(45),  // xor, reduce: Term11
			reduce(45),  // and, reduce: Term11
			reduce(45),  // shift, reduce: Term11
			reduce(45),  // +, reduce: Term11
			reduce(45),  // -, reduce: Term11
			reduce(45),  // product, reduce: Term11
			shift(687),  // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1136), // [
			nil,         // ]
			shift(1137), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1120
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(25), // {, reduce: Term2
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(25), // lOr, reduce: Term2
			reduce(25), // lAnd, reduce: Term2
			shift(677), // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1121
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(27), // {, reduce: Term3
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(27), // lOr, reduce: Term3
			reduce(27), // lAnd, reduce: Term3
			reduce(27), // lNot, reduce: Term3
			shift(678), // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1122
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(29), // {, reduce: Term4
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(29), // lOr, reduce: Term4
			reduce(29), // lAnd, reduce: Term4
			reduce(29), // lNot, reduce: Term4
			reduce(29), // equals, reduce: Term4
			shift(679), // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1123
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(31), // {, reduce: Term5
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(31), // lOr, reduce: Term5
			reduce(31), // lAnd, reduce: Term5
			reduce(31), // lNot, reduce: Term5
			reduce(31), // equals, reduce: Term5
			reduce(31), // lessOrGreater, reduce: Term5
			shift(680), // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1124
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(33), // {, reduce: Term6
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(33), // lOr, reduce: Term6
			reduce(33), // lAnd, reduce: Term6
			reduce(33), // lNot, reduce: Term6
			reduce(33), // equals, reduce: Term6
			reduce(33), // lessOrGreater, reduce: Term6
			reduce(33), // or, reduce: Term6
			shift(681), // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1125
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(35), // {, reduce: Term7
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(35), // lOr, reduce: Term7
			reduce(35), // lAnd, reduce: Term7
			reduce(35), // lNot, reduce: Term7
			reduce(35), // equals, reduce: Term7
			reduce(35), // lessOrGreater, reduce: Term7
			reduce(35), // or, reduce: Term7
			reduce(35), // xor, reduce: Term7
			shift(682), // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1126
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(37), // {, reduce: Term8
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(37), // lOr, reduce: Term8
			reduce(37), // lAnd, reduce: Term8
			reduce(37), // lNot, reduce: Term8
			reduce(37), // equals, reduce: Term8
			reduce(37), // lessOrGreater, reduce: Term8
			reduce(37), // or, reduce: Term8
			reduce(37), // xor, reduce: Term8
			reduce(37), // and, reduce: Term8
			shift(683), // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1127
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(39), // {, reduce: Term9
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(39), // lOr, reduce: Term9
			reduce(39), // lAnd, reduce: Term9
			reduce(39), // lNot, reduce: Term9
			reduce(39), // equals, reduce: Term9
			reduce(39), // lessOrGreater, reduce: Term9
			reduce(39), // or, reduce: Term9
			reduce(39), // xor, reduce: Term9
			reduce(39), // and, reduce: Term9
			reduce(39), // shift, reduce: Term9
			shift(684), // +
			shift(685), // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1128
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(41), // {, reduce: Term10
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(41), // lOr, reduce: Term10
			reduce(41), // lAnd, reduce: Term10
			reduce(41), // lNot, reduce: Term10
			reduce(41), // equals, reduce: Term10
			reduce(41), // lessOrGreater, reduce: Term10
			reduce(41), // or, reduce: Term10
			reduce(41), // xor, reduce: Term10
			reduce(41), // and, reduce: Term10
			reduce(41), // shift, reduce: Term10
			reduce(41), // +, reduce: Term10
			reduce(41), // -, reduce: Term10
			shift(686), // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1129
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(42), // {, reduce: Term10
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(42), // lOr, reduce: Term10
			reduce(42), // lAnd, reduce: Term10
			reduce(42), // lNot, reduce: Term10
			reduce(42), // equals, reduce: Term10
			reduce(42), // lessOrGreater, reduce: Term10
			reduce(42), // or, reduce: Term10
			reduce(42), // xor, reduce: Term10
			reduce(42), // and, reduce: Term10
			reduce(42), // shift, reduce: Term10
			reduce(42), // +, reduce: Term10
			reduce(42), // -, reduce: Term10
			shift(686), // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1130
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			reduce(44),  // {, reduce: Term11
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(44),  // lOr, reduce: Term11
			reduce(44),  // lAnd, reduce: Term11
			reduce(44),  // lNot, reduce: Term11
			reduce(44),  // equals, reduce: Term11
			reduce(44),  // lessOrGreater, reduce: Term11
			reduce(44),  // or, reduce: Term11
			reduce(44),  // xor, reduce: Term11
			reduce(44),  // and, reduce: Term11
			reduce(44),  // shift, reduce: Term11
			reduce(44),  // +, reduce: Term11
			reduce(44),  // -, reduce: Term11
			reduce(44),  // product, reduce: Term11
			shift(687),  // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1136), // [
			nil,         // ]
			shift(1137), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1131
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(956),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1482), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1132
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(59), // {, reduce: CallExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(59), // lOr, reduce: CallExpression
			reduce(59), // lAnd, reduce: CallExpression
			reduce(59), // lNot, reduce: CallExpression
			reduce(59), // equals, reduce: CallExpression
			reduce(59), // lessOrGreater, reduce: CallExpression
			reduce(59), // or, reduce: CallExpression
			reduce(59), // xor, reduce: CallExpression
			reduce(59), // and, reduce: CallExpression
			reduce(59), // shift, reduce: CallExpression
			reduce(59), // +, reduce: CallExpression
			reduce(59), // -, reduce: CallExpression
			reduce(59), // product, reduce: CallExpression
			reduce(59), // (, reduce: CallExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(59), // [, reduce: CallExpression
			nil,        // ]
			reduce(59), // ., reduce: CallExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1133
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1483), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1134
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(61), // {, reduce: SelectorExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(61), // lOr, reduce: SelectorExpression
			reduce(61), // lAnd, reduce: SelectorExpression
			reduce(61), // lNot, reduce: SelectorExpression
			reduce(61), // equals, reduce: SelectorExpression
			reduce(61), // lessOrGreater, reduce: SelectorExpression
			reduce(61), // or, reduce: SelectorExpression
			reduce(61), // xor, reduce: SelectorExpression
			reduce(61), // and, reduce: SelectorExpression
			reduce(61), // shift, reduce: SelectorExpression
			reduce(61), // +, reduce: SelectorExpression
			reduce(61), // -, reduce: SelectorExpression
			reduce(61), // product, reduce: SelectorExpression
			reduce(61), // (, reduce: SelectorExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(61), // [, reduce: SelectorExpression
			nil,        // ]
			reduce(61), // ., reduce: SelectorExpression
			reduce(61), // assign, reduce: SelectorExpression
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1135
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(47), // {, reduce: Term12
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(47), // lOr, reduce: Term12
			reduce(47), // lAnd, reduce: Term12
			reduce(47), // lNot, reduce: Term12
			reduce(47), // equals, reduce: Term12
			reduce(47), // lessOrGreater, reduce: Term12
			reduce(47), // or, reduce: Term12
			reduce(47), // xor, reduce: Term12
			reduce(47), // and, reduce: Term12
			reduce(47), // shift, reduce: Term12
			reduce(47), // +, reduce: Term12
			reduce(47), // -, reduce: Term12
			reduce(47), // product, reduce: Term12
			reduce(47), // (, reduce: Term12
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(47), // [, reduce: Term12
			nil,        // ]
			reduce(47), // ., reduce: Term12
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1136
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(521), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(539), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(546), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(548), // kwdIf
			nil,        // kwdElse
			shift(549), // kwdFor
			shift(551), // identifier
			shift(560), // kwdNull
			shift(561), // boolLit
			shift(562), // intLit
			shift(563), // floatLit
			shift(564), // stringLit
			shift(565), // kwdFn
		},
	},
	actionRow{ // S1137
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(696), // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1138
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(63), // {, reduce: AssignExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1139
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(64), // {, reduce: AssignExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1140
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(99), // {, reduce: ArrayLiteral
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(99), // lOr, reduce: ArrayLiteral
			reduce(99), // lAnd, reduce: ArrayLiteral
			reduce(99), // lNot, reduce: ArrayLiteral
			reduce(99), // equals, reduce: ArrayLiteral
			reduce(99), // lessOrGreater, reduce: ArrayLiteral
			reduce(99), // or, reduce: ArrayLiteral
			reduce(99), // xor, reduce: ArrayLiteral
			reduce(99), // and, reduce: ArrayLiteral
			reduce(99), // shift, reduce: ArrayLiteral
			reduce(99), // +, reduce: ArrayLiteral
			reduce(99), // -, reduce: ArrayLiteral
			reduce(99), // product, reduce: ArrayLiteral
			reduce(99), // (, reduce: ArrayLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(99), // [, reduce: ArrayLiteral
			nil,        // ]
			reduce(99), // ., reduce: ArrayLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1141
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(62), // {, reduce: AssignExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1142
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			reduce(65),  // {, reduce: IfExpression
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			shift(1486), // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1143
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1488), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1144
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1490), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1145
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1492), // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1146
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1493), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1147
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			reduce(9), // {, reduce: BlockStatement
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1148
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1494), // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(736),  // kwdIf
			nil,         // kwdElse
			shift(737),  // kwdFor
			shift(739),  // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S1149
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(69), // {, reduce: ForExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1150
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1147), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1151
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1497), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1152
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(1233), // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1498), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1153
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(70), // $, reduce: ForExpression
			reduce(70), // terminator, reduce: ForExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1154
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(63),  // {
			shift(64),  // }
			shift(65),  // kwdReturn
			shift(671), // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(85),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(92),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(94),  // kwdIf
			nil,        // kwdElse
			shift(95),  // kwdFor
			shift(97),  // identifier
			shift(106), // kwdNull
			shift(107), // boolLit
			shift(108), // intLit
			shift(109), // floatLit
			shift(110), // stringLit
			shift(111), // kwdFn
		},
	},
	actionRow{ // S1155
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(758), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1156
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			shift(1500), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1157
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			shift(1501), // }
			nil,         // kwdReturn
			shift(381),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1158
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1154), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1159
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1180), // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S1160
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1180), // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S1161
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1180), // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S1162
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1180), // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S1163
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1180), // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S1164
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1180), // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S1165
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1180), // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S1166
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1180), // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S1167
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1180), // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S1168
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1180), // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S1169
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1180), // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S1170
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1180), // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S1171
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(474),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(493),  // (
			shift(1518), // )
			shift(31),   // !
			shift(32),   // ~
			shift(501),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(503),  // kwdIf
			nil,         // kwdElse
			shift(504),  // kwdFor
			shift(506),  // identifier
			shift(515),  // kwdNull
			shift(516),  // boolLit
			shift(517),  // intLit
			shift(518),  // floatLit
			shift(519),  // stringLit
			shift(520),  // kwdFn
		},
	},
	actionRow{ // S1172
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(521), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(539), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(546), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(548), // kwdIf
			nil,        // kwdElse
			shift(549), // kwdFor
			shift(551), // identifier
			shift(560), // kwdNull
			shift(561), // boolLit
			shift(562), // intLit
			shift(563), // floatLit
			shift(564), // stringLit
			shift(565), // kwdFn
		},
	},
	actionRow{ // S1173
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(739), // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1174
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1521), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1175
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			shift(1171), // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1522), // [
			nil,         // ]
			shift(1523), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1176
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(49), // terminator, reduce: PrefixExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(49), // lOr, reduce: PrefixExpression
			reduce(49), // lAnd, reduce: PrefixExpression
			reduce(49), // lNot, reduce: PrefixExpression
			reduce(49), // equals, reduce: PrefixExpression
			reduce(49), // lessOrGreater, reduce: PrefixExpression
			reduce(49), // or, reduce: PrefixExpression
			reduce(49), // xor, reduce: PrefixExpression
			reduce(49), // and, reduce: PrefixExpression
			reduce(49), // shift, reduce: PrefixExpression
			reduce(49), // +, reduce: PrefixExpression
			reduce(49), // -, reduce: PrefixExpression
			reduce(49), // product, reduce: PrefixExpression
			reduce(48), // (, reduce: PrefixExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(48), // [, reduce: PrefixExpression
			nil,        // ]
			reduce(48), // ., reduce: PrefixExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1177
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(55), // terminator, reduce: PrimaryExpr
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(55), // lOr, reduce: PrimaryExpr
			reduce(55), // lAnd, reduce: PrimaryExpr
			reduce(55), // lNot, reduce: PrimaryExpr
			reduce(55), // equals, reduce: PrimaryExpr
			reduce(55), // lessOrGreater, reduce: PrimaryExpr
			reduce(55), // or, reduce: PrimaryExpr
			reduce(55), // xor, reduce: PrimaryExpr
			reduce(55), // and, reduce: PrimaryExpr
			reduce(55), // shift, reduce: PrimaryExpr
			reduce(55), // +, reduce: PrimaryExpr
			reduce(55), // -, reduce: PrimaryExpr
			reduce(55), // product, reduce: PrimaryExpr
			reduce(55), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(55), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(55), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1178
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(57), // terminator, reduce: PrimaryExpr
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(57), // lOr, reduce: PrimaryExpr
			reduce(57), // lAnd, reduce: PrimaryExpr
			reduce(57), // lNot, reduce: PrimaryExpr
			reduce(57), // equals, reduce: PrimaryExpr
			reduce(57), // lessOrGreater, reduce: PrimaryExpr
			reduce(57), // or, reduce: PrimaryExpr
			reduce(57), // xor, reduce: PrimaryExpr
			reduce(57), // and, reduce: PrimaryExpr
			reduce(57), // shift, reduce: PrimaryExpr
			reduce(57), // +, reduce: PrimaryExpr
			reduce(57), // -, reduce: PrimaryExpr
			reduce(57), // product, reduce: PrimaryExpr
			reduce(57), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(57), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(57), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1179
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(79), // terminator, reduce: Operand
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(79), // lOr, reduce: Operand
			reduce(79), // lAnd, reduce: Operand
			reduce(79), // lNot, reduce: Operand
			reduce(79), // equals, reduce: Operand
			reduce(79), // lessOrGreater, reduce: Operand
			reduce(79), // or, reduce: Operand
			reduce(79), // xor, reduce: Operand
			reduce(79), // and, reduce: Operand
			reduce(79), // shift, reduce: Operand
			reduce(79), // +, reduce: Operand
			reduce(79), // -, reduce: Operand
			reduce(79), // product, reduce: Operand
			reduce(79), // (, reduce: Operand
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(79), // [, reduce: Operand
			nil,        // ]
			reduce(79), // ., reduce: Operand
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1180
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(82), // terminator, reduce: Identifier
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(82), // lOr, reduce: Identifier
			reduce(82), // lAnd, reduce: Identifier
			reduce(82), // lNot, reduce: Identifier
			reduce(82), // equals, reduce: Identifier
			reduce(82), // lessOrGreater, reduce: Identifier
			reduce(82), // or, reduce: Identifier
			reduce(82), // xor, reduce: Identifier
			reduce(82), // and, reduce: Identifier
			reduce(82), // shift, reduce: Identifier
			reduce(82), // +, reduce: Identifier
			reduce(82), // -, reduce: Identifier
			reduce(82), // product, reduce: Identifier
			reduce(82), // (, reduce: Identifier
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(82), // [, reduce: Identifier
			nil,        // ]
			reduce(82), // ., reduce: Identifier
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1181
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(709), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(727), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(734), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(736), // kwdIf
			nil,        // kwdElse
			shift(737), // kwdFor
			shift(739), // identifier
			shift(748), // kwdNull
			shift(749), // boolLit
			shift(750), // intLit
			shift(751), // floatLit
			shift(752), // stringLit
			shift(753), // kwdFn
		},
	},
	actionRow{ // S1182
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(709), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(727), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(734), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(736), // kwdIf
			nil,        // kwdElse
			shift(737), // kwdFor
			shift(739), // identifier
			shift(748), // kwdNull
			shift(749), // boolLit
			shift(750), // intLit
			shift(751), // floatLit
			shift(752), // stringLit
			shift(753), // kwdFn
		},
	},
	actionRow{ // S1183
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(635),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1526), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1184
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(98), // terminator, reduce: ArrayLiteral
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(98), // lOr, reduce: ArrayLiteral
			reduce(98), // lAnd, reduce: ArrayLiteral
			reduce(98), // lNot, reduce: ArrayLiteral
			reduce(98), // equals, reduce: ArrayLiteral
			reduce(98), // lessOrGreater, reduce: ArrayLiteral
			reduce(98), // or, reduce: ArrayLiteral
			reduce(98), // xor, reduce: ArrayLiteral
			reduce(98), // and, reduce: ArrayLiteral
			reduce(98), // shift, reduce: ArrayLiteral
			reduce(98), // +, reduce: ArrayLiteral
			reduce(98), // -, reduce: ArrayLiteral
			reduce(98), // product, reduce: ArrayLiteral
			reduce(98), // (, reduce: ArrayLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(98), // [, reduce: ArrayLiteral
			nil,        // ]
			reduce(98), // ., reduce: ArrayLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1185
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(709), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(727), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(734), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(736), // kwdIf
			nil,        // kwdElse
			shift(737), // kwdFor
			shift(739), // identifier
			shift(748), // kwdNull
			shift(749), // boolLit
			shift(750), // intLit
			shift(751), // floatLit
			shift(752), // stringLit
			shift(753), // kwdFn
		},
	},
	actionRow{ // S1186
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1529), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1187
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1530), // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(736),  // kwdIf
			nil,         // kwdElse
			shift(737),  // kwdFor
			shift(739),  // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S1188
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(68), // terminator, reduce: ForExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1189
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(63),   // {
			shift(1533), // }
			shift(65),   // kwdReturn
			shift(754),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(85),   // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(92),   // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(94),   // kwdIf
			nil,         // kwdElse
			shift(95),   // kwdFor
			shift(97),   // identifier
			shift(106),  // kwdNull
			shift(107),  // boolLit
			shift(108),  // intLit
			shift(109),  // floatLit
			shift(110),  // stringLit
			shift(111),  // kwdFn
		},
	},
	actionRow{ // S1190
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1534), // terminator
			shift(1536), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1191
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1537), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(796),  // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1192
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(100), // terminator, reduce: HashLiteral
			reduce(100), // {, reduce: HashLiteral
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(100), // lOr, reduce: HashLiteral
			reduce(100), // lAnd, reduce: HashLiteral
			reduce(100), // lNot, reduce: HashLiteral
			reduce(100), // equals, reduce: HashLiteral
			reduce(100), // lessOrGreater, reduce: HashLiteral
			reduce(100), // or, reduce: HashLiteral
			reduce(100), // xor, reduce: HashLiteral
			reduce(100), // and, reduce: HashLiteral
			reduce(100), // shift, reduce: HashLiteral
			reduce(100), // +, reduce: HashLiteral
			reduce(100), // -, reduce: HashLiteral
			reduce(100), // product, reduce: HashLiteral
			reduce(100), // (, reduce: HashLiteral
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(100), // [, reduce: HashLiteral
			nil,         // ]
			reduce(100), // ., reduce: HashLiteral
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1193
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(101), // terminator, reduce: HashLiteral
			reduce(101), // {, reduce: HashLiteral
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(101), // lOr, reduce: HashLiteral
			reduce(101), // lAnd, reduce: HashLiteral
			reduce(101), // lNot, reduce: HashLiteral
			reduce(101), // equals, reduce: HashLiteral
			reduce(101), // lessOrGreater, reduce: HashLiteral
			reduce(101), // or, reduce: HashLiteral
			reduce(101), // xor, reduce: HashLiteral
			reduce(101), // and, reduce: HashLiteral
			reduce(101), // shift, reduce: HashLiteral
			reduce(101), // +, reduce: HashLiteral
			reduce(101), // -, reduce: HashLiteral
			reduce(101), // product, reduce: HashLiteral
			reduce(101), // (, reduce: HashLiteral
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(101), // [, reduce: HashLiteral
			nil,         // ]
			reduce(101), // ., reduce: HashLiteral
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1194
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1154), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1195
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1541), // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1196
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(23), // terminator, reduce: Term1
			reduce(23), // {, reduce: Term1
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(23), // lOr, reduce: Term1
			shift(760), // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1197
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(45),  // terminator, reduce: Term11
			reduce(45),  // {, reduce: Term11
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(45),  // lOr, reduce: Term11
			reduce(45),  // lAnd, reduce: Term11
			reduce(45),  // lNot, reduce: Term11
			reduce(45),  // equals, reduce: Term11
			reduce(45),  // lessOrGreater, reduce: Term11
			reduce(45),  // or, reduce: Term11
			reduce(45),  // xor, reduce: Term11
			reduce(45),  // and, reduce: Term11
			reduce(45),  // shift, reduce: Term11
			reduce(45),  // +, reduce: Term11
			reduce(45),  // -, reduce: Term11
			reduce(45),  // product, reduce: Term11
			shift(771),  // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1214), // [
			nil,         // ]
			shift(1215), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1198
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(25), // terminator, reduce: Term2
			reduce(25), // {, reduce: Term2
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(25), // lOr, reduce: Term2
			reduce(25), // lAnd, reduce: Term2
			shift(761), // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1199
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(27), // terminator, reduce: Term3
			reduce(27), // {, reduce: Term3
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(27), // lOr, reduce: Term3
			reduce(27), // lAnd, reduce: Term3
			reduce(27), // lNot, reduce: Term3
			shift(762), // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1200
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(29), // terminator, reduce: Term4
			reduce(29), // {, reduce: Term4
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(29), // lOr, reduce: Term4
			reduce(29), // lAnd, reduce: Term4
			reduce(29), // lNot, reduce: Term4
			reduce(29), // equals, reduce: Term4
			shift(763), // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1201
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(31), // terminator, reduce: Term5
			reduce(31), // {, reduce: Term5
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(31), // lOr, reduce: Term5
			reduce(31), // lAnd, reduce: Term5
			reduce(31), // lNot, reduce: Term5
			reduce(31), // equals, reduce: Term5
			reduce(31), // lessOrGreater, reduce: Term5
			shift(764), // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1202
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(33), // terminator, reduce: Term6
			reduce(33), // {, reduce: Term6
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(33), // lOr, reduce: Term6
			reduce(33), // lAnd, reduce: Term6
			reduce(33), // lNot, reduce: Term6
			reduce(33), // equals, reduce: Term6
			reduce(33), // lessOrGreater, reduce: Term6
			reduce(33), // or, reduce: Term6
			shift(765), // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1203
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(35), // terminator, reduce: Term7
			reduce(35), // {, reduce: Term7
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(35), // lOr, reduce: Term7
			reduce(35), // lAnd, reduce: Term7
			reduce(35), // lNot, reduce: Term7
			reduce(35), // equals, reduce: Term7
			reduce(35), // lessOrGreater, reduce: Term7
			reduce(35), // or, reduce: Term7
			reduce(35), // xor, reduce: Term7
			shift(766), // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1204
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(37), // terminator, reduce: Term8
			reduce(37), // {, reduce: Term8
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(37), // lOr, reduce: Term8
			reduce(37), // lAnd, reduce: Term8
			reduce(37), // lNot, reduce: Term8
			reduce(37), // equals, reduce: Term8
			reduce(37), // lessOrGreater, reduce: Term8
			reduce(37), // or, reduce: Term8
			reduce(37), // xor, reduce: Term8
			reduce(37), // and, reduce: Term8
			shift(767), // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1205
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(39), // terminator, reduce: Term9
			reduce(39), // {, reduce: Term9
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(39), // lOr, reduce: Term9
			reduce(39), // lAnd, reduce: Term9
			reduce(39), // lNot, reduce: Term9
			reduce(39), // equals, reduce: Term9
			reduce(39), // lessOrGreater, reduce: Term9
			reduce(39), // or, reduce: Term9
			reduce(39), // xor, reduce: Term9
			reduce(39), // and, reduce: Term9
			reduce(39), // shift, reduce: Term9
			shift(768), // +
			shift(769), // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1206
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(41), // terminator, reduce: Term10
			reduce(41), // {, reduce: Term10
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(41), // lOr, reduce: Term10
			reduce(41), // lAnd, reduce: Term10
			reduce(41), // lNot, reduce: Term10
			reduce(41), // equals, reduce: Term10
			reduce(41), // lessOrGreater, reduce: Term10
			reduce(41), // or, reduce: Term10
			reduce(41), // xor, reduce: Term10
			reduce(41), // and, reduce: Term10
			reduce(41), // shift, reduce: Term10
			reduce(41), // +, reduce: Term10
			reduce(41), // -, reduce: Term10
			shift(770), // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1207
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(42), // terminator, reduce: Term10
			reduce(42), // {, reduce: Term10
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(42), // lOr, reduce: Term10
			reduce(42), // lAnd, reduce: Term10
			reduce(42), // lNot, reduce: Term10
			reduce(42), // equals, reduce: Term10
			reduce(42), // lessOrGreater, reduce: Term10
			reduce(42), // or, reduce: Term10
			reduce(42), // xor, reduce: Term10
			reduce(42), // and, reduce: Term10
			reduce(42), // shift, reduce: Term10
			reduce(42), // +, reduce: Term10
			reduce(42), // -, reduce: Term10
			shift(770), // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1208
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(44),  // terminator, reduce: Term11
			reduce(44),  // {, reduce: Term11
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(44),  // lOr, reduce: Term11
			reduce(44),  // lAnd, reduce: Term11
			reduce(44),  // lNot, reduce: Term11
			reduce(44),  // equals, reduce: Term11
			reduce(44),  // lessOrGreater, reduce: Term11
			reduce(44),  // or, reduce: Term11
			reduce(44),  // xor, reduce: Term11
			reduce(44),  // and, reduce: Term11
			reduce(44),  // shift, reduce: Term11
			reduce(44),  // +, reduce: Term11
			reduce(44),  // -, reduce: Term11
			reduce(44),  // product, reduce: Term11
			shift(771),  // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1214), // [
			nil,         // ]
			shift(1215), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1209
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(956),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1542), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1210
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(59), // terminator, reduce: CallExpression
			reduce(59), // {, reduce: CallExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(59), // lOr, reduce: CallExpression
			reduce(59), // lAnd, reduce: CallExpression
			reduce(59), // lNot, reduce: CallExpression
			reduce(59), // equals, reduce: CallExpression
			reduce(59), // lessOrGreater, reduce: CallExpression
			reduce(59), // or, reduce: CallExpression
			reduce(59), // xor, reduce: CallExpression
			reduce(59), // and, reduce: CallExpression
			reduce(59), // shift, reduce: CallExpression
			reduce(59), // +, reduce: CallExpression
			reduce(59), // -, reduce: CallExpression
			reduce(59), // product, reduce: CallExpression
			reduce(59), // (, reduce: CallExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(59), // [, reduce: CallExpression
			nil,        // ]
			reduce(59), // ., reduce: CallExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1211
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1543), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1212
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(61), // terminator, reduce: SelectorExpression
			reduce(61), // {, reduce: SelectorExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(61), // lOr, reduce: SelectorExpression
			reduce(61), // lAnd, reduce: SelectorExpression
			reduce(61), // lNot, reduce: SelectorExpression
			reduce(61), // equals, reduce: SelectorExpression
			reduce(61), // lessOrGreater, reduce: SelectorExpression
			reduce(61), // or, reduce: SelectorExpression
			reduce(61), // xor, reduce: SelectorExpression
			reduce(61), // and, reduce: SelectorExpression
			reduce(61), // shift, reduce: SelectorExpression
			reduce(61), // +, reduce: SelectorExpression
			reduce(61), // -, reduce: SelectorExpression
			reduce(61), // product, reduce: SelectorExpression
			reduce(61), // (, reduce: SelectorExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(61), // [, reduce: SelectorExpression
			nil,        // ]
			reduce(61), // ., reduce: SelectorExpression
			reduce(61), // assign, reduce: SelectorExpression
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1213
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(47), // terminator, reduce: Term12
			reduce(47), // {, reduce: Term12
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(47), // lOr, reduce: Term12
			reduce(47), // lAnd, reduce: Term12
			reduce(47), // lNot, reduce: Term12
			reduce(47), // equals, reduce: Term12
			reduce(47), // lessOrGreater, reduce: Term12
			reduce(47), // or, reduce: Term12
			reduce(47), // xor, reduce: Term12
			reduce(47), // and, reduce: Term12
			reduce(47), // shift, reduce: Term12
			reduce(47), // +, reduce: Term12
			reduce(47), // -, reduce: Term12
			reduce(47), // product, reduce: Term12
			reduce(47), // (, reduce: Term12
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(47), // [, reduce: Term12
			nil,        // ]
			reduce(47), // ., reduce: Term12
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1214
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(521), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(539), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(546), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(548), // kwdIf
			nil,        // kwdElse
			shift(549), // kwdFor
			shift(551), // identifier
			shift(560), // kwdNull
			shift(561), // boolLit
			shift(562), // intLit
			shift(563), // floatLit
			shift(564), // stringLit
			shift(565), // kwdFn
		},
	},
	actionRow{ // S1215
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(781), // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1216
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(63), // terminator, reduce: AssignExpression
			reduce(63), // {, reduce: AssignExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1217
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(64), // terminator, reduce: AssignExpression
			reduce(64), // {, reduce: AssignExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1218
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(99), // terminator, reduce: ArrayLiteral
			reduce(99), // {, reduce: ArrayLiteral
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(99), // lOr, reduce: ArrayLiteral
			reduce(99), // lAnd, reduce: ArrayLiteral
			reduce(99), // lNot, reduce: ArrayLiteral
			reduce(99), // equals, reduce: ArrayLiteral
			reduce(99), // lessOrGreater, reduce: ArrayLiteral
			reduce(99), // or, reduce: ArrayLiteral
			reduce(99), // xor, reduce: ArrayLiteral
			reduce(99), // and, reduce: ArrayLiteral
			reduce(99), // shift, reduce: ArrayLiteral
			reduce(99), // +, reduce: ArrayLiteral
			reduce(99), // -, reduce: ArrayLiteral
			reduce(99), // product, reduce: ArrayLiteral
			reduce(99), // (, reduce: ArrayLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(99), // [, reduce: ArrayLiteral
			nil,        // ]
			reduce(99), // ., reduce: ArrayLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1219
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(62), // terminator, reduce: AssignExpression
			reduce(62), // {, reduce: AssignExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1220
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(65),  // terminator, reduce: IfExpression
			reduce(65),  // {, reduce: IfExpression
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			shift(1546), // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1221
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1548), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1222
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1550), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1223
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1552), // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1224
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1553), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1225
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			reduce(9), // terminator, reduce: BlockStatement
			reduce(9), // {, reduce: BlockStatement
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1226
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1554), // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(736),  // kwdIf
			nil,         // kwdElse
			shift(737),  // kwdFor
			shift(739),  // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S1227
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(69), // terminator, reduce: ForExpression
			reduce(69), // {, reduce: ForExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1228
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1225), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1229
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1557), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1230
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(1233), // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1558), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1231
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(96), // $, reduce: FunctionLiteral
			reduce(96), // terminator, reduce: FunctionLiteral
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(96), // lOr, reduce: FunctionLiteral
			reduce(96), // lAnd, reduce: FunctionLiteral
			reduce(96), // lNot, reduce: FunctionLiteral
			reduce(96), // equals, reduce: FunctionLiteral
			reduce(96), // lessOrGreater, reduce: FunctionLiteral
			reduce(96), // or, reduce: FunctionLiteral
			reduce(96), // xor, reduce: FunctionLiteral
			reduce(96), // and, reduce: FunctionLiteral
			reduce(96), // shift, reduce: FunctionLiteral
			reduce(96), // +, reduce: FunctionLiteral
			reduce(96), // -, reduce: FunctionLiteral
			reduce(96), // product, reduce: FunctionLiteral
			reduce(96), // (, reduce: FunctionLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(96), // [, reduce: FunctionLiteral
			nil,        // ]
			reduce(96), // ., reduce: FunctionLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1232
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1560), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1233
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(796), // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1234
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1232), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1235
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(100), // terminator, reduce: HashLiteral
			nil,         // {
			reduce(100), // }, reduce: HashLiteral
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(100), // lOr, reduce: HashLiteral
			reduce(100), // lAnd, reduce: HashLiteral
			reduce(100), // lNot, reduce: HashLiteral
			reduce(100), // equals, reduce: HashLiteral
			reduce(100), // lessOrGreater, reduce: HashLiteral
			reduce(100), // or, reduce: HashLiteral
			reduce(100), // xor, reduce: HashLiteral
			reduce(100), // and, reduce: HashLiteral
			reduce(100), // shift, reduce: HashLiteral
			reduce(100), // +, reduce: HashLiteral
			reduce(100), // -, reduce: HashLiteral
			reduce(100), // product, reduce: HashLiteral
			reduce(100), // (, reduce: HashLiteral
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(100), // [, reduce: HashLiteral
			nil,         // ]
			reduce(100), // ., reduce: HashLiteral
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1236
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(101), // terminator, reduce: HashLiteral
			nil,         // {
			reduce(101), // }, reduce: HashLiteral
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(101), // lOr, reduce: HashLiteral
			reduce(101), // lAnd, reduce: HashLiteral
			reduce(101), // lNot, reduce: HashLiteral
			reduce(101), // equals, reduce: HashLiteral
			reduce(101), // lessOrGreater, reduce: HashLiteral
			reduce(101), // or, reduce: HashLiteral
			reduce(101), // xor, reduce: HashLiteral
			reduce(101), // and, reduce: HashLiteral
			reduce(101), // shift, reduce: HashLiteral
			reduce(101), // +, reduce: HashLiteral
			reduce(101), // -, reduce: HashLiteral
			reduce(101), // product, reduce: HashLiteral
			reduce(101), // (, reduce: HashLiteral
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(101), // [, reduce: HashLiteral
			nil,         // ]
			reduce(101), // ., reduce: HashLiteral
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1237
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(23), // terminator, reduce: Term1
			nil,        // {
			reduce(23), // }, reduce: Term1
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(23), // lOr, reduce: Term1
			shift(806), // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1238
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(45),  // terminator, reduce: Term11
			nil,         // {
			reduce(45),  // }, reduce: Term11
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(45),  // lOr, reduce: Term11
			reduce(45),  // lAnd, reduce: Term11
			reduce(45),  // lNot, reduce: Term11
			reduce(45),  // equals, reduce: Term11
			reduce(45),  // lessOrGreater, reduce: Term11
			reduce(45),  // or, reduce: Term11
			reduce(45),  // xor, reduce: Term11
			reduce(45),  // and, reduce: Term11
			reduce(45),  // shift, reduce: Term11
			reduce(45),  // +, reduce: Term11
			reduce(45),  // -, reduce: Term11
			reduce(45),  // product, reduce: Term11
			shift(817),  // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1255), // [
			nil,         // ]
			shift(1256), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1239
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(25), // terminator, reduce: Term2
			nil,        // {
			reduce(25), // }, reduce: Term2
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(25), // lOr, reduce: Term2
			reduce(25), // lAnd, reduce: Term2
			shift(807), // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1240
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(27), // terminator, reduce: Term3
			nil,        // {
			reduce(27), // }, reduce: Term3
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(27), // lOr, reduce: Term3
			reduce(27), // lAnd, reduce: Term3
			reduce(27), // lNot, reduce: Term3
			shift(808), // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1241
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(29), // terminator, reduce: Term4
			nil,        // {
			reduce(29), // }, reduce: Term4
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(29), // lOr, reduce: Term4
			reduce(29), // lAnd, reduce: Term4
			reduce(29), // lNot, reduce: Term4
			reduce(29), // equals, reduce: Term4
			shift(809), // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1242
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(31), // terminator, reduce: Term5
			nil,        // {
			reduce(31), // }, reduce: Term5
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(31), // lOr, reduce: Term5
			reduce(31), // lAnd, reduce: Term5
			reduce(31), // lNot, reduce: Term5
			reduce(31), // equals, reduce: Term5
			reduce(31), // lessOrGreater, reduce: Term5
			shift(810), // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1243
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(33), // terminator, reduce: Term6
			nil,        // {
			reduce(33), // }, reduce: Term6
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(33), // lOr, reduce: Term6
			reduce(33), // lAnd, reduce: Term6
			reduce(33), // lNot, reduce: Term6
			reduce(33), // equals, reduce: Term6
			reduce(33), // lessOrGreater, reduce: Term6
			reduce(33), // or, reduce: Term6
			shift(811), // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1244
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(35), // terminator, reduce: Term7
			nil,        // {
			reduce(35), // }, reduce: Term7
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(35), // lOr, reduce: Term7
			reduce(35), // lAnd, reduce: Term7
			reduce(35), // lNot, reduce: Term7
			reduce(35), // equals, reduce: Term7
			reduce(35), // lessOrGreater, reduce: Term7
			reduce(35), // or, reduce: Term7
			reduce(35), // xor, reduce: Term7
			shift(812), // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1245
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(37), // terminator, reduce: Term8
			nil,        // {
			reduce(37), // }, reduce: Term8
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(37), // lOr, reduce: Term8
			reduce(37), // lAnd, reduce: Term8
			reduce(37), // lNot, reduce: Term8
			reduce(37), // equals, reduce: Term8
			reduce(37), // lessOrGreater, reduce: Term8
			reduce(37), // or, reduce: Term8
			reduce(37), // xor, reduce: Term8
			reduce(37), // and, reduce: Term8
			shift(813), // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1246
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(39), // terminator, reduce: Term9
			nil,        // {
			reduce(39), // }, reduce: Term9
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(39), // lOr, reduce: Term9
			reduce(39), // lAnd, reduce: Term9
			reduce(39), // lNot, reduce: Term9
			reduce(39), // equals, reduce: Term9
			reduce(39), // lessOrGreater, reduce: Term9
			reduce(39), // or, reduce: Term9
			reduce(39), // xor, reduce: Term9
			reduce(39), // and, reduce: Term9
			reduce(39), // shift, reduce: Term9
			shift(814), // +
			shift(815), // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1247
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(41), // terminator, reduce: Term10
			nil,        // {
			reduce(41), // }, reduce: Term10
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(41), // lOr, reduce: Term10
			reduce(41), // lAnd, reduce: Term10
			reduce(41), // lNot, reduce: Term10
			reduce(41), // equals, reduce: Term10
			reduce(41), // lessOrGreater, reduce: Term10
			reduce(41), // or, reduce: Term10
			reduce(41), // xor, reduce: Term10
			reduce(41), // and, reduce: Term10
			reduce(41), // shift, reduce: Term10
			reduce(41), // +, reduce: Term10
			reduce(41), // -, reduce: Term10
			shift(816), // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1248
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(42), // terminator, reduce: Term10
			nil,        // {
			reduce(42), // }, reduce: Term10
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(42), // lOr, reduce: Term10
			reduce(42), // lAnd, reduce: Term10
			reduce(42), // lNot, reduce: Term10
			reduce(42), // equals, reduce: Term10
			reduce(42), // lessOrGreater, reduce: Term10
			reduce(42), // or, reduce: Term10
			reduce(42), // xor, reduce: Term10
			reduce(42), // and, reduce: Term10
			reduce(42), // shift, reduce: Term10
			reduce(42), // +, reduce: Term10
			reduce(42), // -, reduce: Term10
			shift(816), // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1249
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(44),  // terminator, reduce: Term11
			nil,         // {
			reduce(44),  // }, reduce: Term11
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(44),  // lOr, reduce: Term11
			reduce(44),  // lAnd, reduce: Term11
			reduce(44),  // lNot, reduce: Term11
			reduce(44),  // equals, reduce: Term11
			reduce(44),  // lessOrGreater, reduce: Term11
			reduce(44),  // or, reduce: Term11
			reduce(44),  // xor, reduce: Term11
			reduce(44),  // and, reduce: Term11
			reduce(44),  // shift, reduce: Term11
			reduce(44),  // +, reduce: Term11
			reduce(44),  // -, reduce: Term11
			reduce(44),  // product, reduce: Term11
			shift(817),  // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1255), // [
			nil,         // ]
			shift(1256), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1250
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(956),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1563), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1251
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(59), // terminator, reduce: CallExpression
			nil,        // {
			reduce(59), // }, reduce: CallExpression
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(59), // lOr, reduce: CallExpression
			reduce(59), // lAnd, reduce: CallExpression
			reduce(59), // lNot, reduce: CallExpression
			reduce(59), // equals, reduce: CallExpression
			reduce(59), // lessOrGreater, reduce: CallExpression
			reduce(59), // or, reduce: CallExpression
			reduce(59), // xor, reduce: CallExpression
			reduce(59), // and, reduce: CallExpression
			reduce(59), // shift, reduce: CallExpression
			reduce(59), // +, reduce: CallExpression
			reduce(59), // -, reduce: CallExpression
			reduce(59), // product, reduce: CallExpression
			reduce(59), // (, reduce: CallExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(59), // [, reduce: CallExpression
			nil,        // ]
			reduce(59), // ., reduce: CallExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1252
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1564), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1253
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(61), // terminator, reduce: SelectorExpression
			nil,        // {
			reduce(61), // }, reduce: SelectorExpression
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(61), // lOr, reduce: SelectorExpression
			reduce(61), // lAnd, reduce: SelectorExpression
			reduce(61), // lNot, reduce: SelectorExpression
			reduce(61), // equals, reduce: SelectorExpression
			reduce(61), // lessOrGreater, reduce: SelectorExpression
			reduce(61), // or, reduce: SelectorExpression
			reduce(61), // xor, reduce: SelectorExpression
			reduce(61), // and, reduce: SelectorExpression
			reduce(61), // shift, reduce: SelectorExpression
			reduce(61), // +, reduce: SelectorExpression
			reduce(61), // -, reduce: SelectorExpression
			reduce(61), // product, reduce: SelectorExpression
			reduce(61), // (, reduce: SelectorExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(61), // [, reduce: SelectorExpression
			nil,        // ]
			reduce(61), // ., reduce: SelectorExpression
			reduce(61), // assign, reduce: SelectorExpression
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1254
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(47), // terminator, reduce: Term12
			nil,        // {
			reduce(47), // }, reduce: Term12
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(47), // lOr, reduce: Term12
			reduce(47), // lAnd, reduce: Term12
			reduce(47), // lNot, reduce: Term12
			reduce(47), // equals, reduce: Term12
			reduce(47), // lessOrGreater, reduce: Term12
			reduce(47), // or, reduce: Term12
			reduce(47), // xor, reduce: Term12
			reduce(47), // and, reduce: Term12
			reduce(47), // shift, reduce: Term12
			reduce(47), // +, reduce: Term12
			reduce(47), // -, reduce: Term12
			reduce(47), // product, reduce: Term12
			reduce(47), // (, reduce: Term12
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(47), // [, reduce: Term12
			nil,        // ]
			reduce(47), // ., reduce: Term12
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1255
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(521), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(539), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(546), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(548), // kwdIf
			nil,        // kwdElse
			shift(549), // kwdFor
			shift(551), // identifier
			shift(560), // kwdNull
			shift(561), // boolLit
			shift(562), // intLit
			shift(563), // floatLit
			shift(564), // stringLit
			shift(565), // kwdFn
		},
	},
	actionRow{ // S1256
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(826), // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1257
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(63), // terminator, reduce: AssignExpression
			nil,        // {
			reduce(63), // }, reduce: AssignExpression
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1258
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(64), // terminator, reduce: AssignExpression
			nil,        // {
			reduce(64), // }, reduce: AssignExpression
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1259
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(99), // terminator, reduce: ArrayLiteral
			nil,        // {
			reduce(99), // }, reduce: ArrayLiteral
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(99), // lOr, reduce: ArrayLiteral
			reduce(99), // lAnd, reduce: ArrayLiteral
			reduce(99), // lNot, reduce: ArrayLiteral
			reduce(99), // equals, reduce: ArrayLiteral
			reduce(99), // lessOrGreater, reduce: ArrayLiteral
			reduce(99), // or, reduce: ArrayLiteral
			reduce(99), // xor, reduce: ArrayLiteral
			reduce(99), // and, reduce: ArrayLiteral
			reduce(99), // shift, reduce: ArrayLiteral
			reduce(99), // +, reduce: ArrayLiteral
			reduce(99), // -, reduce: ArrayLiteral
			reduce(99), // product, reduce: ArrayLiteral
			reduce(99), // (, reduce: ArrayLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(99), // [, reduce: ArrayLiteral
			nil,        // ]
			reduce(99), // ., reduce: ArrayLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1260
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(62), // terminator, reduce: AssignExpression
			nil,        // {
			reduce(62), // }, reduce: AssignExpression
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1261
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(65),  // terminator, reduce: IfExpression
			nil,         // {
			reduce(65),  // }, reduce: IfExpression
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			shift(1567), // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1262
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1569), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1263
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1571), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1264
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1573), // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1265
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1574), // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(736),  // kwdIf
			nil,         // kwdElse
			shift(737),  // kwdFor
			shift(739),  // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S1266
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(69), // terminator, reduce: ForExpression
			nil,        // {
			reduce(69), // }, reduce: ForExpression
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1267
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(798), // {
			shift(330), // }
			shift(65),  // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(351), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(358), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(360), // kwdIf
			nil,        // kwdElse
			shift(361), // kwdFor
			shift(363), // identifier
			shift(372), // kwdNull
			shift(373), // boolLit
			shift(374), // intLit
			shift(375), // floatLit
			shift(376), // stringLit
			shift(377), // kwdFn
		},
	},
	actionRow{ // S1268
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1577), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1269
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(1233), // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1578), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1270
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			shift(1579), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1271
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			shift(1580), // }
			nil,         // kwdReturn
			shift(381),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1272
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(838),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(856),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(863),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1293), // identifier
			shift(877),  // kwdNull
			shift(878),  // boolLit
			shift(879),  // intLit
			shift(880),  // floatLit
			shift(881),  // stringLit
			shift(882),  // kwdFn
		},
	},
	actionRow{ // S1273
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(838),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(856),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(863),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1293), // identifier
			shift(877),  // kwdNull
			shift(878),  // boolLit
			shift(879),  // intLit
			shift(880),  // floatLit
			shift(881),  // stringLit
			shift(882),  // kwdFn
		},
	},
	actionRow{ // S1274
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(838),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(856),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(863),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1293), // identifier
			shift(877),  // kwdNull
			shift(878),  // boolLit
			shift(879),  // intLit
			shift(880),  // floatLit
			shift(881),  // stringLit
			shift(882),  // kwdFn
		},
	},
	actionRow{ // S1275
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(838),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(856),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(863),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1293), // identifier
			shift(877),  // kwdNull
			shift(878),  // boolLit
			shift(879),  // intLit
			shift(880),  // floatLit
			shift(881),  // stringLit
			shift(882),  // kwdFn
		},
	},
	actionRow{ // S1276
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(838),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(856),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(863),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1293), // identifier
			shift(877),  // kwdNull
			shift(878),  // boolLit
			shift(879),  // intLit
			shift(880),  // floatLit
			shift(881),  // stringLit
			shift(882),  // kwdFn
		},
	},
	actionRow{ // S1277
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(838),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(856),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(863),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1293), // identifier
			shift(877),  // kwdNull
			shift(878),  // boolLit
			shift(879),  // intLit
			shift(880),  // floatLit
			shift(881),  // stringLit
			shift(882),  // kwdFn
		},
	},
	actionRow{ // S1278
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(838),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(856),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(863),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1293), // identifier
			shift(877),  // kwdNull
			shift(878),  // boolLit
			shift(879),  // intLit
			shift(880),  // floatLit
			shift(881),  // stringLit
			shift(882),  // kwdFn
		},
	},
	actionRow{ // S1279
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(838),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(856),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(863),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1293), // identifier
			shift(877),  // kwdNull
			shift(878),  // boolLit
			shift(879),  // intLit
			shift(880),  // floatLit
			shift(881),  // stringLit
			shift(882),  // kwdFn
		},
	},
	actionRow{ // S1280
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(838),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(856),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(863),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1293), // identifier
			shift(877),  // kwdNull
			shift(878),  // boolLit
			shift(879),  // intLit
			shift(880),  // floatLit
			shift(881),  // stringLit
			shift(882),  // kwdFn
		},
	},
	actionRow{ // S1281
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(838),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(856),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(863),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1293), // identifier
			shift(877),  // kwdNull
			shift(878),  // boolLit
			shift(879),  // intLit
			shift(880),  // floatLit
			shift(881),  // stringLit
			shift(882),  // kwdFn
		},
	},
	actionRow{ // S1282
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(838),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(856),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(863),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1293), // identifier
			shift(877),  // kwdNull
			shift(878),  // boolLit
			shift(879),  // intLit
			shift(880),  // floatLit
			shift(881),  // stringLit
			shift(882),  // kwdFn
		},
	},
	actionRow{ // S1283
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(838),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(856),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(863),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1293), // identifier
			shift(877),  // kwdNull
			shift(878),  // boolLit
			shift(879),  // intLit
			shift(880),  // floatLit
			shift(881),  // stringLit
			shift(882),  // kwdFn
		},
	},
	actionRow{ // S1284
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(474),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(493),  // (
			shift(1595), // )
			shift(31),   // !
			shift(32),   // ~
			shift(501),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(503),  // kwdIf
			nil,         // kwdElse
			shift(504),  // kwdFor
			shift(506),  // identifier
			shift(515),  // kwdNull
			shift(516),  // boolLit
			shift(517),  // intLit
			shift(518),  // floatLit
			shift(519),  // stringLit
			shift(520),  // kwdFn
		},
	},
	actionRow{ // S1285
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(521), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(539), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(546), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(548), // kwdIf
			nil,        // kwdElse
			shift(549), // kwdFor
			shift(551), // identifier
			shift(560), // kwdNull
			shift(561), // boolLit
			shift(562), // intLit
			shift(563), // floatLit
			shift(564), // stringLit
			shift(565), // kwdFn
		},
	},
	actionRow{ // S1286
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(868), // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1287
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1598), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1288
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			shift(1284), // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1599), // [
			nil,         // ]
			shift(1600), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1289
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(49), // }, reduce: PrefixExpression
			nil,        // kwdReturn
			reduce(49), // ,, reduce: PrefixExpression
			nil,        // :
			reduce(49), // lOr, reduce: PrefixExpression
			reduce(49), // lAnd, reduce: PrefixExpression
			reduce(49), // lNot, reduce: PrefixExpression
			reduce(49), // equals, reduce: PrefixExpression
			reduce(49), // lessOrGreater, reduce: PrefixExpression
			reduce(49), // or, reduce: PrefixExpression
			reduce(49), // xor, reduce: PrefixExpression
			reduce(49), // and, reduce: PrefixExpression
			reduce(49), // shift, reduce: PrefixExpression
			reduce(49), // +, reduce: PrefixExpression
			reduce(49), // -, reduce: PrefixExpression
			reduce(49), // product, reduce: PrefixExpression
			reduce(48), // (, reduce: PrefixExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(48), // [, reduce: PrefixExpression
			nil,        // ]
			reduce(48), // ., reduce: PrefixExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1290
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(55), // }, reduce: PrimaryExpr
			nil,        // kwdReturn
			reduce(55), // ,, reduce: PrimaryExpr
			nil,        // :
			reduce(55), // lOr, reduce: PrimaryExpr
			reduce(55), // lAnd, reduce: PrimaryExpr
			reduce(55), // lNot, reduce: PrimaryExpr
			reduce(55), // equals, reduce: PrimaryExpr
			reduce(55), // lessOrGreater, reduce: PrimaryExpr
			reduce(55), // or, reduce: PrimaryExpr
			reduce(55), // xor, reduce: PrimaryExpr
			reduce(55), // and, reduce: PrimaryExpr
			reduce(55), // shift, reduce: PrimaryExpr
			reduce(55), // +, reduce: PrimaryExpr
			reduce(55), // -, reduce: PrimaryExpr
			reduce(55), // product, reduce: PrimaryExpr
			reduce(55), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(55), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(55), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1291
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(57), // }, reduce: PrimaryExpr
			nil,        // kwdReturn
			reduce(57), // ,, reduce: PrimaryExpr
			nil,        // :
			reduce(57), // lOr, reduce: PrimaryExpr
			reduce(57), // lAnd, reduce: PrimaryExpr
			reduce(57), // lNot, reduce: PrimaryExpr
			reduce(57), // equals, reduce: PrimaryExpr
			reduce(57), // lessOrGreater, reduce: PrimaryExpr
			reduce(57), // or, reduce: PrimaryExpr
			reduce(57), // xor, reduce: PrimaryExpr
			reduce(57), // and, reduce: PrimaryExpr
			reduce(57), // shift, reduce: PrimaryExpr
			reduce(57), // +, reduce: PrimaryExpr
			reduce(57), // -, reduce: PrimaryExpr
			reduce(57), // product, reduce: PrimaryExpr
			reduce(57), // (, reduce: PrimaryExpr
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(57), // [, reduce: PrimaryExpr
			nil,        // ]
			reduce(57), // ., reduce: PrimaryExpr
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1292
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(79), // }, reduce: Operand
			nil,        // kwdReturn
			reduce(79), // ,, reduce: Operand
			nil,        // :
			reduce(79), // lOr, reduce: Operand
			reduce(79), // lAnd, reduce: Operand
			reduce(79), // lNot, reduce: Operand
			reduce(79), // equals, reduce: Operand
			reduce(79), // lessOrGreater, reduce: Operand
			reduce(79), // or, reduce: Operand
			reduce(79), // xor, reduce: Operand
			reduce(79), // and, reduce: Operand
			reduce(79), // shift, reduce: Operand
			reduce(79), // +, reduce: Operand
			reduce(79), // -, reduce: Operand
			reduce(79), // product, reduce: Operand
			reduce(79), // (, reduce: Operand
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(79), // [, reduce: Operand
			nil,        // ]
			reduce(79), // ., reduce: Operand
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1293
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(82), // }, reduce: Identifier
			nil,        // kwdReturn
			reduce(82), // ,, reduce: Identifier
			nil,        // :
			reduce(82), // lOr, reduce: Identifier
			reduce(82), // lAnd, reduce: Identifier
			reduce(82), // lNot, reduce: Identifier
			reduce(82), // equals, reduce: Identifier
			reduce(82), // lessOrGreater, reduce: Identifier
			reduce(82), // or, reduce: Identifier
			reduce(82), // xor, reduce: Identifier
			reduce(82), // and, reduce: Identifier
			reduce(82), // shift, reduce: Identifier
			reduce(82), // +, reduce: Identifier
			reduce(82), // -, reduce: Identifier
			reduce(82), // product, reduce: Identifier
			reduce(82), // (, reduce: Identifier
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(82), // [, reduce: Identifier
			nil,        // ]
			reduce(82), // ., reduce: Identifier
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1294
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(838), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(856), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(863), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(865), // kwdIf
			nil,        // kwdElse
			shift(866), // kwdFor
			shift(868), // identifier
			shift(877), // kwdNull
			shift(878), // boolLit
			shift(879), // intLit
			shift(880), // floatLit
			shift(881), // stringLit
			shift(882), // kwdFn
		},
	},
	actionRow{ // S1295
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(838), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(856), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(863), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(865), // kwdIf
			nil,        // kwdElse
			shift(866), // kwdFor
			shift(868), // identifier
			shift(877), // kwdNull
			shift(878), // boolLit
			shift(879), // intLit
			shift(880), // floatLit
			shift(881), // stringLit
			shift(882), // kwdFn
		},
	},
	actionRow{ // S1296
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(635),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1603), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1297
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(98), // }, reduce: ArrayLiteral
			nil,        // kwdReturn
			reduce(98), // ,, reduce: ArrayLiteral
			nil,        // :
			reduce(98), // lOr, reduce: ArrayLiteral
			reduce(98), // lAnd, reduce: ArrayLiteral
			reduce(98), // lNot, reduce: ArrayLiteral
			reduce(98), // equals, reduce: ArrayLiteral
			reduce(98), // lessOrGreater, reduce: ArrayLiteral
			reduce(98), // or, reduce: ArrayLiteral
			reduce(98), // xor, reduce: ArrayLiteral
			reduce(98), // and, reduce: ArrayLiteral
			reduce(98), // shift, reduce: ArrayLiteral
			reduce(98), // +, reduce: ArrayLiteral
			reduce(98), // -, reduce: ArrayLiteral
			reduce(98), // product, reduce: ArrayLiteral
			reduce(98), // (, reduce: ArrayLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(98), // [, reduce: ArrayLiteral
			nil,        // ]
			reduce(98), // ., reduce: ArrayLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1298
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(838), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(856), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(863), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(865), // kwdIf
			nil,        // kwdElse
			shift(866), // kwdFor
			shift(868), // identifier
			shift(877), // kwdNull
			shift(878), // boolLit
			shift(879), // intLit
			shift(880), // floatLit
			shift(881), // stringLit
			shift(882), // kwdFn
		},
	},
	actionRow{ // S1299
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1606), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1300
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1607), // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(736),  // kwdIf
			nil,         // kwdElse
			shift(737),  // kwdFor
			shift(739),  // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S1301
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(68), // }, reduce: ForExpression
			nil,        // kwdReturn
			reduce(68), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1302
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(63),   // {
			shift(1610), // }
			shift(65),   // kwdReturn
			shift(754),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(85),   // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(92),   // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(94),   // kwdIf
			nil,         // kwdElse
			shift(95),   // kwdFor
			shift(97),   // identifier
			shift(106),  // kwdNull
			shift(107),  // boolLit
			shift(108),  // intLit
			shift(109),  // floatLit
			shift(110),  // stringLit
			shift(111),  // kwdFn
		},
	},
	actionRow{ // S1303
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1611), // terminator
			shift(1613), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1304
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1614), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(796),  // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1305
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(838), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(856), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(863), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(865), // kwdIf
			nil,        // kwdElse
			shift(866), // kwdFor
			shift(868), // identifier
			shift(877), // kwdNull
			shift(878), // boolLit
			shift(879), // intLit
			shift(880), // floatLit
			shift(881), // stringLit
			shift(882), // kwdFn
		},
	},
	actionRow{ // S1306
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(60), // terminator, reduce: CallExpression
			nil,        // {
			reduce(60), // }, reduce: CallExpression
			nil,        // kwdReturn
			nil,        // ,
			reduce(60), // :, reduce: CallExpression
			reduce(60), // lOr, reduce: CallExpression
			reduce(60), // lAnd, reduce: CallExpression
			reduce(60), // lNot, reduce: CallExpression
			reduce(60), // equals, reduce: CallExpression
			reduce(60), // lessOrGreater, reduce: CallExpression
			reduce(60), // or, reduce: CallExpression
			reduce(60), // xor, reduce: CallExpression
			reduce(60), // and, reduce: CallExpression
			reduce(60), // shift, reduce: CallExpression
			reduce(60), // +, reduce: CallExpression
			reduce(60), // -, reduce: CallExpression
			reduce(60), // product, reduce: CallExpression
			reduce(60), // (, reduce: CallExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(60), // [, reduce: CallExpression
			nil,        // ]
			reduce(60), // ., reduce: CallExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1307
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(58), // terminator, reduce: IndexExpression
			nil,        // {
			reduce(58), // }, reduce: IndexExpression
			nil,        // kwdReturn
			nil,        // ,
			reduce(58), // :, reduce: IndexExpression
			reduce(58), // lOr, reduce: IndexExpression
			reduce(58), // lAnd, reduce: IndexExpression
			reduce(58), // lNot, reduce: IndexExpression
			reduce(58), // equals, reduce: IndexExpression
			reduce(58), // lessOrGreater, reduce: IndexExpression
			reduce(58), // or, reduce: IndexExpression
			reduce(58), // xor, reduce: IndexExpression
			reduce(58), // and, reduce: IndexExpression
			reduce(58), // shift, reduce: IndexExpression
			reduce(58), // +, reduce: IndexExpression
			reduce(58), // -, reduce: IndexExpression
			reduce(58), // product, reduce: IndexExpression
			reduce(58), // (, reduce: IndexExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(58), // [, reduce: IndexExpression
			nil,        // ]
			reduce(58), // ., reduce: IndexExpression
			reduce(58), // assign, reduce: IndexExpression
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1308
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1617), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1309
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(61), // terminator, reduce: SelectorExpression
			nil,        // {
			reduce(61), // }, reduce: SelectorExpression
			nil,        // kwdReturn
			nil,        // ,
			reduce(61), // :, reduce: SelectorExpression
			reduce(61), // lOr, reduce: SelectorExpression
			reduce(61), // lAnd, reduce: SelectorExpression
			reduce(61), // lNot, reduce: SelectorExpression
			reduce(61), // equals, reduce: SelectorExpression
			reduce(61), // lessOrGreater, reduce: SelectorExpression
			reduce(61), // or, reduce: SelectorExpression
			reduce(61), // xor, reduce: SelectorExpression
			reduce(61), // and, reduce: SelectorExpression
			reduce(61), // shift, reduce: SelectorExpression
			reduce(61), // +, reduce: SelectorExpression
			reduce(61), // -, reduce: SelectorExpression
			reduce(61), // product, reduce: SelectorExpression
			reduce(61), // (, reduce: SelectorExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(61), // [, reduce: SelectorExpression
			nil,        // ]
			reduce(61), // ., reduce: SelectorExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1310
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(916), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(94),  // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1311
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1620), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1312
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			reduce(9), // terminator, reduce: BlockStatement
			nil,       // {
			reduce(9), // }, reduce: BlockStatement
			nil,       // kwdReturn
			nil,       // ,
			reduce(9), // :, reduce: BlockStatement
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			reduce(9), // kwdElse, reduce: BlockStatement
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1313
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(70), // terminator, reduce: ForExpression
			nil,        // {
			reduce(70), // }, reduce: ForExpression
			nil,        // kwdReturn
			nil,        // ,
			reduce(70), // :, reduce: ForExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1314
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(63),  // {
			shift(913), // }
			shift(65),  // kwdReturn
			shift(671), // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(85),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(92),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(94),  // kwdIf
			nil,        // kwdElse
			shift(95),  // kwdFor
			shift(97),  // identifier
			shift(106), // kwdNull
			shift(107), // boolLit
			shift(108), // intLit
			shift(109), // floatLit
			shift(110), // stringLit
			shift(111), // kwdFn
		},
	},
	actionRow{ // S1315
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(916), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1316
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1314), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1317
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			reduce(8), // terminator, reduce: BlockStatement
			nil,       // {
			reduce(8), // }, reduce: BlockStatement
			nil,       // kwdReturn
			nil,       // ,
			reduce(8), // :, reduce: BlockStatement
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1318
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1314), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1319
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1626), // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1320
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(96), // terminator, reduce: FunctionLiteral
			nil,        // {
			reduce(96), // }, reduce: FunctionLiteral
			nil,        // kwdReturn
			nil,        // ,
			reduce(96), // :, reduce: FunctionLiteral
			reduce(96), // lOr, reduce: FunctionLiteral
			reduce(96), // lAnd, reduce: FunctionLiteral
			reduce(96), // lNot, reduce: FunctionLiteral
			reduce(96), // equals, reduce: FunctionLiteral
			reduce(96), // lessOrGreater, reduce: FunctionLiteral
			reduce(96), // or, reduce: FunctionLiteral
			reduce(96), // xor, reduce: FunctionLiteral
			reduce(96), // and, reduce: FunctionLiteral
			reduce(96), // shift, reduce: FunctionLiteral
			reduce(96), // +, reduce: FunctionLiteral
			reduce(96), // -, reduce: FunctionLiteral
			reduce(96), // product, reduce: FunctionLiteral
			reduce(96), // (, reduce: FunctionLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(96), // [, reduce: FunctionLiteral
			nil,        // ]
			reduce(96), // ., reduce: FunctionLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1321
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1628), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1322
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1321), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1323
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			reduce(100), // :, reduce: HashLiteral
			reduce(100), // lOr, reduce: HashLiteral
			reduce(100), // lAnd, reduce: HashLiteral
			reduce(100), // lNot, reduce: HashLiteral
			reduce(100), // equals, reduce: HashLiteral
			reduce(100), // lessOrGreater, reduce: HashLiteral
			reduce(100), // or, reduce: HashLiteral
			reduce(100), // xor, reduce: HashLiteral
			reduce(100), // and, reduce: HashLiteral
			reduce(100), // shift, reduce: HashLiteral
			reduce(100), // +, reduce: HashLiteral
			reduce(100), // -, reduce: HashLiteral
			reduce(100), // product, reduce: HashLiteral
			reduce(100), // (, reduce: HashLiteral
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(100), // [, reduce: HashLiteral
			nil,         // ]
			reduce(100), // ., reduce: HashLiteral
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1324
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			reduce(101), // :, reduce: HashLiteral
			reduce(101), // lOr, reduce: HashLiteral
			reduce(101), // lAnd, reduce: HashLiteral
			reduce(101), // lNot, reduce: HashLiteral
			reduce(101), // equals, reduce: HashLiteral
			reduce(101), // lessOrGreater, reduce: HashLiteral
			reduce(101), // or, reduce: HashLiteral
			reduce(101), // xor, reduce: HashLiteral
			reduce(101), // and, reduce: HashLiteral
			reduce(101), // shift, reduce: HashLiteral
			reduce(101), // +, reduce: HashLiteral
			reduce(101), // -, reduce: HashLiteral
			reduce(101), // product, reduce: HashLiteral
			reduce(101), // (, reduce: HashLiteral
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(101), // [, reduce: HashLiteral
			nil,         // ]
			reduce(101), // ., reduce: HashLiteral
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1325
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(23), // :, reduce: Term1
			reduce(23), // lOr, reduce: Term1
			shift(922), // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1326
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			reduce(45),  // :, reduce: Term11
			reduce(45),  // lOr, reduce: Term11
			reduce(45),  // lAnd, reduce: Term11
			reduce(45),  // lNot, reduce: Term11
			reduce(45),  // equals, reduce: Term11
			reduce(45),  // lessOrGreater, reduce: Term11
			reduce(45),  // or, reduce: Term11
			reduce(45),  // xor, reduce: Term11
			reduce(45),  // and, reduce: Term11
			reduce(45),  // shift, reduce: Term11
			reduce(45),  // +, reduce: Term11
			reduce(45),  // -, reduce: Term11
			reduce(45),  // product, reduce: Term11
			shift(933),  // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1343), // [
			nil,         // ]
			shift(1344), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1327
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(25), // :, reduce: Term2
			reduce(25), // lOr, reduce: Term2
			reduce(25), // lAnd, reduce: Term2
			shift(923), // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1328
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(27), // :, reduce: Term3
			reduce(27), // lOr, reduce: Term3
			reduce(27), // lAnd, reduce: Term3
			reduce(27), // lNot, reduce: Term3
			shift(924), // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1329
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(29), // :, reduce: Term4
			reduce(29), // lOr, reduce: Term4
			reduce(29), // lAnd, reduce: Term4
			reduce(29), // lNot, reduce: Term4
			reduce(29), // equals, reduce: Term4
			shift(925), // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1330
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(31), // :, reduce: Term5
			reduce(31), // lOr, reduce: Term5
			reduce(31), // lAnd, reduce: Term5
			reduce(31), // lNot, reduce: Term5
			reduce(31), // equals, reduce: Term5
			reduce(31), // lessOrGreater, reduce: Term5
			shift(926), // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1331
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(33), // :, reduce: Term6
			reduce(33), // lOr, reduce: Term6
			reduce(33), // lAnd, reduce: Term6
			reduce(33), // lNot, reduce: Term6
			reduce(33), // equals, reduce: Term6
			reduce(33), // lessOrGreater, reduce: Term6
			reduce(33), // or, reduce: Term6
			shift(927), // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1332
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(35), // :, reduce: Term7
			reduce(35), // lOr, reduce: Term7
			reduce(35), // lAnd, reduce: Term7
			reduce(35), // lNot, reduce: Term7
			reduce(35), // equals, reduce: Term7
			reduce(35), // lessOrGreater, reduce: Term7
			reduce(35), // or, reduce: Term7
			reduce(35), // xor, reduce: Term7
			shift(928), // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1333
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(37), // :, reduce: Term8
			reduce(37), // lOr, reduce: Term8
			reduce(37), // lAnd, reduce: Term8
			reduce(37), // lNot, reduce: Term8
			reduce(37), // equals, reduce: Term8
			reduce(37), // lessOrGreater, reduce: Term8
			reduce(37), // or, reduce: Term8
			reduce(37), // xor, reduce: Term8
			reduce(37), // and, reduce: Term8
			shift(929), // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1334
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(39), // :, reduce: Term9
			reduce(39), // lOr, reduce: Term9
			reduce(39), // lAnd, reduce: Term9
			reduce(39), // lNot, reduce: Term9
			reduce(39), // equals, reduce: Term9
			reduce(39), // lessOrGreater, reduce: Term9
			reduce(39), // or, reduce: Term9
			reduce(39), // xor, reduce: Term9
			reduce(39), // and, reduce: Term9
			reduce(39), // shift, reduce: Term9
			shift(930), // +
			shift(931), // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1335
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(41), // :, reduce: Term10
			reduce(41), // lOr, reduce: Term10
			reduce(41), // lAnd, reduce: Term10
			reduce(41), // lNot, reduce: Term10
			reduce(41), // equals, reduce: Term10
			reduce(41), // lessOrGreater, reduce: Term10
			reduce(41), // or, reduce: Term10
			reduce(41), // xor, reduce: Term10
			reduce(41), // and, reduce: Term10
			reduce(41), // shift, reduce: Term10
			reduce(41), // +, reduce: Term10
			reduce(41), // -, reduce: Term10
			shift(932), // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1336
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(42), // :, reduce: Term10
			reduce(42), // lOr, reduce: Term10
			reduce(42), // lAnd, reduce: Term10
			reduce(42), // lNot, reduce: Term10
			reduce(42), // equals, reduce: Term10
			reduce(42), // lessOrGreater, reduce: Term10
			reduce(42), // or, reduce: Term10
			reduce(42), // xor, reduce: Term10
			reduce(42), // and, reduce: Term10
			reduce(42), // shift, reduce: Term10
			reduce(42), // +, reduce: Term10
			reduce(42), // -, reduce: Term10
			shift(932), // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1337
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			reduce(44),  // :, reduce: Term11
			reduce(44),  // lOr, reduce: Term11
			reduce(44),  // lAnd, reduce: Term11
			reduce(44),  // lNot, reduce: Term11
			reduce(44),  // equals, reduce: Term11
			reduce(44),  // lessOrGreater, reduce: Term11
			reduce(44),  // or, reduce: Term11
			reduce(44),  // xor, reduce: Term11
			reduce(44),  // and, reduce: Term11
			reduce(44),  // shift, reduce: Term11
			reduce(44),  // +, reduce: Term11
			reduce(44),  // -, reduce: Term11
			reduce(44),  // product, reduce: Term11
			shift(933),  // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1343), // [
			nil,         // ]
			shift(1344), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1338
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(956),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1630), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1339
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(59), // :, reduce: CallExpression
			reduce(59), // lOr, reduce: CallExpression
			reduce(59), // lAnd, reduce: CallExpression
			reduce(59), // lNot, reduce: CallExpression
			reduce(59), // equals, reduce: CallExpression
			reduce(59), // lessOrGreater, reduce: CallExpression
			reduce(59), // or, reduce: CallExpression
			reduce(59), // xor, reduce: CallExpression
			reduce(59), // and, reduce: CallExpression
			reduce(59), // shift, reduce: CallExpression
			reduce(59), // +, reduce: CallExpression
			reduce(59), // -, reduce: CallExpression
			reduce(59), // product, reduce: CallExpression
			reduce(59), // (, reduce: CallExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(59), // [, reduce: CallExpression
			nil,        // ]
			reduce(59), // ., reduce: CallExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1340
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1631), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1341
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(61), // :, reduce: SelectorExpression
			reduce(61), // lOr, reduce: SelectorExpression
			reduce(61), // lAnd, reduce: SelectorExpression
			reduce(61), // lNot, reduce: SelectorExpression
			reduce(61), // equals, reduce: SelectorExpression
			reduce(61), // lessOrGreater, reduce: SelectorExpression
			reduce(61), // or, reduce: SelectorExpression
			reduce(61), // xor, reduce: SelectorExpression
			reduce(61), // and, reduce: SelectorExpression
			reduce(61), // shift, reduce: SelectorExpression
			reduce(61), // +, reduce: SelectorExpression
			reduce(61), // -, reduce: SelectorExpression
			reduce(61), // product, reduce: SelectorExpression
			reduce(61), // (, reduce: SelectorExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(61), // [, reduce: SelectorExpression
			nil,        // ]
			reduce(61), // ., reduce: SelectorExpression
			reduce(61), // assign, reduce: SelectorExpression
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1342
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(47), // :, reduce: Term12
			reduce(47), // lOr, reduce: Term12
			reduce(47), // lAnd, reduce: Term12
			reduce(47), // lNot, reduce: Term12
			reduce(47), // equals, reduce: Term12
			reduce(47), // lessOrGreater, reduce: Term12
			reduce(47), // or, reduce: Term12
			reduce(47), // xor, reduce: Term12
			reduce(47), // and, reduce: Term12
			reduce(47), // shift, reduce: Term12
			reduce(47), // +, reduce: Term12
			reduce(47), // -, reduce: Term12
			reduce(47), // product, reduce: Term12
			reduce(47), // (, reduce: Term12
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(47), // [, reduce: Term12
			nil,        // ]
			reduce(47), // ., reduce: Term12
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1343
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(521), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(539), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(546), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(548), // kwdIf
			nil,        // kwdElse
			shift(549), // kwdFor
			shift(551), // identifier
			shift(560), // kwdNull
			shift(561), // boolLit
			shift(562), // intLit
			shift(563), // floatLit
			shift(564), // stringLit
			shift(565), // kwdFn
		},
	},
	actionRow{ // S1344
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(942), // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1345
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(63), // :, reduce: AssignExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1346
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(64), // :, reduce: AssignExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1347
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(99), // :, reduce: ArrayLiteral
			reduce(99), // lOr, reduce: ArrayLiteral
			reduce(99), // lAnd, reduce: ArrayLiteral
			reduce(99), // lNot, reduce: ArrayLiteral
			reduce(99), // equals, reduce: ArrayLiteral
			reduce(99), // lessOrGreater, reduce: ArrayLiteral
			reduce(99), // or, reduce: ArrayLiteral
			reduce(99), // xor, reduce: ArrayLiteral
			reduce(99), // and, reduce: ArrayLiteral
			reduce(99), // shift, reduce: ArrayLiteral
			reduce(99), // +, reduce: ArrayLiteral
			reduce(99), // -, reduce: ArrayLiteral
			reduce(99), // product, reduce: ArrayLiteral
			reduce(99), // (, reduce: ArrayLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(99), // [, reduce: ArrayLiteral
			nil,        // ]
			reduce(99), // ., reduce: ArrayLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1348
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(62), // :, reduce: AssignExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1349
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			reduce(65),  // :, reduce: IfExpression
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			shift(1634), // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1350
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1636), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1351
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1638), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1352
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1640), // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1353
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1641), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1354
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			reduce(9), // :, reduce: BlockStatement
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1355
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1642), // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(736),  // kwdIf
			nil,         // kwdElse
			shift(737),  // kwdFor
			shift(739),  // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S1356
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(69), // :, reduce: ForExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1357
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1354), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1358
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1645), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1359
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(1233), // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1646), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1360
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			reduce(100), // ,, reduce: HashLiteral
			nil,         // :
			reduce(100), // lOr, reduce: HashLiteral
			reduce(100), // lAnd, reduce: HashLiteral
			reduce(100), // lNot, reduce: HashLiteral
			reduce(100), // equals, reduce: HashLiteral
			reduce(100), // lessOrGreater, reduce: HashLiteral
			reduce(100), // or, reduce: HashLiteral
			reduce(100), // xor, reduce: HashLiteral
			reduce(100), // and, reduce: HashLiteral
			reduce(100), // shift, reduce: HashLiteral
			reduce(100), // +, reduce: HashLiteral
			reduce(100), // -, reduce: HashLiteral
			reduce(100), // product, reduce: HashLiteral
			reduce(100), // (, reduce: HashLiteral
			reduce(100), // ), reduce: HashLiteral
			nil,         // !
			nil,         // ~
			reduce(100), // [, reduce: HashLiteral
			nil,         // ]
			reduce(100), // ., reduce: HashLiteral
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1361
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			reduce(101), // ,, reduce: HashLiteral
			nil,         // :
			reduce(101), // lOr, reduce: HashLiteral
			reduce(101), // lAnd, reduce: HashLiteral
			reduce(101), // lNot, reduce: HashLiteral
			reduce(101), // equals, reduce: HashLiteral
			reduce(101), // lessOrGreater, reduce: HashLiteral
			reduce(101), // or, reduce: HashLiteral
			reduce(101), // xor, reduce: HashLiteral
			reduce(101), // and, reduce: HashLiteral
			reduce(101), // shift, reduce: HashLiteral
			reduce(101), // +, reduce: HashLiteral
			reduce(101), // -, reduce: HashLiteral
			reduce(101), // product, reduce: HashLiteral
			reduce(101), // (, reduce: HashLiteral
			reduce(101), // ), reduce: HashLiteral
			nil,         // !
			nil,         // ~
			reduce(101), // [, reduce: HashLiteral
			nil,         // ]
			reduce(101), // ., reduce: HashLiteral
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1362
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(14), // ,, reduce: ExpressionList
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(14), // ), reduce: ExpressionList
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1363
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(23), // ,, reduce: Term1
			nil,        // :
			reduce(23), // lOr, reduce: Term1
			shift(959), // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(23), // ), reduce: Term1
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1364
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			reduce(45),  // ,, reduce: Term11
			nil,         // :
			reduce(45),  // lOr, reduce: Term11
			reduce(45),  // lAnd, reduce: Term11
			reduce(45),  // lNot, reduce: Term11
			reduce(45),  // equals, reduce: Term11
			reduce(45),  // lessOrGreater, reduce: Term11
			reduce(45),  // or, reduce: Term11
			reduce(45),  // xor, reduce: Term11
			reduce(45),  // and, reduce: Term11
			reduce(45),  // shift, reduce: Term11
			reduce(45),  // +, reduce: Term11
			reduce(45),  // -, reduce: Term11
			reduce(45),  // product, reduce: Term11
			shift(970),  // (
			reduce(45),  // ), reduce: Term11
			nil,         // !
			nil,         // ~
			shift(1381), // [
			nil,         // ]
			shift(1382), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1365
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(25), // ,, reduce: Term2
			nil,        // :
			reduce(25), // lOr, reduce: Term2
			reduce(25), // lAnd, reduce: Term2
			shift(960), // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(25), // ), reduce: Term2
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1366
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(27), // ,, reduce: Term3
			nil,        // :
			reduce(27), // lOr, reduce: Term3
			reduce(27), // lAnd, reduce: Term3
			reduce(27), // lNot, reduce: Term3
			shift(961), // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(27), // ), reduce: Term3
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1367
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(29), // ,, reduce: Term4
			nil,        // :
			reduce(29), // lOr, reduce: Term4
			reduce(29), // lAnd, reduce: Term4
			reduce(29), // lNot, reduce: Term4
			reduce(29), // equals, reduce: Term4
			shift(962), // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(29), // ), reduce: Term4
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1368
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(31), // ,, reduce: Term5
			nil,        // :
			reduce(31), // lOr, reduce: Term5
			reduce(31), // lAnd, reduce: Term5
			reduce(31), // lNot, reduce: Term5
			reduce(31), // equals, reduce: Term5
			reduce(31), // lessOrGreater, reduce: Term5
			shift(963), // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(31), // ), reduce: Term5
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1369
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(33), // ,, reduce: Term6
			nil,        // :
			reduce(33), // lOr, reduce: Term6
			reduce(33), // lAnd, reduce: Term6
			reduce(33), // lNot, reduce: Term6
			reduce(33), // equals, reduce: Term6
			reduce(33), // lessOrGreater, reduce: Term6
			reduce(33), // or, reduce: Term6
			shift(964), // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(33), // ), reduce: Term6
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1370
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(35), // ,, reduce: Term7
			nil,        // :
			reduce(35), // lOr, reduce: Term7
			reduce(35), // lAnd, reduce: Term7
			reduce(35), // lNot, reduce: Term7
			reduce(35), // equals, reduce: Term7
			reduce(35), // lessOrGreater, reduce: Term7
			reduce(35), // or, reduce: Term7
			reduce(35), // xor, reduce: Term7
			shift(965), // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(35), // ), reduce: Term7
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1371
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(37), // ,, reduce: Term8
			nil,        // :
			reduce(37), // lOr, reduce: Term8
			reduce(37), // lAnd, reduce: Term8
			reduce(37), // lNot, reduce: Term8
			reduce(37), // equals, reduce: Term8
			reduce(37), // lessOrGreater, reduce: Term8
			reduce(37), // or, reduce: Term8
			reduce(37), // xor, reduce: Term8
			reduce(37), // and, reduce: Term8
			shift(966), // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(37), // ), reduce: Term8
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1372
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(39), // ,, reduce: Term9
			nil,        // :
			reduce(39), // lOr, reduce: Term9
			reduce(39), // lAnd, reduce: Term9
			reduce(39), // lNot, reduce: Term9
			reduce(39), // equals, reduce: Term9
			reduce(39), // lessOrGreater, reduce: Term9
			reduce(39), // or, reduce: Term9
			reduce(39), // xor, reduce: Term9
			reduce(39), // and, reduce: Term9
			reduce(39), // shift, reduce: Term9
			shift(967), // +
			shift(968), // -
			nil,        // product
			nil,        // (
			reduce(39), // ), reduce: Term9
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1373
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(41), // ,, reduce: Term10
			nil,        // :
			reduce(41), // lOr, reduce: Term10
			reduce(41), // lAnd, reduce: Term10
			reduce(41), // lNot, reduce: Term10
			reduce(41), // equals, reduce: Term10
			reduce(41), // lessOrGreater, reduce: Term10
			reduce(41), // or, reduce: Term10
			reduce(41), // xor, reduce: Term10
			reduce(41), // and, reduce: Term10
			reduce(41), // shift, reduce: Term10
			reduce(41), // +, reduce: Term10
			reduce(41), // -, reduce: Term10
			shift(969), // product
			nil,        // (
			reduce(41), // ), reduce: Term10
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1374
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(42), // ,, reduce: Term10
			nil,        // :
			reduce(42), // lOr, reduce: Term10
			reduce(42), // lAnd, reduce: Term10
			reduce(42), // lNot, reduce: Term10
			reduce(42), // equals, reduce: Term10
			reduce(42), // lessOrGreater, reduce: Term10
			reduce(42), // or, reduce: Term10
			reduce(42), // xor, reduce: Term10
			reduce(42), // and, reduce: Term10
			reduce(42), // shift, reduce: Term10
			reduce(42), // +, reduce: Term10
			reduce(42), // -, reduce: Term10
			shift(969), // product
			nil,        // (
			reduce(42), // ), reduce: Term10
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1375
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			reduce(44),  // ,, reduce: Term11
			nil,         // :
			reduce(44),  // lOr, reduce: Term11
			reduce(44),  // lAnd, reduce: Term11
			reduce(44),  // lNot, reduce: Term11
			reduce(44),  // equals, reduce: Term11
			reduce(44),  // lessOrGreater, reduce: Term11
			reduce(44),  // or, reduce: Term11
			reduce(44),  // xor, reduce: Term11
			reduce(44),  // and, reduce: Term11
			reduce(44),  // shift, reduce: Term11
			reduce(44),  // +, reduce: Term11
			reduce(44),  // -, reduce: Term11
			reduce(44),  // product, reduce: Term11
			shift(970),  // (
			reduce(44),  // ), reduce: Term11
			nil,         // !
			nil,         // ~
			shift(1381), // [
			nil,         // ]
			shift(1382), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1376
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(956),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1647), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1377
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(59), // ,, reduce: CallExpression
			nil,        // :
			reduce(59), // lOr, reduce: CallExpression
			reduce(59), // lAnd, reduce: CallExpression
			reduce(59), // lNot, reduce: CallExpression
			reduce(59), // equals, reduce: CallExpression
			reduce(59), // lessOrGreater, reduce: CallExpression
			reduce(59), // or, reduce: CallExpression
			reduce(59), // xor, reduce: CallExpression
			reduce(59), // and, reduce: CallExpression
			reduce(59), // shift, reduce: CallExpression
			reduce(59), // +, reduce: CallExpression
			reduce(59), // -, reduce: CallExpression
			reduce(59), // product, reduce: CallExpression
			reduce(59), // (, reduce: CallExpression
			reduce(59), // ), reduce: CallExpression
			nil,        // !
			nil,        // ~
			reduce(59), // [, reduce: CallExpression
			nil,        // ]
			reduce(59), // ., reduce: CallExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1378
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1648), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1379
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(61), // ,, reduce: SelectorExpression
			nil,        // :
			reduce(61), // lOr, reduce: SelectorExpression
			reduce(61), // lAnd, reduce: SelectorExpression
			reduce(61), // lNot, reduce: SelectorExpression
			reduce(61), // equals, reduce: SelectorExpression
			reduce(61), // lessOrGreater, reduce: SelectorExpression
			reduce(61), // or, reduce: SelectorExpression
			reduce(61), // xor, reduce: SelectorExpression
			reduce(61), // and, reduce: SelectorExpression
			reduce(61), // shift, reduce: SelectorExpression
			reduce(61), // +, reduce: SelectorExpression
			reduce(61), // -, reduce: SelectorExpression
			reduce(61), // product, reduce: SelectorExpression
			reduce(61), // (, reduce: SelectorExpression
			reduce(61), // ), reduce: SelectorExpression
			nil,        // !
			nil,        // ~
			reduce(61), // [, reduce: SelectorExpression
			nil,        // ]
			reduce(61), // ., reduce: SelectorExpression
			reduce(61), // assign, reduce: SelectorExpression
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1380
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(47), // ,, reduce: Term12
			nil,        // :
			reduce(47), // lOr, reduce: Term12
			reduce(47), // lAnd, reduce: Term12
			reduce(47), // lNot, reduce: Term12
			reduce(47), // equals, reduce: Term12
			reduce(47), // lessOrGreater, reduce: Term12
			reduce(47), // or, reduce: Term12
			reduce(47), // xor, reduce: Term12
			reduce(47), // and, reduce: Term12
			reduce(47), // shift, reduce: Term12
			reduce(47), // +, reduce: Term12
			reduce(47), // -, reduce: Term12
			reduce(47), // product, reduce: Term12
			reduce(47), // (, reduce: Term12
			reduce(47), // ), reduce: Term12
			nil,        // !
			nil,        // ~
			reduce(47), // [, reduce: Term12
			nil,        // ]
			reduce(47), // ., reduce: Term12
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1381
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(521), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(539), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(546), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(548), // kwdIf
			nil,        // kwdElse
			shift(549), // kwdFor
			shift(551), // identifier
			shift(560), // kwdNull
			shift(561), // boolLit
			shift(562), // intLit
			shift(563), // floatLit
			shift(564), // stringLit
			shift(565), // kwdFn
		},
	},
	actionRow{ // S1382
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			shift(979), // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1383
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(63), // ,, reduce: AssignExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(63), // ), reduce: AssignExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1384
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(64), // ,, reduce: AssignExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(64), // ), reduce: AssignExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1385
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(99), // ,, reduce: ArrayLiteral
			nil,        // :
			reduce(99), // lOr, reduce: ArrayLiteral
			reduce(99), // lAnd, reduce: ArrayLiteral
			reduce(99), // lNot, reduce: ArrayLiteral
			reduce(99), // equals, reduce: ArrayLiteral
			reduce(99), // lessOrGreater, reduce: ArrayLiteral
			reduce(99), // or, reduce: ArrayLiteral
			reduce(99), // xor, reduce: ArrayLiteral
			reduce(99), // and, reduce: ArrayLiteral
			reduce(99), // shift, reduce: ArrayLiteral
			reduce(99), // +, reduce: ArrayLiteral
			reduce(99), // -, reduce: ArrayLiteral
			reduce(99), // product, reduce: ArrayLiteral
			reduce(99), // (, reduce: ArrayLiteral
			reduce(99), // ), reduce: ArrayLiteral
			nil,        // !
			nil,        // ~
			reduce(99), // [, reduce: ArrayLiteral
			nil,        // ]
			reduce(99), // ., reduce: ArrayLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1386
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(62), // ,, reduce: AssignExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(62), // ), reduce: AssignExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1387
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			reduce(65),  // ,, reduce: IfExpression
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			reduce(65),  // ), reduce: IfExpression
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			shift(1651), // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1388
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1653), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1389
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1655), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1390
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1657), // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1391
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1658), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1392
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			reduce(9), // ,, reduce: BlockStatement
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			reduce(9), // ), reduce: BlockStatement
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1393
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1659), // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(736),  // kwdIf
			nil,         // kwdElse
			shift(737),  // kwdFor
			shift(739),  // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S1394
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(69), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(69), // ), reduce: ForExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1395
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1392), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1396
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1662), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1397
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(1233), // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1663), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1398
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(100), // lOr, reduce: HashLiteral
			reduce(100), // lAnd, reduce: HashLiteral
			reduce(100), // lNot, reduce: HashLiteral
			reduce(100), // equals, reduce: HashLiteral
			reduce(100), // lessOrGreater, reduce: HashLiteral
			reduce(100), // or, reduce: HashLiteral
			reduce(100), // xor, reduce: HashLiteral
			reduce(100), // and, reduce: HashLiteral
			reduce(100), // shift, reduce: HashLiteral
			reduce(100), // +, reduce: HashLiteral
			reduce(100), // -, reduce: HashLiteral
			reduce(100), // product, reduce: HashLiteral
			reduce(100), // (, reduce: HashLiteral
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(100), // [, reduce: HashLiteral
			reduce(100), // ], reduce: HashLiteral
			reduce(100), // ., reduce: HashLiteral
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1399
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(101), // lOr, reduce: HashLiteral
			reduce(101), // lAnd, reduce: HashLiteral
			reduce(101), // lNot, reduce: HashLiteral
			reduce(101), // equals, reduce: HashLiteral
			reduce(101), // lessOrGreater, reduce: HashLiteral
			reduce(101), // or, reduce: HashLiteral
			reduce(101), // xor, reduce: HashLiteral
			reduce(101), // and, reduce: HashLiteral
			reduce(101), // shift, reduce: HashLiteral
			reduce(101), // +, reduce: HashLiteral
			reduce(101), // -, reduce: HashLiteral
			reduce(101), // product, reduce: HashLiteral
			reduce(101), // (, reduce: HashLiteral
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(101), // [, reduce: HashLiteral
			reduce(101), // ], reduce: HashLiteral
			reduce(101), // ., reduce: HashLiteral
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1400
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(23), // lOr, reduce: Term1
			shift(995), // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(23), // ], reduce: Term1
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1401
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(45),  // lOr, reduce: Term11
			reduce(45),  // lAnd, reduce: Term11
			reduce(45),  // lNot, reduce: Term11
			reduce(45),  // equals, reduce: Term11
			reduce(45),  // lessOrGreater, reduce: Term11
			reduce(45),  // or, reduce: Term11
			reduce(45),  // xor, reduce: Term11
			reduce(45),  // and, reduce: Term11
			reduce(45),  // shift, reduce: Term11
			reduce(45),  // +, reduce: Term11
			reduce(45),  // -, reduce: Term11
			reduce(45),  // product, reduce: Term11
			shift(1006), // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1418), // [
			reduce(45),  // ], reduce: Term11
			shift(1419), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1402
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(25), // lOr, reduce: Term2
			reduce(25), // lAnd, reduce: Term2
			shift(996), // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(25), // ], reduce: Term2
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1403
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(27), // lOr, reduce: Term3
			reduce(27), // lAnd, reduce: Term3
			reduce(27), // lNot, reduce: Term3
			shift(997), // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(27), // ], reduce: Term3
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1404
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(29), // lOr, reduce: Term4
			reduce(29), // lAnd, reduce: Term4
			reduce(29), // lNot, reduce: Term4
			reduce(29), // equals, reduce: Term4
			shift(998), // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(29), // ], reduce: Term4
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1405
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(31), // lOr, reduce: Term5
			reduce(31), // lAnd, reduce: Term5
			reduce(31), // lNot, reduce: Term5
			reduce(31), // equals, reduce: Term5
			reduce(31), // lessOrGreater, reduce: Term5
			shift(999), // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(31), // ], reduce: Term5
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1406
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(33),  // lOr, reduce: Term6
			reduce(33),  // lAnd, reduce: Term6
			reduce(33),  // lNot, reduce: Term6
			reduce(33),  // equals, reduce: Term6
			reduce(33),  // lessOrGreater, reduce: Term6
			reduce(33),  // or, reduce: Term6
			shift(1000), // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			reduce(33),  // ], reduce: Term6
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1407
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(35),  // lOr, reduce: Term7
			reduce(35),  // lAnd, reduce: Term7
			reduce(35),  // lNot, reduce: Term7
			reduce(35),  // equals, reduce: Term7
			reduce(35),  // lessOrGreater, reduce: Term7
			reduce(35),  // or, reduce: Term7
			reduce(35),  // xor, reduce: Term7
			shift(1001), // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			reduce(35),  // ], reduce: Term7
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1408
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(37),  // lOr, reduce: Term8
			reduce(37),  // lAnd, reduce: Term8
			reduce(37),  // lNot, reduce: Term8
			reduce(37),  // equals, reduce: Term8
			reduce(37),  // lessOrGreater, reduce: Term8
			reduce(37),  // or, reduce: Term8
			reduce(37),  // xor, reduce: Term8
			reduce(37),  // and, reduce: Term8
			shift(1002), // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			reduce(37),  // ], reduce: Term8
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1409
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(39),  // lOr, reduce: Term9
			reduce(39),  // lAnd, reduce: Term9
			reduce(39),  // lNot, reduce: Term9
			reduce(39),  // equals, reduce: Term9
			reduce(39),  // lessOrGreater, reduce: Term9
			reduce(39),  // or, reduce: Term9
			reduce(39),  // xor, reduce: Term9
			reduce(39),  // and, reduce: Term9
			reduce(39),  // shift, reduce: Term9
			shift(1003), // +
			shift(1004), // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			reduce(39),  // ], reduce: Term9
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1410
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(41),  // lOr, reduce: Term10
			reduce(41),  // lAnd, reduce: Term10
			reduce(41),  // lNot, reduce: Term10
			reduce(41),  // equals, reduce: Term10
			reduce(41),  // lessOrGreater, reduce: Term10
			reduce(41),  // or, reduce: Term10
			reduce(41),  // xor, reduce: Term10
			reduce(41),  // and, reduce: Term10
			reduce(41),  // shift, reduce: Term10
			reduce(41),  // +, reduce: Term10
			reduce(41),  // -, reduce: Term10
			shift(1005), // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			reduce(41),  // ], reduce: Term10
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1411
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(42),  // lOr, reduce: Term10
			reduce(42),  // lAnd, reduce: Term10
			reduce(42),  // lNot, reduce: Term10
			reduce(42),  // equals, reduce: Term10
			reduce(42),  // lessOrGreater, reduce: Term10
			reduce(42),  // or, reduce: Term10
			reduce(42),  // xor, reduce: Term10
			reduce(42),  // and, reduce: Term10
			reduce(42),  // shift, reduce: Term10
			reduce(42),  // +, reduce: Term10
			reduce(42),  // -, reduce: Term10
			shift(1005), // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			reduce(42),  // ], reduce: Term10
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1412
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(44),  // lOr, reduce: Term11
			reduce(44),  // lAnd, reduce: Term11
			reduce(44),  // lNot, reduce: Term11
			reduce(44),  // equals, reduce: Term11
			reduce(44),  // lessOrGreater, reduce: Term11
			reduce(44),  // or, reduce: Term11
			reduce(44),  // xor, reduce: Term11
			reduce(44),  // and, reduce: Term11
			reduce(44),  // shift, reduce: Term11
			reduce(44),  // +, reduce: Term11
			reduce(44),  // -, reduce: Term11
			reduce(44),  // product, reduce: Term11
			shift(1006), // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1418), // [
			reduce(44),  // ], reduce: Term11
			shift(1419), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1413
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(956),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1664), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1414
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(59), // lOr, reduce: CallExpression
			reduce(59), // lAnd, reduce: CallExpression
			reduce(59), // lNot, reduce: CallExpression
			reduce(59), // equals, reduce: CallExpression
			reduce(59), // lessOrGreater, reduce: CallExpression
			reduce(59), // or, reduce: CallExpression
			reduce(59), // xor, reduce: CallExpression
			reduce(59), // and, reduce: CallExpression
			reduce(59), // shift, reduce: CallExpression
			reduce(59), // +, reduce: CallExpression
			reduce(59), // -, reduce: CallExpression
			reduce(59), // product, reduce: CallExpression
			reduce(59), // (, reduce: CallExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(59), // [, reduce: CallExpression
			reduce(59), // ], reduce: CallExpression
			reduce(59), // ., reduce: CallExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1415
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1665), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1416
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(61), // lOr, reduce: SelectorExpression
			reduce(61), // lAnd, reduce: SelectorExpression
			reduce(61), // lNot, reduce: SelectorExpression
			reduce(61), // equals, reduce: SelectorExpression
			reduce(61), // lessOrGreater, reduce: SelectorExpression
			reduce(61), // or, reduce: SelectorExpression
			reduce(61), // xor, reduce: SelectorExpression
			reduce(61), // and, reduce: SelectorExpression
			reduce(61), // shift, reduce: SelectorExpression
			reduce(61), // +, reduce: SelectorExpression
			reduce(61), // -, reduce: SelectorExpression
			reduce(61), // product, reduce: SelectorExpression
			reduce(61), // (, reduce: SelectorExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(61), // [, reduce: SelectorExpression
			reduce(61), // ], reduce: SelectorExpression
			reduce(61), // ., reduce: SelectorExpression
			reduce(61), // assign, reduce: SelectorExpression
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1417
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(47), // lOr, reduce: Term12
			reduce(47), // lAnd, reduce: Term12
			reduce(47), // lNot, reduce: Term12
			reduce(47), // equals, reduce: Term12
			reduce(47), // lessOrGreater, reduce: Term12
			reduce(47), // or, reduce: Term12
			reduce(47), // xor, reduce: Term12
			reduce(47), // and, reduce: Term12
			reduce(47), // shift, reduce: Term12
			reduce(47), // +, reduce: Term12
			reduce(47), // -, reduce: Term12
			reduce(47), // product, reduce: Term12
			reduce(47), // (, reduce: Term12
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(47), // [, reduce: Term12
			reduce(47), // ], reduce: Term12
			reduce(47), // ., reduce: Term12
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1418
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(521), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(539), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(546), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(548), // kwdIf
			nil,        // kwdElse
			shift(549), // kwdFor
			shift(551), // identifier
			shift(560), // kwdNull
			shift(561), // boolLit
			shift(562), // intLit
			shift(563), // floatLit
			shift(564), // stringLit
			shift(565), // kwdFn
		},
	},
	actionRow{ // S1419
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1015), // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1420
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(63), // ], reduce: AssignExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1421
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(64), // ], reduce: AssignExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1422
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(99), // lOr, reduce: ArrayLiteral
			reduce(99), // lAnd, reduce: ArrayLiteral
			reduce(99), // lNot, reduce: ArrayLiteral
			reduce(99), // equals, reduce: ArrayLiteral
			reduce(99), // lessOrGreater, reduce: ArrayLiteral
			reduce(99), // or, reduce: ArrayLiteral
			reduce(99), // xor, reduce: ArrayLiteral
			reduce(99), // and, reduce: ArrayLiteral
			reduce(99), // shift, reduce: ArrayLiteral
			reduce(99), // +, reduce: ArrayLiteral
			reduce(99), // -, reduce: ArrayLiteral
			reduce(99), // product, reduce: ArrayLiteral
			reduce(99), // (, reduce: ArrayLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(99), // [, reduce: ArrayLiteral
			reduce(99), // ], reduce: ArrayLiteral
			reduce(99), // ., reduce: ArrayLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1423
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(62), // ], reduce: AssignExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1424
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			reduce(65),  // ], reduce: IfExpression
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			shift(1668), // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1425
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1670), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1426
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1672), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1427
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1674), // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1428
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1675), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1429
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			reduce(9), // ], reduce: BlockStatement
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1430
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1676), // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(736),  // kwdIf
			nil,         // kwdElse
			shift(737),  // kwdFor
			shift(739),  // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S1431
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(69), // ], reduce: ForExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1432
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1429), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1433
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1679), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1434
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(1233), // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1680), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1435
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(60), // lOr, reduce: CallExpression
			reduce(60), // lAnd, reduce: CallExpression
			reduce(60), // lNot, reduce: CallExpression
			reduce(60), // equals, reduce: CallExpression
			reduce(60), // lessOrGreater, reduce: CallExpression
			reduce(60), // or, reduce: CallExpression
			reduce(60), // xor, reduce: CallExpression
			reduce(60), // and, reduce: CallExpression
			reduce(60), // shift, reduce: CallExpression
			reduce(60), // +, reduce: CallExpression
			reduce(60), // -, reduce: CallExpression
			reduce(60), // product, reduce: CallExpression
			reduce(60), // (, reduce: CallExpression
			reduce(60), // ), reduce: CallExpression
			nil,        // !
			nil,        // ~
			reduce(60), // [, reduce: CallExpression
			nil,        // ]
			reduce(60), // ., reduce: CallExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1436
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(58), // lOr, reduce: IndexExpression
			reduce(58), // lAnd, reduce: IndexExpression
			reduce(58), // lNot, reduce: IndexExpression
			reduce(58), // equals, reduce: IndexExpression
			reduce(58), // lessOrGreater, reduce: IndexExpression
			reduce(58), // or, reduce: IndexExpression
			reduce(58), // xor, reduce: IndexExpression
			reduce(58), // and, reduce: IndexExpression
			reduce(58), // shift, reduce: IndexExpression
			reduce(58), // +, reduce: IndexExpression
			reduce(58), // -, reduce: IndexExpression
			reduce(58), // product, reduce: IndexExpression
			reduce(58), // (, reduce: IndexExpression
			reduce(58), // ), reduce: IndexExpression
			nil,        // !
			nil,        // ~
			reduce(58), // [, reduce: IndexExpression
			nil,        // ]
			reduce(58), // ., reduce: IndexExpression
			reduce(58), // assign, reduce: IndexExpression
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1437
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1681), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1438
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(61), // lOr, reduce: SelectorExpression
			reduce(61), // lAnd, reduce: SelectorExpression
			reduce(61), // lNot, reduce: SelectorExpression
			reduce(61), // equals, reduce: SelectorExpression
			reduce(61), // lessOrGreater, reduce: SelectorExpression
			reduce(61), // or, reduce: SelectorExpression
			reduce(61), // xor, reduce: SelectorExpression
			reduce(61), // and, reduce: SelectorExpression
			reduce(61), // shift, reduce: SelectorExpression
			reduce(61), // +, reduce: SelectorExpression
			reduce(61), // -, reduce: SelectorExpression
			reduce(61), // product, reduce: SelectorExpression
			reduce(61), // (, reduce: SelectorExpression
			reduce(61), // ), reduce: SelectorExpression
			nil,        // !
			nil,        // ~
			reduce(61), // [, reduce: SelectorExpression
			nil,        // ]
			reduce(61), // ., reduce: SelectorExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1439
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1061), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(156),  // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1440
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1684), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1441
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			reduce(9), // ), reduce: BlockStatement
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			reduce(9), // kwdElse, reduce: BlockStatement
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1442
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(70), // ), reduce: ForExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1443
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(63),   // {
			shift(1058), // }
			shift(65),   // kwdReturn
			shift(671),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(85),   // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(92),   // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(94),   // kwdIf
			nil,         // kwdElse
			shift(95),   // kwdFor
			shift(97),   // identifier
			shift(106),  // kwdNull
			shift(107),  // boolLit
			shift(108),  // intLit
			shift(109),  // floatLit
			shift(110),  // stringLit
			shift(111),  // kwdFn
		},
	},
	actionRow{ // S1444
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1061), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1445
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1443), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1446
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			reduce(8), // ), reduce: BlockStatement
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1447
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1443), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1448
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1690), // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1449
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(96), // lOr, reduce: FunctionLiteral
			reduce(96), // lAnd, reduce: FunctionLiteral
			reduce(96), // lNot, reduce: FunctionLiteral
			reduce(96), // equals, reduce: FunctionLiteral
			reduce(96), // lessOrGreater, reduce: FunctionLiteral
			reduce(96), // or, reduce: FunctionLiteral
			reduce(96), // xor, reduce: FunctionLiteral
			reduce(96), // and, reduce: FunctionLiteral
			reduce(96), // shift, reduce: FunctionLiteral
			reduce(96), // +, reduce: FunctionLiteral
			reduce(96), // -, reduce: FunctionLiteral
			reduce(96), // product, reduce: FunctionLiteral
			reduce(96), // (, reduce: FunctionLiteral
			reduce(96), // ), reduce: FunctionLiteral
			nil,        // !
			nil,        // ~
			reduce(96), // [, reduce: FunctionLiteral
			nil,        // ]
			reduce(96), // ., reduce: FunctionLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1450
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1692), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1451
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1450), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1452
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(58), // $, reduce: IndexExpression
			reduce(58), // terminator, reduce: IndexExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(58), // lOr, reduce: IndexExpression
			reduce(58), // lAnd, reduce: IndexExpression
			reduce(58), // lNot, reduce: IndexExpression
			reduce(58), // equals, reduce: IndexExpression
			reduce(58), // lessOrGreater, reduce: IndexExpression
			reduce(58), // or, reduce: IndexExpression
			reduce(58), // xor, reduce: IndexExpression
			reduce(58), // and, reduce: IndexExpression
			reduce(58), // shift, reduce: IndexExpression
			reduce(58), // +, reduce: IndexExpression
			reduce(58), // -, reduce: IndexExpression
			reduce(58), // product, reduce: IndexExpression
			reduce(58), // (, reduce: IndexExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(58), // [, reduce: IndexExpression
			nil,        // ]
			reduce(58), // ., reduce: IndexExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1453
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			reduce(100), // (, reduce: HashLiteral
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(100), // [, reduce: HashLiteral
			nil,         // ]
			reduce(100), // ., reduce: HashLiteral
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1454
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			reduce(101), // (, reduce: HashLiteral
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(101), // [, reduce: HashLiteral
			nil,         // ]
			reduce(101), // ., reduce: HashLiteral
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1455
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(956),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1694), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1456
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(59), // (, reduce: CallExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(59), // [, reduce: CallExpression
			nil,        // ]
			reduce(59), // ., reduce: CallExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1457
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1695), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1458
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(61), // (, reduce: SelectorExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(61), // [, reduce: SelectorExpression
			nil,        // ]
			reduce(61), // ., reduce: SelectorExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1459
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(99), // (, reduce: ArrayLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(99), // [, reduce: ArrayLiteral
			nil,        // ]
			reduce(99), // ., reduce: ArrayLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1460
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1697), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1461
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(1233), // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1698), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1462
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(60), // ,, reduce: CallExpression
			nil,        // :
			reduce(60), // lOr, reduce: CallExpression
			reduce(60), // lAnd, reduce: CallExpression
			reduce(60), // lNot, reduce: CallExpression
			reduce(60), // equals, reduce: CallExpression
			reduce(60), // lessOrGreater, reduce: CallExpression
			reduce(60), // or, reduce: CallExpression
			reduce(60), // xor, reduce: CallExpression
			reduce(60), // and, reduce: CallExpression
			reduce(60), // shift, reduce: CallExpression
			reduce(60), // +, reduce: CallExpression
			reduce(60), // -, reduce: CallExpression
			reduce(60), // product, reduce: CallExpression
			reduce(60), // (, reduce: CallExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(60), // [, reduce: CallExpression
			reduce(60), // ], reduce: CallExpression
			reduce(60), // ., reduce: CallExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1463
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(58), // ,, reduce: IndexExpression
			nil,        // :
			reduce(58), // lOr, reduce: IndexExpression
			reduce(58), // lAnd, reduce: IndexExpression
			reduce(58), // lNot, reduce: IndexExpression
			reduce(58), // equals, reduce: IndexExpression
			reduce(58), // lessOrGreater, reduce: IndexExpression
			reduce(58), // or, reduce: IndexExpression
			reduce(58), // xor, reduce: IndexExpression
			reduce(58), // and, reduce: IndexExpression
			reduce(58), // shift, reduce: IndexExpression
			reduce(58), // +, reduce: IndexExpression
			reduce(58), // -, reduce: IndexExpression
			reduce(58), // product, reduce: IndexExpression
			reduce(58), // (, reduce: IndexExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(58), // [, reduce: IndexExpression
			reduce(58), // ], reduce: IndexExpression
			reduce(58), // ., reduce: IndexExpression
			reduce(58), // assign, reduce: IndexExpression
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1464
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1699), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1465
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(61), // ,, reduce: SelectorExpression
			nil,        // :
			reduce(61), // lOr, reduce: SelectorExpression
			reduce(61), // lAnd, reduce: SelectorExpression
			reduce(61), // lNot, reduce: SelectorExpression
			reduce(61), // equals, reduce: SelectorExpression
			reduce(61), // lessOrGreater, reduce: SelectorExpression
			reduce(61), // or, reduce: SelectorExpression
			reduce(61), // xor, reduce: SelectorExpression
			reduce(61), // and, reduce: SelectorExpression
			reduce(61), // shift, reduce: SelectorExpression
			reduce(61), // +, reduce: SelectorExpression
			reduce(61), // -, reduce: SelectorExpression
			reduce(61), // product, reduce: SelectorExpression
			reduce(61), // (, reduce: SelectorExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(61), // [, reduce: SelectorExpression
			reduce(61), // ], reduce: SelectorExpression
			reduce(61), // ., reduce: SelectorExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1466
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1110), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(214),  // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1467
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1702), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1468
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			reduce(9), // ,, reduce: BlockStatement
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			reduce(9), // ], reduce: BlockStatement
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			reduce(9), // kwdElse, reduce: BlockStatement
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1469
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(70), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(70), // ], reduce: ForExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1470
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(63),   // {
			shift(1107), // }
			shift(65),   // kwdReturn
			shift(671),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(85),   // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(92),   // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(94),   // kwdIf
			nil,         // kwdElse
			shift(95),   // kwdFor
			shift(97),   // identifier
			shift(106),  // kwdNull
			shift(107),  // boolLit
			shift(108),  // intLit
			shift(109),  // floatLit
			shift(110),  // stringLit
			shift(111),  // kwdFn
		},
	},
	actionRow{ // S1471
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1110), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1472
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1470), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1473
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			reduce(8), // ,, reduce: BlockStatement
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			reduce(8), // ], reduce: BlockStatement
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1474
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1470), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1475
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1708), // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1476
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(96), // ,, reduce: FunctionLiteral
			nil,        // :
			reduce(96), // lOr, reduce: FunctionLiteral
			reduce(96), // lAnd, reduce: FunctionLiteral
			reduce(96), // lNot, reduce: FunctionLiteral
			reduce(96), // equals, reduce: FunctionLiteral
			reduce(96), // lessOrGreater, reduce: FunctionLiteral
			reduce(96), // or, reduce: FunctionLiteral
			reduce(96), // xor, reduce: FunctionLiteral
			reduce(96), // and, reduce: FunctionLiteral
			reduce(96), // shift, reduce: FunctionLiteral
			reduce(96), // +, reduce: FunctionLiteral
			reduce(96), // -, reduce: FunctionLiteral
			reduce(96), // product, reduce: FunctionLiteral
			reduce(96), // (, reduce: FunctionLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(96), // [, reduce: FunctionLiteral
			reduce(96), // ], reduce: FunctionLiteral
			reduce(96), // ., reduce: FunctionLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1477
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1710), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1478
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1477), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1479
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(66), // $, reduce: IfExpression
			reduce(66), // terminator, reduce: IfExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1480
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(67), // $, reduce: IfExpression
			reduce(67), // terminator, reduce: IfExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1481
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(8), // $, reduce: BlockStatement
			reduce(8), // terminator, reduce: BlockStatement
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			reduce(8), // kwdElse, reduce: BlockStatement
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1482
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(60), // {, reduce: CallExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(60), // lOr, reduce: CallExpression
			reduce(60), // lAnd, reduce: CallExpression
			reduce(60), // lNot, reduce: CallExpression
			reduce(60), // equals, reduce: CallExpression
			reduce(60), // lessOrGreater, reduce: CallExpression
			reduce(60), // or, reduce: CallExpression
			reduce(60), // xor, reduce: CallExpression
			reduce(60), // and, reduce: CallExpression
			reduce(60), // shift, reduce: CallExpression
			reduce(60), // +, reduce: CallExpression
			reduce(60), // -, reduce: CallExpression
			reduce(60), // product, reduce: CallExpression
			reduce(60), // (, reduce: CallExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(60), // [, reduce: CallExpression
			nil,        // ]
			reduce(60), // ., reduce: CallExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1483
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(58), // {, reduce: IndexExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(58), // lOr, reduce: IndexExpression
			reduce(58), // lAnd, reduce: IndexExpression
			reduce(58), // lNot, reduce: IndexExpression
			reduce(58), // equals, reduce: IndexExpression
			reduce(58), // lessOrGreater, reduce: IndexExpression
			reduce(58), // or, reduce: IndexExpression
			reduce(58), // xor, reduce: IndexExpression
			reduce(58), // and, reduce: IndexExpression
			reduce(58), // shift, reduce: IndexExpression
			reduce(58), // +, reduce: IndexExpression
			reduce(58), // -, reduce: IndexExpression
			reduce(58), // product, reduce: IndexExpression
			reduce(58), // (, reduce: IndexExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(58), // [, reduce: IndexExpression
			nil,        // ]
			reduce(58), // ., reduce: IndexExpression
			reduce(58), // assign, reduce: IndexExpression
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1484
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1712), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1485
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(61), // {, reduce: SelectorExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(61), // lOr, reduce: SelectorExpression
			reduce(61), // lAnd, reduce: SelectorExpression
			reduce(61), // lNot, reduce: SelectorExpression
			reduce(61), // equals, reduce: SelectorExpression
			reduce(61), // lessOrGreater, reduce: SelectorExpression
			reduce(61), // or, reduce: SelectorExpression
			reduce(61), // xor, reduce: SelectorExpression
			reduce(61), // and, reduce: SelectorExpression
			reduce(61), // shift, reduce: SelectorExpression
			reduce(61), // +, reduce: SelectorExpression
			reduce(61), // -, reduce: SelectorExpression
			reduce(61), // product, reduce: SelectorExpression
			reduce(61), // (, reduce: SelectorExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(61), // [, reduce: SelectorExpression
			nil,        // ]
			reduce(61), // ., reduce: SelectorExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1486
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1150), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1487
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1715), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1488
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			reduce(9), // {, reduce: BlockStatement
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			reduce(9), // kwdElse, reduce: BlockStatement
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1489
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(70), // {, reduce: ForExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1490
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(63),   // {
			shift(1147), // }
			shift(65),   // kwdReturn
			shift(671),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(85),   // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(92),   // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(94),   // kwdIf
			nil,         // kwdElse
			shift(95),   // kwdFor
			shift(97),   // identifier
			shift(106),  // kwdNull
			shift(107),  // boolLit
			shift(108),  // intLit
			shift(109),  // floatLit
			shift(110),  // stringLit
			shift(111),  // kwdFn
		},
	},
	actionRow{ // S1491
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1150), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1492
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1490), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1493
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			reduce(8), // {, reduce: BlockStatement
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1494
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1490), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1495
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1721), // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1496
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(96), // {, reduce: FunctionLiteral
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(96), // lOr, reduce: FunctionLiteral
			reduce(96), // lAnd, reduce: FunctionLiteral
			reduce(96), // lNot, reduce: FunctionLiteral
			reduce(96), // equals, reduce: FunctionLiteral
			reduce(96), // lessOrGreater, reduce: FunctionLiteral
			reduce(96), // or, reduce: FunctionLiteral
			reduce(96), // xor, reduce: FunctionLiteral
			reduce(96), // and, reduce: FunctionLiteral
			reduce(96), // shift, reduce: FunctionLiteral
			reduce(96), // +, reduce: FunctionLiteral
			reduce(96), // -, reduce: FunctionLiteral
			reduce(96), // product, reduce: FunctionLiteral
			reduce(96), // (, reduce: FunctionLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(96), // [, reduce: FunctionLiteral
			nil,        // ]
			reduce(96), // ., reduce: FunctionLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1497
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1723), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1498
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1497), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1499
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(71), // $, reduce: ForExpression
			reduce(71), // terminator, reduce: ForExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1500
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(100), // terminator, reduce: HashLiteral
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(100), // lOr, reduce: HashLiteral
			reduce(100), // lAnd, reduce: HashLiteral
			reduce(100), // lNot, reduce: HashLiteral
			reduce(100), // equals, reduce: HashLiteral
			reduce(100), // lessOrGreater, reduce: HashLiteral
			reduce(100), // or, reduce: HashLiteral
			reduce(100), // xor, reduce: HashLiteral
			reduce(100), // and, reduce: HashLiteral
			reduce(100), // shift, reduce: HashLiteral
			reduce(100), // +, reduce: HashLiteral
			reduce(100), // -, reduce: HashLiteral
			reduce(100), // product, reduce: HashLiteral
			reduce(100), // (, reduce: HashLiteral
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(100), // [, reduce: HashLiteral
			nil,         // ]
			reduce(100), // ., reduce: HashLiteral
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1501
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(101), // terminator, reduce: HashLiteral
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(101), // lOr, reduce: HashLiteral
			reduce(101), // lAnd, reduce: HashLiteral
			reduce(101), // lNot, reduce: HashLiteral
			reduce(101), // equals, reduce: HashLiteral
			reduce(101), // lessOrGreater, reduce: HashLiteral
			reduce(101), // or, reduce: HashLiteral
			reduce(101), // xor, reduce: HashLiteral
			reduce(101), // and, reduce: HashLiteral
			reduce(101), // shift, reduce: HashLiteral
			reduce(101), // +, reduce: HashLiteral
			reduce(101), // -, reduce: HashLiteral
			reduce(101), // product, reduce: HashLiteral
			reduce(101), // (, reduce: HashLiteral
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(101), // [, reduce: HashLiteral
			nil,         // ]
			reduce(101), // ., reduce: HashLiteral
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1502
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(72), // $, reduce: ForExpression
			reduce(72), // terminator, reduce: ForExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1503
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(758), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1504
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(23),  // terminator, reduce: Term1
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(23),  // lOr, reduce: Term1
			shift(1160), // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1505
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(45),  // terminator, reduce: Term11
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(45),  // lOr, reduce: Term11
			reduce(45),  // lAnd, reduce: Term11
			reduce(45),  // lNot, reduce: Term11
			reduce(45),  // equals, reduce: Term11
			reduce(45),  // lessOrGreater, reduce: Term11
			reduce(45),  // or, reduce: Term11
			reduce(45),  // xor, reduce: Term11
			reduce(45),  // and, reduce: Term11
			reduce(45),  // shift, reduce: Term11
			reduce(45),  // +, reduce: Term11
			reduce(45),  // -, reduce: Term11
			reduce(45),  // product, reduce: Term11
			shift(1171), // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1522), // [
			nil,         // ]
			shift(1523), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1506
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(25),  // terminator, reduce: Term2
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(25),  // lOr, reduce: Term2
			reduce(25),  // lAnd, reduce: Term2
			shift(1161), // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1507
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(27),  // terminator, reduce: Term3
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(27),  // lOr, reduce: Term3
			reduce(27),  // lAnd, reduce: Term3
			reduce(27),  // lNot, reduce: Term3
			shift(1162), // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1508
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(29),  // terminator, reduce: Term4
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(29),  // lOr, reduce: Term4
			reduce(29),  // lAnd, reduce: Term4
			reduce(29),  // lNot, reduce: Term4
			reduce(29),  // equals, reduce: Term4
			shift(1163), // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1509
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(31),  // terminator, reduce: Term5
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(31),  // lOr, reduce: Term5
			reduce(31),  // lAnd, reduce: Term5
			reduce(31),  // lNot, reduce: Term5
			reduce(31),  // equals, reduce: Term5
			reduce(31),  // lessOrGreater, reduce: Term5
			shift(1164), // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1510
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(33),  // terminator, reduce: Term6
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(33),  // lOr, reduce: Term6
			reduce(33),  // lAnd, reduce: Term6
			reduce(33),  // lNot, reduce: Term6
			reduce(33),  // equals, reduce: Term6
			reduce(33),  // lessOrGreater, reduce: Term6
			reduce(33),  // or, reduce: Term6
			shift(1165), // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1511
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(35),  // terminator, reduce: Term7
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(35),  // lOr, reduce: Term7
			reduce(35),  // lAnd, reduce: Term7
			reduce(35),  // lNot, reduce: Term7
			reduce(35),  // equals, reduce: Term7
			reduce(35),  // lessOrGreater, reduce: Term7
			reduce(35),  // or, reduce: Term7
			reduce(35),  // xor, reduce: Term7
			shift(1166), // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1512
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(37),  // terminator, reduce: Term8
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(37),  // lOr, reduce: Term8
			reduce(37),  // lAnd, reduce: Term8
			reduce(37),  // lNot, reduce: Term8
			reduce(37),  // equals, reduce: Term8
			reduce(37),  // lessOrGreater, reduce: Term8
			reduce(37),  // or, reduce: Term8
			reduce(37),  // xor, reduce: Term8
			reduce(37),  // and, reduce: Term8
			shift(1167), // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1513
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(39),  // terminator, reduce: Term9
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(39),  // lOr, reduce: Term9
			reduce(39),  // lAnd, reduce: Term9
			reduce(39),  // lNot, reduce: Term9
			reduce(39),  // equals, reduce: Term9
			reduce(39),  // lessOrGreater, reduce: Term9
			reduce(39),  // or, reduce: Term9
			reduce(39),  // xor, reduce: Term9
			reduce(39),  // and, reduce: Term9
			reduce(39),  // shift, reduce: Term9
			shift(1168), // +
			shift(1169), // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1514
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(41),  // terminator, reduce: Term10
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(41),  // lOr, reduce: Term10
			reduce(41),  // lAnd, reduce: Term10
			reduce(41),  // lNot, reduce: Term10
			reduce(41),  // equals, reduce: Term10
			reduce(41),  // lessOrGreater, reduce: Term10
			reduce(41),  // or, reduce: Term10
			reduce(41),  // xor, reduce: Term10
			reduce(41),  // and, reduce: Term10
			reduce(41),  // shift, reduce: Term10
			reduce(41),  // +, reduce: Term10
			reduce(41),  // -, reduce: Term10
			shift(1170), // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1515
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(42),  // terminator, reduce: Term10
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(42),  // lOr, reduce: Term10
			reduce(42),  // lAnd, reduce: Term10
			reduce(42),  // lNot, reduce: Term10
			reduce(42),  // equals, reduce: Term10
			reduce(42),  // lessOrGreater, reduce: Term10
			reduce(42),  // or, reduce: Term10
			reduce(42),  // xor, reduce: Term10
			reduce(42),  // and, reduce: Term10
			reduce(42),  // shift, reduce: Term10
			reduce(42),  // +, reduce: Term10
			reduce(42),  // -, reduce: Term10
			shift(1170), // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1516
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(44),  // terminator, reduce: Term11
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			reduce(44),  // lOr, reduce: Term11
			reduce(44),  // lAnd, reduce: Term11
			reduce(44),  // lNot, reduce: Term11
			reduce(44),  // equals, reduce: Term11
			reduce(44),  // lessOrGreater, reduce: Term11
			reduce(44),  // or, reduce: Term11
			reduce(44),  // xor, reduce: Term11
			reduce(44),  // and, reduce: Term11
			reduce(44),  // shift, reduce: Term11
			reduce(44),  // +, reduce: Term11
			reduce(44),  // -, reduce: Term11
			reduce(44),  // product, reduce: Term11
			shift(1171), // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1522), // [
			nil,         // ]
			shift(1523), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1517
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(956),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1726), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1518
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(59), // terminator, reduce: CallExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(59), // lOr, reduce: CallExpression
			reduce(59), // lAnd, reduce: CallExpression
			reduce(59), // lNot, reduce: CallExpression
			reduce(59), // equals, reduce: CallExpression
			reduce(59), // lessOrGreater, reduce: CallExpression
			reduce(59), // or, reduce: CallExpression
			reduce(59), // xor, reduce: CallExpression
			reduce(59), // and, reduce: CallExpression
			reduce(59), // shift, reduce: CallExpression
			reduce(59), // +, reduce: CallExpression
			reduce(59), // -, reduce: CallExpression
			reduce(59), // product, reduce: CallExpression
			reduce(59), // (, reduce: CallExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(59), // [, reduce: CallExpression
			nil,        // ]
			reduce(59), // ., reduce: CallExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1519
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1727), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1520
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(61), // terminator, reduce: SelectorExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(61), // lOr, reduce: SelectorExpression
			reduce(61), // lAnd, reduce: SelectorExpression
			reduce(61), // lNot, reduce: SelectorExpression
			reduce(61), // equals, reduce: SelectorExpression
			reduce(61), // lessOrGreater, reduce: SelectorExpression
			reduce(61), // or, reduce: SelectorExpression
			reduce(61), // xor, reduce: SelectorExpression
			reduce(61), // and, reduce: SelectorExpression
			reduce(61), // shift, reduce: SelectorExpression
			reduce(61), // +, reduce: SelectorExpression
			reduce(61), // -, reduce: SelectorExpression
			reduce(61), // product, reduce: SelectorExpression
			reduce(61), // (, reduce: SelectorExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(61), // [, reduce: SelectorExpression
			nil,        // ]
			reduce(61), // ., reduce: SelectorExpression
			reduce(61), // assign, reduce: SelectorExpression
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1521
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(47), // terminator, reduce: Term12
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(47), // lOr, reduce: Term12
			reduce(47), // lAnd, reduce: Term12
			reduce(47), // lNot, reduce: Term12
			reduce(47), // equals, reduce: Term12
			reduce(47), // lessOrGreater, reduce: Term12
			reduce(47), // or, reduce: Term12
			reduce(47), // xor, reduce: Term12
			reduce(47), // and, reduce: Term12
			reduce(47), // shift, reduce: Term12
			reduce(47), // +, reduce: Term12
			reduce(47), // -, reduce: Term12
			reduce(47), // product, reduce: Term12
			reduce(47), // (, reduce: Term12
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(47), // [, reduce: Term12
			nil,        // ]
			reduce(47), // ., reduce: Term12
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1522
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(521), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(539), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(546), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(548), // kwdIf
			nil,        // kwdElse
			shift(549), // kwdFor
			shift(551), // identifier
			shift(560), // kwdNull
			shift(561), // boolLit
			shift(562), // intLit
			shift(563), // floatLit
			shift(564), // stringLit
			shift(565), // kwdFn
		},
	},
	actionRow{ // S1523
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1180), // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1524
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(63), // terminator, reduce: AssignExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1525
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(64), // terminator, reduce: AssignExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1526
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(99), // terminator, reduce: ArrayLiteral
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(99), // lOr, reduce: ArrayLiteral
			reduce(99), // lAnd, reduce: ArrayLiteral
			reduce(99), // lNot, reduce: ArrayLiteral
			reduce(99), // equals, reduce: ArrayLiteral
			reduce(99), // lessOrGreater, reduce: ArrayLiteral
			reduce(99), // or, reduce: ArrayLiteral
			reduce(99), // xor, reduce: ArrayLiteral
			reduce(99), // and, reduce: ArrayLiteral
			reduce(99), // shift, reduce: ArrayLiteral
			reduce(99), // +, reduce: ArrayLiteral
			reduce(99), // -, reduce: ArrayLiteral
			reduce(99), // product, reduce: ArrayLiteral
			reduce(99), // (, reduce: ArrayLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(99), // [, reduce: ArrayLiteral
			nil,        // ]
			reduce(99), // ., reduce: ArrayLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1527
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(62), // terminator, reduce: AssignExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1528
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			reduce(65),  // terminator, reduce: IfExpression
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			shift(1730), // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1529
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1732), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1530
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1734), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1531
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1736), // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1532
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1737), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1533
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			reduce(9), // terminator, reduce: BlockStatement
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1534
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1738), // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(736),  // kwdIf
			nil,         // kwdElse
			shift(737),  // kwdFor
			shift(739),  // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S1535
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(69), // terminator, reduce: ForExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1536
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1533), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1537
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1741), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1538
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(1233), // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1742), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1539
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(74), // $, reduce: ForExpression
			reduce(74), // terminator, reduce: ForExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1540
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(758), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1541
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1154), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1542
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(60), // terminator, reduce: CallExpression
			reduce(60), // {, reduce: CallExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(60), // lOr, reduce: CallExpression
			reduce(60), // lAnd, reduce: CallExpression
			reduce(60), // lNot, reduce: CallExpression
			reduce(60), // equals, reduce: CallExpression
			reduce(60), // lessOrGreater, reduce: CallExpression
			reduce(60), // or, reduce: CallExpression
			reduce(60), // xor, reduce: CallExpression
			reduce(60), // and, reduce: CallExpression
			reduce(60), // shift, reduce: CallExpression
			reduce(60), // +, reduce: CallExpression
			reduce(60), // -, reduce: CallExpression
			reduce(60), // product, reduce: CallExpression
			reduce(60), // (, reduce: CallExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(60), // [, reduce: CallExpression
			nil,        // ]
			reduce(60), // ., reduce: CallExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1543
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(58), // terminator, reduce: IndexExpression
			reduce(58), // {, reduce: IndexExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(58), // lOr, reduce: IndexExpression
			reduce(58), // lAnd, reduce: IndexExpression
			reduce(58), // lNot, reduce: IndexExpression
			reduce(58), // equals, reduce: IndexExpression
			reduce(58), // lessOrGreater, reduce: IndexExpression
			reduce(58), // or, reduce: IndexExpression
			reduce(58), // xor, reduce: IndexExpression
			reduce(58), // and, reduce: IndexExpression
			reduce(58), // shift, reduce: IndexExpression
			reduce(58), // +, reduce: IndexExpression
			reduce(58), // -, reduce: IndexExpression
			reduce(58), // product, reduce: IndexExpression
			reduce(58), // (, reduce: IndexExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(58), // [, reduce: IndexExpression
			nil,        // ]
			reduce(58), // ., reduce: IndexExpression
			reduce(58), // assign, reduce: IndexExpression
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1544
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1746), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1545
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(61), // terminator, reduce: SelectorExpression
			reduce(61), // {, reduce: SelectorExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(61), // lOr, reduce: SelectorExpression
			reduce(61), // lAnd, reduce: SelectorExpression
			reduce(61), // lNot, reduce: SelectorExpression
			reduce(61), // equals, reduce: SelectorExpression
			reduce(61), // lessOrGreater, reduce: SelectorExpression
			reduce(61), // or, reduce: SelectorExpression
			reduce(61), // xor, reduce: SelectorExpression
			reduce(61), // and, reduce: SelectorExpression
			reduce(61), // shift, reduce: SelectorExpression
			reduce(61), // +, reduce: SelectorExpression
			reduce(61), // -, reduce: SelectorExpression
			reduce(61), // product, reduce: SelectorExpression
			reduce(61), // (, reduce: SelectorExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(61), // [, reduce: SelectorExpression
			nil,        // ]
			reduce(61), // ., reduce: SelectorExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1546
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1228), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(307),  // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1547
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1749), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1548
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			reduce(9), // terminator, reduce: BlockStatement
			reduce(9), // {, reduce: BlockStatement
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			reduce(9), // kwdElse, reduce: BlockStatement
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1549
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(70), // terminator, reduce: ForExpression
			reduce(70), // {, reduce: ForExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1550
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(63),   // {
			shift(1225), // }
			shift(65),   // kwdReturn
			shift(671),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(85),   // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(92),   // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(94),   // kwdIf
			nil,         // kwdElse
			shift(95),   // kwdFor
			shift(97),   // identifier
			shift(106),  // kwdNull
			shift(107),  // boolLit
			shift(108),  // intLit
			shift(109),  // floatLit
			shift(110),  // stringLit
			shift(111),  // kwdFn
		},
	},
	actionRow{ // S1551
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1228), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1552
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1550), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1553
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			reduce(8), // terminator, reduce: BlockStatement
			reduce(8), // {, reduce: BlockStatement
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1554
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1550), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1555
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1755), // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1556
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(96), // terminator, reduce: FunctionLiteral
			reduce(96), // {, reduce: FunctionLiteral
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(96), // lOr, reduce: FunctionLiteral
			reduce(96), // lAnd, reduce: FunctionLiteral
			reduce(96), // lNot, reduce: FunctionLiteral
			reduce(96), // equals, reduce: FunctionLiteral
			reduce(96), // lessOrGreater, reduce: FunctionLiteral
			reduce(96), // or, reduce: FunctionLiteral
			reduce(96), // xor, reduce: FunctionLiteral
			reduce(96), // and, reduce: FunctionLiteral
			reduce(96), // shift, reduce: FunctionLiteral
			reduce(96), // +, reduce: FunctionLiteral
			reduce(96), // -, reduce: FunctionLiteral
			reduce(96), // product, reduce: FunctionLiteral
			reduce(96), // (, reduce: FunctionLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(96), // [, reduce: FunctionLiteral
			nil,        // ]
			reduce(96), // ., reduce: FunctionLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1557
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1757), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1558
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1557), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1559
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1759), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1560
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(9), // $, reduce: BlockStatement
			reduce(9), // terminator, reduce: BlockStatement
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			reduce(9), // lOr, reduce: BlockStatement
			reduce(9), // lAnd, reduce: BlockStatement
			reduce(9), // lNot, reduce: BlockStatement
			reduce(9), // equals, reduce: BlockStatement
			reduce(9), // lessOrGreater, reduce: BlockStatement
			reduce(9), // or, reduce: BlockStatement
			reduce(9), // xor, reduce: BlockStatement
			reduce(9), // and, reduce: BlockStatement
			reduce(9), // shift, reduce: BlockStatement
			reduce(9), // +, reduce: BlockStatement
			reduce(9), // -, reduce: BlockStatement
			reduce(9), // product, reduce: BlockStatement
			reduce(9), // (, reduce: BlockStatement
			nil,       // )
			nil,       // !
			nil,       // ~
			reduce(9), // [, reduce: BlockStatement
			nil,       // ]
			reduce(9), // ., reduce: BlockStatement
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1561
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(81), // ,, reduce: IdentifierList
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(81), // ), reduce: IdentifierList
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1562
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(97), // $, reduce: FunctionLiteral
			reduce(97), // terminator, reduce: FunctionLiteral
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(97), // lOr, reduce: FunctionLiteral
			reduce(97), // lAnd, reduce: FunctionLiteral
			reduce(97), // lNot, reduce: FunctionLiteral
			reduce(97), // equals, reduce: FunctionLiteral
			reduce(97), // lessOrGreater, reduce: FunctionLiteral
			reduce(97), // or, reduce: FunctionLiteral
			reduce(97), // xor, reduce: FunctionLiteral
			reduce(97), // and, reduce: FunctionLiteral
			reduce(97), // shift, reduce: FunctionLiteral
			reduce(97), // +, reduce: FunctionLiteral
			reduce(97), // -, reduce: FunctionLiteral
			reduce(97), // product, reduce: FunctionLiteral
			reduce(97), // (, reduce: FunctionLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(97), // [, reduce: FunctionLiteral
			nil,        // ]
			reduce(97), // ., reduce: FunctionLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1563
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(60), // terminator, reduce: CallExpression
			nil,        // {
			reduce(60), // }, reduce: CallExpression
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(60), // lOr, reduce: CallExpression
			reduce(60), // lAnd, reduce: CallExpression
			reduce(60), // lNot, reduce: CallExpression
			reduce(60), // equals, reduce: CallExpression
			reduce(60), // lessOrGreater, reduce: CallExpression
			reduce(60), // or, reduce: CallExpression
			reduce(60), // xor, reduce: CallExpression
			reduce(60), // and, reduce: CallExpression
			reduce(60), // shift, reduce: CallExpression
			reduce(60), // +, reduce: CallExpression
			reduce(60), // -, reduce: CallExpression
			reduce(60), // product, reduce: CallExpression
			reduce(60), // (, reduce: CallExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(60), // [, reduce: CallExpression
			nil,        // ]
			reduce(60), // ., reduce: CallExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1564
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(58), // terminator, reduce: IndexExpression
			nil,        // {
			reduce(58), // }, reduce: IndexExpression
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(58), // lOr, reduce: IndexExpression
			reduce(58), // lAnd, reduce: IndexExpression
			reduce(58), // lNot, reduce: IndexExpression
			reduce(58), // equals, reduce: IndexExpression
			reduce(58), // lessOrGreater, reduce: IndexExpression
			reduce(58), // or, reduce: IndexExpression
			reduce(58), // xor, reduce: IndexExpression
			reduce(58), // and, reduce: IndexExpression
			reduce(58), // shift, reduce: IndexExpression
			reduce(58), // +, reduce: IndexExpression
			reduce(58), // -, reduce: IndexExpression
			reduce(58), // product, reduce: IndexExpression
			reduce(58), // (, reduce: IndexExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(58), // [, reduce: IndexExpression
			nil,        // ]
			reduce(58), // ., reduce: IndexExpression
			reduce(58), // assign, reduce: IndexExpression
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1565
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1760), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1566
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(61), // terminator, reduce: SelectorExpression
			nil,        // {
			reduce(61), // }, reduce: SelectorExpression
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(61), // lOr, reduce: SelectorExpression
			reduce(61), // lAnd, reduce: SelectorExpression
			reduce(61), // lNot, reduce: SelectorExpression
			reduce(61), // equals, reduce: SelectorExpression
			reduce(61), // lessOrGreater, reduce: SelectorExpression
			reduce(61), // or, reduce: SelectorExpression
			reduce(61), // xor, reduce: SelectorExpression
			reduce(61), // and, reduce: SelectorExpression
			reduce(61), // shift, reduce: SelectorExpression
			reduce(61), // +, reduce: SelectorExpression
			reduce(61), // -, reduce: SelectorExpression
			reduce(61), // product, reduce: SelectorExpression
			reduce(61), // (, reduce: SelectorExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(61), // [, reduce: SelectorExpression
			nil,        // ]
			reduce(61), // ., reduce: SelectorExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1567
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1267), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1568
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1763), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1569
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			reduce(9), // terminator, reduce: BlockStatement
			nil,       // {
			reduce(9), // }, reduce: BlockStatement
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			reduce(9), // kwdElse, reduce: BlockStatement
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1570
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(70), // terminator, reduce: ForExpression
			nil,        // {
			reduce(70), // }, reduce: ForExpression
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1571
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(63),  // {
			shift(330), // }
			shift(65),  // kwdReturn
			shift(671), // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(85),  // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(92),  // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(94),  // kwdIf
			nil,        // kwdElse
			shift(95),  // kwdFor
			shift(97),  // identifier
			shift(106), // kwdNull
			shift(107), // boolLit
			shift(108), // intLit
			shift(109), // floatLit
			shift(110), // stringLit
			shift(111), // kwdFn
		},
	},
	actionRow{ // S1572
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1267), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1573
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1571), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1574
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1571), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1575
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1769), // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1576
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(96), // terminator, reduce: FunctionLiteral
			nil,        // {
			reduce(96), // }, reduce: FunctionLiteral
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(96), // lOr, reduce: FunctionLiteral
			reduce(96), // lAnd, reduce: FunctionLiteral
			reduce(96), // lNot, reduce: FunctionLiteral
			reduce(96), // equals, reduce: FunctionLiteral
			reduce(96), // lessOrGreater, reduce: FunctionLiteral
			reduce(96), // or, reduce: FunctionLiteral
			reduce(96), // xor, reduce: FunctionLiteral
			reduce(96), // and, reduce: FunctionLiteral
			reduce(96), // shift, reduce: FunctionLiteral
			reduce(96), // +, reduce: FunctionLiteral
			reduce(96), // -, reduce: FunctionLiteral
			reduce(96), // product, reduce: FunctionLiteral
			reduce(96), // (, reduce: FunctionLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(96), // [, reduce: FunctionLiteral
			nil,        // ]
			reduce(96), // ., reduce: FunctionLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1577
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1771), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1578
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1577), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1579
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(100), // }, reduce: HashLiteral
			nil,         // kwdReturn
			reduce(100), // ,, reduce: HashLiteral
			nil,         // :
			reduce(100), // lOr, reduce: HashLiteral
			reduce(100), // lAnd, reduce: HashLiteral
			reduce(100), // lNot, reduce: HashLiteral
			reduce(100), // equals, reduce: HashLiteral
			reduce(100), // lessOrGreater, reduce: HashLiteral
			reduce(100), // or, reduce: HashLiteral
			reduce(100), // xor, reduce: HashLiteral
			reduce(100), // and, reduce: HashLiteral
			reduce(100), // shift, reduce: HashLiteral
			reduce(100), // +, reduce: HashLiteral
			reduce(100), // -, reduce: HashLiteral
			reduce(100), // product, reduce: HashLiteral
			reduce(100), // (, reduce: HashLiteral
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(100), // [, reduce: HashLiteral
			nil,         // ]
			reduce(100), // ., reduce: HashLiteral
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1580
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(101), // }, reduce: HashLiteral
			nil,         // kwdReturn
			reduce(101), // ,, reduce: HashLiteral
			nil,         // :
			reduce(101), // lOr, reduce: HashLiteral
			reduce(101), // lAnd, reduce: HashLiteral
			reduce(101), // lNot, reduce: HashLiteral
			reduce(101), // equals, reduce: HashLiteral
			reduce(101), // lessOrGreater, reduce: HashLiteral
			reduce(101), // or, reduce: HashLiteral
			reduce(101), // xor, reduce: HashLiteral
			reduce(101), // and, reduce: HashLiteral
			reduce(101), // shift, reduce: HashLiteral
			reduce(101), // +, reduce: HashLiteral
			reduce(101), // -, reduce: HashLiteral
			reduce(101), // product, reduce: HashLiteral
			reduce(101), // (, reduce: HashLiteral
			nil,         // )
			nil,         // !
			nil,         // ~
			reduce(101), // [, reduce: HashLiteral
			nil,         // ]
			reduce(101), // ., reduce: HashLiteral
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1581
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(23),  // }, reduce: Term1
			nil,         // kwdReturn
			reduce(23),  // ,, reduce: Term1
			nil,         // :
			reduce(23),  // lOr, reduce: Term1
			shift(1273), // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1582
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(45),  // }, reduce: Term11
			nil,         // kwdReturn
			reduce(45),  // ,, reduce: Term11
			nil,         // :
			reduce(45),  // lOr, reduce: Term11
			reduce(45),  // lAnd, reduce: Term11
			reduce(45),  // lNot, reduce: Term11
			reduce(45),  // equals, reduce: Term11
			reduce(45),  // lessOrGreater, reduce: Term11
			reduce(45),  // or, reduce: Term11
			reduce(45),  // xor, reduce: Term11
			reduce(45),  // and, reduce: Term11
			reduce(45),  // shift, reduce: Term11
			reduce(45),  // +, reduce: Term11
			reduce(45),  // -, reduce: Term11
			reduce(45),  // product, reduce: Term11
			shift(1284), // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1599), // [
			nil,         // ]
			shift(1600), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1583
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(25),  // }, reduce: Term2
			nil,         // kwdReturn
			reduce(25),  // ,, reduce: Term2
			nil,         // :
			reduce(25),  // lOr, reduce: Term2
			reduce(25),  // lAnd, reduce: Term2
			shift(1274), // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1584
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(27),  // }, reduce: Term3
			nil,         // kwdReturn
			reduce(27),  // ,, reduce: Term3
			nil,         // :
			reduce(27),  // lOr, reduce: Term3
			reduce(27),  // lAnd, reduce: Term3
			reduce(27),  // lNot, reduce: Term3
			shift(1275), // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1585
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(29),  // }, reduce: Term4
			nil,         // kwdReturn
			reduce(29),  // ,, reduce: Term4
			nil,         // :
			reduce(29),  // lOr, reduce: Term4
			reduce(29),  // lAnd, reduce: Term4
			reduce(29),  // lNot, reduce: Term4
			reduce(29),  // equals, reduce: Term4
			shift(1276), // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1586
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(31),  // }, reduce: Term5
			nil,         // kwdReturn
			reduce(31),  // ,, reduce: Term5
			nil,         // :
			reduce(31),  // lOr, reduce: Term5
			reduce(31),  // lAnd, reduce: Term5
			reduce(31),  // lNot, reduce: Term5
			reduce(31),  // equals, reduce: Term5
			reduce(31),  // lessOrGreater, reduce: Term5
			shift(1277), // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1587
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(33),  // }, reduce: Term6
			nil,         // kwdReturn
			reduce(33),  // ,, reduce: Term6
			nil,         // :
			reduce(33),  // lOr, reduce: Term6
			reduce(33),  // lAnd, reduce: Term6
			reduce(33),  // lNot, reduce: Term6
			reduce(33),  // equals, reduce: Term6
			reduce(33),  // lessOrGreater, reduce: Term6
			reduce(33),  // or, reduce: Term6
			shift(1278), // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1588
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(35),  // }, reduce: Term7
			nil,         // kwdReturn
			reduce(35),  // ,, reduce: Term7
			nil,         // :
			reduce(35),  // lOr, reduce: Term7
			reduce(35),  // lAnd, reduce: Term7
			reduce(35),  // lNot, reduce: Term7
			reduce(35),  // equals, reduce: Term7
			reduce(35),  // lessOrGreater, reduce: Term7
			reduce(35),  // or, reduce: Term7
			reduce(35),  // xor, reduce: Term7
			shift(1279), // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1589
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(37),  // }, reduce: Term8
			nil,         // kwdReturn
			reduce(37),  // ,, reduce: Term8
			nil,         // :
			reduce(37),  // lOr, reduce: Term8
			reduce(37),  // lAnd, reduce: Term8
			reduce(37),  // lNot, reduce: Term8
			reduce(37),  // equals, reduce: Term8
			reduce(37),  // lessOrGreater, reduce: Term8
			reduce(37),  // or, reduce: Term8
			reduce(37),  // xor, reduce: Term8
			reduce(37),  // and, reduce: Term8
			shift(1280), // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1590
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(39),  // }, reduce: Term9
			nil,         // kwdReturn
			reduce(39),  // ,, reduce: Term9
			nil,         // :
			reduce(39),  // lOr, reduce: Term9
			reduce(39),  // lAnd, reduce: Term9
			reduce(39),  // lNot, reduce: Term9
			reduce(39),  // equals, reduce: Term9
			reduce(39),  // lessOrGreater, reduce: Term9
			reduce(39),  // or, reduce: Term9
			reduce(39),  // xor, reduce: Term9
			reduce(39),  // and, reduce: Term9
			reduce(39),  // shift, reduce: Term9
			shift(1281), // +
			shift(1282), // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1591
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(41),  // }, reduce: Term10
			nil,         // kwdReturn
			reduce(41),  // ,, reduce: Term10
			nil,         // :
			reduce(41),  // lOr, reduce: Term10
			reduce(41),  // lAnd, reduce: Term10
			reduce(41),  // lNot, reduce: Term10
			reduce(41),  // equals, reduce: Term10
			reduce(41),  // lessOrGreater, reduce: Term10
			reduce(41),  // or, reduce: Term10
			reduce(41),  // xor, reduce: Term10
			reduce(41),  // and, reduce: Term10
			reduce(41),  // shift, reduce: Term10
			reduce(41),  // +, reduce: Term10
			reduce(41),  // -, reduce: Term10
			shift(1283), // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1592
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(42),  // }, reduce: Term10
			nil,         // kwdReturn
			reduce(42),  // ,, reduce: Term10
			nil,         // :
			reduce(42),  // lOr, reduce: Term10
			reduce(42),  // lAnd, reduce: Term10
			reduce(42),  // lNot, reduce: Term10
			reduce(42),  // equals, reduce: Term10
			reduce(42),  // lessOrGreater, reduce: Term10
			reduce(42),  // or, reduce: Term10
			reduce(42),  // xor, reduce: Term10
			reduce(42),  // and, reduce: Term10
			reduce(42),  // shift, reduce: Term10
			reduce(42),  // +, reduce: Term10
			reduce(42),  // -, reduce: Term10
			shift(1283), // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1593
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(44),  // }, reduce: Term11
			nil,         // kwdReturn
			reduce(44),  // ,, reduce: Term11
			nil,         // :
			reduce(44),  // lOr, reduce: Term11
			reduce(44),  // lAnd, reduce: Term11
			reduce(44),  // lNot, reduce: Term11
			reduce(44),  // equals, reduce: Term11
			reduce(44),  // lessOrGreater, reduce: Term11
			reduce(44),  // or, reduce: Term11
			reduce(44),  // xor, reduce: Term11
			reduce(44),  // and, reduce: Term11
			reduce(44),  // shift, reduce: Term11
			reduce(44),  // +, reduce: Term11
			reduce(44),  // -, reduce: Term11
			reduce(44),  // product, reduce: Term11
			shift(1284), // (
			nil,         // )
			nil,         // !
			nil,         // ~
			shift(1599), // [
			nil,         // ]
			shift(1600), // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1594
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(956),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1773), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1595
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(59), // }, reduce: CallExpression
			nil,        // kwdReturn
			reduce(59), // ,, reduce: CallExpression
			nil,        // :
			reduce(59), // lOr, reduce: CallExpression
			reduce(59), // lAnd, reduce: CallExpression
			reduce(59), // lNot, reduce: CallExpression
			reduce(59), // equals, reduce: CallExpression
			reduce(59), // lessOrGreater, reduce: CallExpression
			reduce(59), // or, reduce: CallExpression
			reduce(59), // xor, reduce: CallExpression
			reduce(59), // and, reduce: CallExpression
			reduce(59), // shift, reduce: CallExpression
			reduce(59), // +, reduce: CallExpression
			reduce(59), // -, reduce: CallExpression
			reduce(59), // product, reduce: CallExpression
			reduce(59), // (, reduce: CallExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(59), // [, reduce: CallExpression
			nil,        // ]
			reduce(59), // ., reduce: CallExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1596
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1774), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1597
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(61), // }, reduce: SelectorExpression
			nil,        // kwdReturn
			reduce(61), // ,, reduce: SelectorExpression
			nil,        // :
			reduce(61), // lOr, reduce: SelectorExpression
			reduce(61), // lAnd, reduce: SelectorExpression
			reduce(61), // lNot, reduce: SelectorExpression
			reduce(61), // equals, reduce: SelectorExpression
			reduce(61), // lessOrGreater, reduce: SelectorExpression
			reduce(61), // or, reduce: SelectorExpression
			reduce(61), // xor, reduce: SelectorExpression
			reduce(61), // and, reduce: SelectorExpression
			reduce(61), // shift, reduce: SelectorExpression
			reduce(61), // +, reduce: SelectorExpression
			reduce(61), // -, reduce: SelectorExpression
			reduce(61), // product, reduce: SelectorExpression
			reduce(61), // (, reduce: SelectorExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(61), // [, reduce: SelectorExpression
			nil,        // ]
			reduce(61), // ., reduce: SelectorExpression
			reduce(61), // assign, reduce: SelectorExpression
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1598
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(47), // }, reduce: Term12
			nil,        // kwdReturn
			reduce(47), // ,, reduce: Term12
			nil,        // :
			reduce(47), // lOr, reduce: Term12
			reduce(47), // lAnd, reduce: Term12
			reduce(47), // lNot, reduce: Term12
			reduce(47), // equals, reduce: Term12
			reduce(47), // lessOrGreater, reduce: Term12
			reduce(47), // or, reduce: Term12
			reduce(47), // xor, reduce: Term12
			reduce(47), // and, reduce: Term12
			reduce(47), // shift, reduce: Term12
			reduce(47), // +, reduce: Term12
			reduce(47), // -, reduce: Term12
			reduce(47), // product, reduce: Term12
			reduce(47), // (, reduce: Term12
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(47), // [, reduce: Term12
			nil,        // ]
			reduce(47), // ., reduce: Term12
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1599
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(521), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			shift(23),  // +
			shift(25),  // -
			nil,        // product
			shift(539), // (
			nil,        // )
			shift(31),  // !
			shift(32),  // ~
			shift(546), // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			shift(548), // kwdIf
			nil,        // kwdElse
			shift(549), // kwdFor
			shift(551), // identifier
			shift(560), // kwdNull
			shift(561), // boolLit
			shift(562), // intLit
			shift(563), // floatLit
			shift(564), // stringLit
			shift(565), // kwdFn
		},
	},
	actionRow{ // S1600
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			shift(1293), // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1601
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(63), // }, reduce: AssignExpression
			nil,        // kwdReturn
			reduce(63), // ,, reduce: AssignExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1602
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(64), // }, reduce: AssignExpression
			nil,        // kwdReturn
			reduce(64), // ,, reduce: AssignExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1603
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(99), // }, reduce: ArrayLiteral
			nil,        // kwdReturn
			reduce(99), // ,, reduce: ArrayLiteral
			nil,        // :
			reduce(99), // lOr, reduce: ArrayLiteral
			reduce(99), // lAnd, reduce: ArrayLiteral
			reduce(99), // lNot, reduce: ArrayLiteral
			reduce(99), // equals, reduce: ArrayLiteral
			reduce(99), // lessOrGreater, reduce: ArrayLiteral
			reduce(99), // or, reduce: ArrayLiteral
			reduce(99), // xor, reduce: ArrayLiteral
			reduce(99), // and, reduce: ArrayLiteral
			reduce(99), // shift, reduce: ArrayLiteral
			reduce(99), // +, reduce: ArrayLiteral
			reduce(99), // -, reduce: ArrayLiteral
			reduce(99), // product, reduce: ArrayLiteral
			reduce(99), // (, reduce: ArrayLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(99), // [, reduce: ArrayLiteral
			nil,        // ]
			reduce(99), // ., reduce: ArrayLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1604
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(62), // }, reduce: AssignExpression
			nil,        // kwdReturn
			reduce(62), // ,, reduce: AssignExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1605
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			reduce(65),  // }, reduce: IfExpression
			nil,         // kwdReturn
			reduce(65),  // ,, reduce: IfExpression
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			shift(1777), // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1606
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1779), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1607
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1781), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1608
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1783), // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1609
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1784), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1610
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			reduce(9), // }, reduce: BlockStatement
			nil,       // kwdReturn
			reduce(9), // ,, reduce: BlockStatement
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1611
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1785), // terminator
			shift(709),  // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(727),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(734),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(736),  // kwdIf
			nil,         // kwdElse
			shift(737),  // kwdFor
			shift(739),  // identifier
			shift(748),  // kwdNull
			shift(749),  // boolLit
			shift(750),  // intLit
			shift(751),  // floatLit
			shift(752),  // stringLit
			shift(753),  // kwdFn
		},
	},
	actionRow{ // S1612
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(69), // }, reduce: ForExpression
			nil,        // kwdReturn
			reduce(69), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1613
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1610), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1614
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1788), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1615
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			shift(1233), // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			shift(1789), // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1616
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(17), // }, reduce: ExpressionMap
			nil,        // kwdReturn
			reduce(17), // ,, reduce: ExpressionMap
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1617
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(58), // terminator, reduce: IndexExpression
			nil,        // {
			reduce(58), // }, reduce: IndexExpression
			nil,        // kwdReturn
			nil,        // ,
			reduce(58), // :, reduce: IndexExpression
			reduce(58), // lOr, reduce: IndexExpression
			reduce(58), // lAnd, reduce: IndexExpression
			reduce(58), // lNot, reduce: IndexExpression
			reduce(58), // equals, reduce: IndexExpression
			reduce(58), // lessOrGreater, reduce: IndexExpression
			reduce(58), // or, reduce: IndexExpression
			reduce(58), // xor, reduce: IndexExpression
			reduce(58), // and, reduce: IndexExpression
			reduce(58), // shift, reduce: IndexExpression
			reduce(58), // +, reduce: IndexExpression
			reduce(58), // -, reduce: IndexExpression
			reduce(58), // product, reduce: IndexExpression
			reduce(58), // (, reduce: IndexExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(58), // [, reduce: IndexExpression
			nil,        // ]
			reduce(58), // ., reduce: IndexExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1618
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(66), // terminator, reduce: IfExpression
			nil,        // {
			reduce(66), // }, reduce: IfExpression
			nil,        // kwdReturn
			nil,        // ,
			reduce(66), // :, reduce: IfExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1619
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(67), // terminator, reduce: IfExpression
			nil,        // {
			reduce(67), // }, reduce: IfExpression
			nil,        // kwdReturn
			nil,        // ,
			reduce(67), // :, reduce: IfExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1620
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			reduce(8), // terminator, reduce: BlockStatement
			nil,       // {
			reduce(8), // }, reduce: BlockStatement
			nil,       // kwdReturn
			nil,       // ,
			reduce(8), // :, reduce: BlockStatement
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			reduce(8), // kwdElse, reduce: BlockStatement
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1621
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(71), // terminator, reduce: ForExpression
			nil,        // {
			reduce(71), // }, reduce: ForExpression
			nil,        // kwdReturn
			nil,        // ,
			reduce(71), // :, reduce: ForExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1622
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(72), // terminator, reduce: ForExpression
			nil,        // {
			reduce(72), // }, reduce: ForExpression
			nil,        // kwdReturn
			nil,        // ,
			reduce(72), // :, reduce: ForExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1623
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(916), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1624
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(74), // terminator, reduce: ForExpression
			nil,        // {
			reduce(74), // }, reduce: ForExpression
			nil,        // kwdReturn
			nil,        // ,
			reduce(74), // :, reduce: ForExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1625
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(916), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1626
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1314), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1627
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1794), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1628
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			reduce(9), // terminator, reduce: BlockStatement
			nil,       // {
			reduce(9), // }, reduce: BlockStatement
			nil,       // kwdReturn
			nil,       // ,
			reduce(9), // :, reduce: BlockStatement
			reduce(9), // lOr, reduce: BlockStatement
			reduce(9), // lAnd, reduce: BlockStatement
			reduce(9), // lNot, reduce: BlockStatement
			reduce(9), // equals, reduce: BlockStatement
			reduce(9), // lessOrGreater, reduce: BlockStatement
			reduce(9), // or, reduce: BlockStatement
			reduce(9), // xor, reduce: BlockStatement
			reduce(9), // and, reduce: BlockStatement
			reduce(9), // shift, reduce: BlockStatement
			reduce(9), // +, reduce: BlockStatement
			reduce(9), // -, reduce: BlockStatement
			reduce(9), // product, reduce: BlockStatement
			reduce(9), // (, reduce: BlockStatement
			nil,       // )
			nil,       // !
			nil,       // ~
			reduce(9), // [, reduce: BlockStatement
			nil,       // ]
			reduce(9), // ., reduce: BlockStatement
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1629
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(97), // terminator, reduce: FunctionLiteral
			nil,        // {
			reduce(97), // }, reduce: FunctionLiteral
			nil,        // kwdReturn
			nil,        // ,
			reduce(97), // :, reduce: FunctionLiteral
			reduce(97), // lOr, reduce: FunctionLiteral
			reduce(97), // lAnd, reduce: FunctionLiteral
			reduce(97), // lNot, reduce: FunctionLiteral
			reduce(97), // equals, reduce: FunctionLiteral
			reduce(97), // lessOrGreater, reduce: FunctionLiteral
			reduce(97), // or, reduce: FunctionLiteral
			reduce(97), // xor, reduce: FunctionLiteral
			reduce(97), // and, reduce: FunctionLiteral
			reduce(97), // shift, reduce: FunctionLiteral
			reduce(97), // +, reduce: FunctionLiteral
			reduce(97), // -, reduce: FunctionLiteral
			reduce(97), // product, reduce: FunctionLiteral
			reduce(97), // (, reduce: FunctionLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(97), // [, reduce: FunctionLiteral
			nil,        // ]
			reduce(97), // ., reduce: FunctionLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1630
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(60), // :, reduce: CallExpression
			reduce(60), // lOr, reduce: CallExpression
			reduce(60), // lAnd, reduce: CallExpression
			reduce(60), // lNot, reduce: CallExpression
			reduce(60), // equals, reduce: CallExpression
			reduce(60), // lessOrGreater, reduce: CallExpression
			reduce(60), // or, reduce: CallExpression
			reduce(60), // xor, reduce: CallExpression
			reduce(60), // and, reduce: CallExpression
			reduce(60), // shift, reduce: CallExpression
			reduce(60), // +, reduce: CallExpression
			reduce(60), // -, reduce: CallExpression
			reduce(60), // product, reduce: CallExpression
			reduce(60), // (, reduce: CallExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(60), // [, reduce: CallExpression
			nil,        // ]
			reduce(60), // ., reduce: CallExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1631
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(58), // :, reduce: IndexExpression
			reduce(58), // lOr, reduce: IndexExpression
			reduce(58), // lAnd, reduce: IndexExpression
			reduce(58), // lNot, reduce: IndexExpression
			reduce(58), // equals, reduce: IndexExpression
			reduce(58), // lessOrGreater, reduce: IndexExpression
			reduce(58), // or, reduce: IndexExpression
			reduce(58), // xor, reduce: IndexExpression
			reduce(58), // and, reduce: IndexExpression
			reduce(58), // shift, reduce: IndexExpression
			reduce(58), // +, reduce: IndexExpression
			reduce(58), // -, reduce: IndexExpression
			reduce(58), // product, reduce: IndexExpression
			reduce(58), // (, reduce: IndexExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(58), // [, reduce: IndexExpression
			nil,        // ]
			reduce(58), // ., reduce: IndexExpression
			reduce(58), // assign, reduce: IndexExpression
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1632
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1795), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1633
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(61), // :, reduce: SelectorExpression
			reduce(61), // lOr, reduce: SelectorExpression
			reduce(61), // lAnd, reduce: SelectorExpression
			reduce(61), // lNot, reduce: SelectorExpression
			reduce(61), // equals, reduce: SelectorExpression
			reduce(61), // lessOrGreater, reduce: SelectorExpression
			reduce(61), // or, reduce: SelectorExpression
			reduce(61), // xor, reduce: SelectorExpression
			reduce(61), // and, reduce: SelectorExpression
			reduce(61), // shift, reduce: SelectorExpression
			reduce(61), // +, reduce: SelectorExpression
			reduce(61), // -, reduce: SelectorExpression
			reduce(61), // product, reduce: SelectorExpression
			reduce(61), // (, reduce: SelectorExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(61), // [, reduce: SelectorExpression
			nil,        // ]
			reduce(61), // ., reduce: SelectorExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1634
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1357), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(443),  // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1635
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1798), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1636
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			reduce(9), // :, reduce: BlockStatement
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			reduce(9), // kwdElse, reduce: BlockStatement
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1637
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(70), // :, reduce: ForExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1638
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(63),   // {
			shift(1354), // }
			shift(65),   // kwdReturn
			shift(671),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(85),   // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(92),   // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(94),   // kwdIf
			nil,         // kwdElse
			shift(95),   // kwdFor
			shift(97),   // identifier
			shift(106),  // kwdNull
			shift(107),  // boolLit
			shift(108),  // intLit
			shift(109),  // floatLit
			shift(110),  // stringLit
			shift(111),  // kwdFn
		},
	},
	actionRow{ // S1639
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1357), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1640
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1638), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1641
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			reduce(8), // :, reduce: BlockStatement
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1642
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1638), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1643
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1804), // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1644
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(96), // :, reduce: FunctionLiteral
			reduce(96), // lOr, reduce: FunctionLiteral
			reduce(96), // lAnd, reduce: FunctionLiteral
			reduce(96), // lNot, reduce: FunctionLiteral
			reduce(96), // equals, reduce: FunctionLiteral
			reduce(96), // lessOrGreater, reduce: FunctionLiteral
			reduce(96), // or, reduce: FunctionLiteral
			reduce(96), // xor, reduce: FunctionLiteral
			reduce(96), // and, reduce: FunctionLiteral
			reduce(96), // shift, reduce: FunctionLiteral
			reduce(96), // +, reduce: FunctionLiteral
			reduce(96), // -, reduce: FunctionLiteral
			reduce(96), // product, reduce: FunctionLiteral
			reduce(96), // (, reduce: FunctionLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(96), // [, reduce: FunctionLiteral
			nil,        // ]
			reduce(96), // ., reduce: FunctionLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1645
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1806), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1646
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1645), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1647
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(60), // ,, reduce: CallExpression
			nil,        // :
			reduce(60), // lOr, reduce: CallExpression
			reduce(60), // lAnd, reduce: CallExpression
			reduce(60), // lNot, reduce: CallExpression
			reduce(60), // equals, reduce: CallExpression
			reduce(60), // lessOrGreater, reduce: CallExpression
			reduce(60), // or, reduce: CallExpression
			reduce(60), // xor, reduce: CallExpression
			reduce(60), // and, reduce: CallExpression
			reduce(60), // shift, reduce: CallExpression
			reduce(60), // +, reduce: CallExpression
			reduce(60), // -, reduce: CallExpression
			reduce(60), // product, reduce: CallExpression
			reduce(60), // (, reduce: CallExpression
			reduce(60), // ), reduce: CallExpression
			nil,        // !
			nil,        // ~
			reduce(60), // [, reduce: CallExpression
			nil,        // ]
			reduce(60), // ., reduce: CallExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1648
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(58), // ,, reduce: IndexExpression
			nil,        // :
			reduce(58), // lOr, reduce: IndexExpression
			reduce(58), // lAnd, reduce: IndexExpression
			reduce(58), // lNot, reduce: IndexExpression
			reduce(58), // equals, reduce: IndexExpression
			reduce(58), // lessOrGreater, reduce: IndexExpression
			reduce(58), // or, reduce: IndexExpression
			reduce(58), // xor, reduce: IndexExpression
			reduce(58), // and, reduce: IndexExpression
			reduce(58), // shift, reduce: IndexExpression
			reduce(58), // +, reduce: IndexExpression
			reduce(58), // -, reduce: IndexExpression
			reduce(58), // product, reduce: IndexExpression
			reduce(58), // (, reduce: IndexExpression
			reduce(58), // ), reduce: IndexExpression
			nil,        // !
			nil,        // ~
			reduce(58), // [, reduce: IndexExpression
			nil,        // ]
			reduce(58), // ., reduce: IndexExpression
			reduce(58), // assign, reduce: IndexExpression
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1649
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1808), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1650
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(61), // ,, reduce: SelectorExpression
			nil,        // :
			reduce(61), // lOr, reduce: SelectorExpression
			reduce(61), // lAnd, reduce: SelectorExpression
			reduce(61), // lNot, reduce: SelectorExpression
			reduce(61), // equals, reduce: SelectorExpression
			reduce(61), // lessOrGreater, reduce: SelectorExpression
			reduce(61), // or, reduce: SelectorExpression
			reduce(61), // xor, reduce: SelectorExpression
			reduce(61), // and, reduce: SelectorExpression
			reduce(61), // shift, reduce: SelectorExpression
			reduce(61), // +, reduce: SelectorExpression
			reduce(61), // -, reduce: SelectorExpression
			reduce(61), // product, reduce: SelectorExpression
			reduce(61), // (, reduce: SelectorExpression
			reduce(61), // ), reduce: SelectorExpression
			nil,        // !
			nil,        // ~
			reduce(61), // [, reduce: SelectorExpression
			nil,        // ]
			reduce(61), // ., reduce: SelectorExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1651
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1395), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(503),  // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1652
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1811), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1653
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			reduce(9), // ,, reduce: BlockStatement
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			reduce(9), // ), reduce: BlockStatement
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			reduce(9), // kwdElse, reduce: BlockStatement
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1654
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(70), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(70), // ), reduce: ForExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1655
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(63),   // {
			shift(1392), // }
			shift(65),   // kwdReturn
			shift(671),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(85),   // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(92),   // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(94),   // kwdIf
			nil,         // kwdElse
			shift(95),   // kwdFor
			shift(97),   // identifier
			shift(106),  // kwdNull
			shift(107),  // boolLit
			shift(108),  // intLit
			shift(109),  // floatLit
			shift(110),  // stringLit
			shift(111),  // kwdFn
		},
	},
	actionRow{ // S1656
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1395), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1657
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1655), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1658
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			reduce(8), // ,, reduce: BlockStatement
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			reduce(8), // ), reduce: BlockStatement
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1659
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1655), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1660
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1817), // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1661
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(96), // ,, reduce: FunctionLiteral
			nil,        // :
			reduce(96), // lOr, reduce: FunctionLiteral
			reduce(96), // lAnd, reduce: FunctionLiteral
			reduce(96), // lNot, reduce: FunctionLiteral
			reduce(96), // equals, reduce: FunctionLiteral
			reduce(96), // lessOrGreater, reduce: FunctionLiteral
			reduce(96), // or, reduce: FunctionLiteral
			reduce(96), // xor, reduce: FunctionLiteral
			reduce(96), // and, reduce: FunctionLiteral
			reduce(96), // shift, reduce: FunctionLiteral
			reduce(96), // +, reduce: FunctionLiteral
			reduce(96), // -, reduce: FunctionLiteral
			reduce(96), // product, reduce: FunctionLiteral
			reduce(96), // (, reduce: FunctionLiteral
			reduce(96), // ), reduce: FunctionLiteral
			nil,        // !
			nil,        // ~
			reduce(96), // [, reduce: FunctionLiteral
			nil,        // ]
			reduce(96), // ., reduce: FunctionLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1662
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1819), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1663
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1662), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1664
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(60), // lOr, reduce: CallExpression
			reduce(60), // lAnd, reduce: CallExpression
			reduce(60), // lNot, reduce: CallExpression
			reduce(60), // equals, reduce: CallExpression
			reduce(60), // lessOrGreater, reduce: CallExpression
			reduce(60), // or, reduce: CallExpression
			reduce(60), // xor, reduce: CallExpression
			reduce(60), // and, reduce: CallExpression
			reduce(60), // shift, reduce: CallExpression
			reduce(60), // +, reduce: CallExpression
			reduce(60), // -, reduce: CallExpression
			reduce(60), // product, reduce: CallExpression
			reduce(60), // (, reduce: CallExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(60), // [, reduce: CallExpression
			reduce(60), // ], reduce: CallExpression
			reduce(60), // ., reduce: CallExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1665
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(58), // lOr, reduce: IndexExpression
			reduce(58), // lAnd, reduce: IndexExpression
			reduce(58), // lNot, reduce: IndexExpression
			reduce(58), // equals, reduce: IndexExpression
			reduce(58), // lessOrGreater, reduce: IndexExpression
			reduce(58), // or, reduce: IndexExpression
			reduce(58), // xor, reduce: IndexExpression
			reduce(58), // and, reduce: IndexExpression
			reduce(58), // shift, reduce: IndexExpression
			reduce(58), // +, reduce: IndexExpression
			reduce(58), // -, reduce: IndexExpression
			reduce(58), // product, reduce: IndexExpression
			reduce(58), // (, reduce: IndexExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(58), // [, reduce: IndexExpression
			reduce(58), // ], reduce: IndexExpression
			reduce(58), // ., reduce: IndexExpression
			reduce(58), // assign, reduce: IndexExpression
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1666
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1821), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1667
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(61), // lOr, reduce: SelectorExpression
			reduce(61), // lAnd, reduce: SelectorExpression
			reduce(61), // lNot, reduce: SelectorExpression
			reduce(61), // equals, reduce: SelectorExpression
			reduce(61), // lessOrGreater, reduce: SelectorExpression
			reduce(61), // or, reduce: SelectorExpression
			reduce(61), // xor, reduce: SelectorExpression
			reduce(61), // and, reduce: SelectorExpression
			reduce(61), // shift, reduce: SelectorExpression
			reduce(61), // +, reduce: SelectorExpression
			reduce(61), // -, reduce: SelectorExpression
			reduce(61), // product, reduce: SelectorExpression
			reduce(61), // (, reduce: SelectorExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(61), // [, reduce: SelectorExpression
			reduce(61), // ], reduce: SelectorExpression
			reduce(61), // ., reduce: SelectorExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1668
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1432), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(548),  // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1669
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1824), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1670
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			reduce(9), // ], reduce: BlockStatement
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			reduce(9), // kwdElse, reduce: BlockStatement
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1671
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(70), // ], reduce: ForExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1672
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(63),   // {
			shift(1429), // }
			shift(65),   // kwdReturn
			shift(671),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(85),   // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(92),   // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(94),   // kwdIf
			nil,         // kwdElse
			shift(95),   // kwdFor
			shift(97),   // identifier
			shift(106),  // kwdNull
			shift(107),  // boolLit
			shift(108),  // intLit
			shift(109),  // floatLit
			shift(110),  // stringLit
			shift(111),  // kwdFn
		},
	},
	actionRow{ // S1673
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1432), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1674
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1672), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1675
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			reduce(8), // ], reduce: BlockStatement
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1676
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1672), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1677
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1830), // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1678
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(96), // lOr, reduce: FunctionLiteral
			reduce(96), // lAnd, reduce: FunctionLiteral
			reduce(96), // lNot, reduce: FunctionLiteral
			reduce(96), // equals, reduce: FunctionLiteral
			reduce(96), // lessOrGreater, reduce: FunctionLiteral
			reduce(96), // or, reduce: FunctionLiteral
			reduce(96), // xor, reduce: FunctionLiteral
			reduce(96), // and, reduce: FunctionLiteral
			reduce(96), // shift, reduce: FunctionLiteral
			reduce(96), // +, reduce: FunctionLiteral
			reduce(96), // -, reduce: FunctionLiteral
			reduce(96), // product, reduce: FunctionLiteral
			reduce(96), // (, reduce: FunctionLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(96), // [, reduce: FunctionLiteral
			reduce(96), // ], reduce: FunctionLiteral
			reduce(96), // ., reduce: FunctionLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1679
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1832), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1680
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1679), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1681
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(58), // lOr, reduce: IndexExpression
			reduce(58), // lAnd, reduce: IndexExpression
			reduce(58), // lNot, reduce: IndexExpression
			reduce(58), // equals, reduce: IndexExpression
			reduce(58), // lessOrGreater, reduce: IndexExpression
			reduce(58), // or, reduce: IndexExpression
			reduce(58), // xor, reduce: IndexExpression
			reduce(58), // and, reduce: IndexExpression
			reduce(58), // shift, reduce: IndexExpression
			reduce(58), // +, reduce: IndexExpression
			reduce(58), // -, reduce: IndexExpression
			reduce(58), // product, reduce: IndexExpression
			reduce(58), // (, reduce: IndexExpression
			reduce(58), // ), reduce: IndexExpression
			nil,        // !
			nil,        // ~
			reduce(58), // [, reduce: IndexExpression
			nil,        // ]
			reduce(58), // ., reduce: IndexExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1682
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(66), // ), reduce: IfExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1683
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(67), // ), reduce: IfExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1684
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			reduce(8), // ), reduce: BlockStatement
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			reduce(8), // kwdElse, reduce: BlockStatement
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1685
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(71), // ), reduce: ForExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1686
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(72), // ), reduce: ForExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1687
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1061), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1688
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(74), // ), reduce: ForExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1689
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1061), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1690
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1443), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1691
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1838), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1692
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			reduce(9), // lOr, reduce: BlockStatement
			reduce(9), // lAnd, reduce: BlockStatement
			reduce(9), // lNot, reduce: BlockStatement
			reduce(9), // equals, reduce: BlockStatement
			reduce(9), // lessOrGreater, reduce: BlockStatement
			reduce(9), // or, reduce: BlockStatement
			reduce(9), // xor, reduce: BlockStatement
			reduce(9), // and, reduce: BlockStatement
			reduce(9), // shift, reduce: BlockStatement
			reduce(9), // +, reduce: BlockStatement
			reduce(9), // -, reduce: BlockStatement
			reduce(9), // product, reduce: BlockStatement
			reduce(9), // (, reduce: BlockStatement
			reduce(9), // ), reduce: BlockStatement
			nil,       // !
			nil,       // ~
			reduce(9), // [, reduce: BlockStatement
			nil,       // ]
			reduce(9), // ., reduce: BlockStatement
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1693
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(97), // lOr, reduce: FunctionLiteral
			reduce(97), // lAnd, reduce: FunctionLiteral
			reduce(97), // lNot, reduce: FunctionLiteral
			reduce(97), // equals, reduce: FunctionLiteral
			reduce(97), // lessOrGreater, reduce: FunctionLiteral
			reduce(97), // or, reduce: FunctionLiteral
			reduce(97), // xor, reduce: FunctionLiteral
			reduce(97), // and, reduce: FunctionLiteral
			reduce(97), // shift, reduce: FunctionLiteral
			reduce(97), // +, reduce: FunctionLiteral
			reduce(97), // -, reduce: FunctionLiteral
			reduce(97), // product, reduce: FunctionLiteral
			reduce(97), // (, reduce: FunctionLiteral
			reduce(97), // ), reduce: FunctionLiteral
			nil,        // !
			nil,        // ~
			reduce(97), // [, reduce: FunctionLiteral
			nil,        // ]
			reduce(97), // ., reduce: FunctionLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1694
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(60), // (, reduce: CallExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(60), // [, reduce: CallExpression
			nil,        // ]
			reduce(60), // ., reduce: CallExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1695
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(58), // (, reduce: IndexExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(58), // [, reduce: IndexExpression
			nil,        // ]
			reduce(58), // ., reduce: IndexExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1696
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(96), // (, reduce: FunctionLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(96), // [, reduce: FunctionLiteral
			nil,        // ]
			reduce(96), // ., reduce: FunctionLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1697
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1840), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1698
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1697), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1699
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(58), // ,, reduce: IndexExpression
			nil,        // :
			reduce(58), // lOr, reduce: IndexExpression
			reduce(58), // lAnd, reduce: IndexExpression
			reduce(58), // lNot, reduce: IndexExpression
			reduce(58), // equals, reduce: IndexExpression
			reduce(58), // lessOrGreater, reduce: IndexExpression
			reduce(58), // or, reduce: IndexExpression
			reduce(58), // xor, reduce: IndexExpression
			reduce(58), // and, reduce: IndexExpression
			reduce(58), // shift, reduce: IndexExpression
			reduce(58), // +, reduce: IndexExpression
			reduce(58), // -, reduce: IndexExpression
			reduce(58), // product, reduce: IndexExpression
			reduce(58), // (, reduce: IndexExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(58), // [, reduce: IndexExpression
			reduce(58), // ], reduce: IndexExpression
			reduce(58), // ., reduce: IndexExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1700
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(66), // ,, reduce: IfExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(66), // ], reduce: IfExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1701
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(67), // ,, reduce: IfExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(67), // ], reduce: IfExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1702
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			reduce(8), // ,, reduce: BlockStatement
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			reduce(8), // ], reduce: BlockStatement
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			reduce(8), // kwdElse, reduce: BlockStatement
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1703
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(71), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(71), // ], reduce: ForExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1704
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(72), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(72), // ], reduce: ForExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1705
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1110), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1706
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(74), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(74), // ], reduce: ForExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1707
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1110), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1708
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1470), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1709
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1846), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1710
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			reduce(9), // ,, reduce: BlockStatement
			nil,       // :
			reduce(9), // lOr, reduce: BlockStatement
			reduce(9), // lAnd, reduce: BlockStatement
			reduce(9), // lNot, reduce: BlockStatement
			reduce(9), // equals, reduce: BlockStatement
			reduce(9), // lessOrGreater, reduce: BlockStatement
			reduce(9), // or, reduce: BlockStatement
			reduce(9), // xor, reduce: BlockStatement
			reduce(9), // and, reduce: BlockStatement
			reduce(9), // shift, reduce: BlockStatement
			reduce(9), // +, reduce: BlockStatement
			reduce(9), // -, reduce: BlockStatement
			reduce(9), // product, reduce: BlockStatement
			reduce(9), // (, reduce: BlockStatement
			nil,       // )
			nil,       // !
			nil,       // ~
			reduce(9), // [, reduce: BlockStatement
			reduce(9), // ], reduce: BlockStatement
			reduce(9), // ., reduce: BlockStatement
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1711
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(97), // ,, reduce: FunctionLiteral
			nil,        // :
			reduce(97), // lOr, reduce: FunctionLiteral
			reduce(97), // lAnd, reduce: FunctionLiteral
			reduce(97), // lNot, reduce: FunctionLiteral
			reduce(97), // equals, reduce: FunctionLiteral
			reduce(97), // lessOrGreater, reduce: FunctionLiteral
			reduce(97), // or, reduce: FunctionLiteral
			reduce(97), // xor, reduce: FunctionLiteral
			reduce(97), // and, reduce: FunctionLiteral
			reduce(97), // shift, reduce: FunctionLiteral
			reduce(97), // +, reduce: FunctionLiteral
			reduce(97), // -, reduce: FunctionLiteral
			reduce(97), // product, reduce: FunctionLiteral
			reduce(97), // (, reduce: FunctionLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(97), // [, reduce: FunctionLiteral
			reduce(97), // ], reduce: FunctionLiteral
			reduce(97), // ., reduce: FunctionLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1712
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(58), // {, reduce: IndexExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(58), // lOr, reduce: IndexExpression
			reduce(58), // lAnd, reduce: IndexExpression
			reduce(58), // lNot, reduce: IndexExpression
			reduce(58), // equals, reduce: IndexExpression
			reduce(58), // lessOrGreater, reduce: IndexExpression
			reduce(58), // or, reduce: IndexExpression
			reduce(58), // xor, reduce: IndexExpression
			reduce(58), // and, reduce: IndexExpression
			reduce(58), // shift, reduce: IndexExpression
			reduce(58), // +, reduce: IndexExpression
			reduce(58), // -, reduce: IndexExpression
			reduce(58), // product, reduce: IndexExpression
			reduce(58), // (, reduce: IndexExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(58), // [, reduce: IndexExpression
			nil,        // ]
			reduce(58), // ., reduce: IndexExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1713
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(66), // {, reduce: IfExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1714
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(67), // {, reduce: IfExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1715
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			reduce(8), // {, reduce: BlockStatement
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			reduce(8), // kwdElse, reduce: BlockStatement
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1716
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(71), // {, reduce: ForExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1717
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(72), // {, reduce: ForExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1718
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1150), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1719
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(74), // {, reduce: ForExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1720
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1150), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1721
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1490), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1722
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1851), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1723
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			reduce(9), // {, reduce: BlockStatement
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			reduce(9), // lOr, reduce: BlockStatement
			reduce(9), // lAnd, reduce: BlockStatement
			reduce(9), // lNot, reduce: BlockStatement
			reduce(9), // equals, reduce: BlockStatement
			reduce(9), // lessOrGreater, reduce: BlockStatement
			reduce(9), // or, reduce: BlockStatement
			reduce(9), // xor, reduce: BlockStatement
			reduce(9), // and, reduce: BlockStatement
			reduce(9), // shift, reduce: BlockStatement
			reduce(9), // +, reduce: BlockStatement
			reduce(9), // -, reduce: BlockStatement
			reduce(9), // product, reduce: BlockStatement
			reduce(9), // (, reduce: BlockStatement
			nil,       // )
			nil,       // !
			nil,       // ~
			reduce(9), // [, reduce: BlockStatement
			nil,       // ]
			reduce(9), // ., reduce: BlockStatement
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1724
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(97), // {, reduce: FunctionLiteral
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(97), // lOr, reduce: FunctionLiteral
			reduce(97), // lAnd, reduce: FunctionLiteral
			reduce(97), // lNot, reduce: FunctionLiteral
			reduce(97), // equals, reduce: FunctionLiteral
			reduce(97), // lessOrGreater, reduce: FunctionLiteral
			reduce(97), // or, reduce: FunctionLiteral
			reduce(97), // xor, reduce: FunctionLiteral
			reduce(97), // and, reduce: FunctionLiteral
			reduce(97), // shift, reduce: FunctionLiteral
			reduce(97), // +, reduce: FunctionLiteral
			reduce(97), // -, reduce: FunctionLiteral
			reduce(97), // product, reduce: FunctionLiteral
			reduce(97), // (, reduce: FunctionLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(97), // [, reduce: FunctionLiteral
			nil,        // ]
			reduce(97), // ., reduce: FunctionLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1725
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(73), // $, reduce: ForExpression
			reduce(73), // terminator, reduce: ForExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1726
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(60), // terminator, reduce: CallExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(60), // lOr, reduce: CallExpression
			reduce(60), // lAnd, reduce: CallExpression
			reduce(60), // lNot, reduce: CallExpression
			reduce(60), // equals, reduce: CallExpression
			reduce(60), // lessOrGreater, reduce: CallExpression
			reduce(60), // or, reduce: CallExpression
			reduce(60), // xor, reduce: CallExpression
			reduce(60), // and, reduce: CallExpression
			reduce(60), // shift, reduce: CallExpression
			reduce(60), // +, reduce: CallExpression
			reduce(60), // -, reduce: CallExpression
			reduce(60), // product, reduce: CallExpression
			reduce(60), // (, reduce: CallExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(60), // [, reduce: CallExpression
			nil,        // ]
			reduce(60), // ., reduce: CallExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1727
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(58), // terminator, reduce: IndexExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(58), // lOr, reduce: IndexExpression
			reduce(58), // lAnd, reduce: IndexExpression
			reduce(58), // lNot, reduce: IndexExpression
			reduce(58), // equals, reduce: IndexExpression
			reduce(58), // lessOrGreater, reduce: IndexExpression
			reduce(58), // or, reduce: IndexExpression
			reduce(58), // xor, reduce: IndexExpression
			reduce(58), // and, reduce: IndexExpression
			reduce(58), // shift, reduce: IndexExpression
			reduce(58), // +, reduce: IndexExpression
			reduce(58), // -, reduce: IndexExpression
			reduce(58), // product, reduce: IndexExpression
			reduce(58), // (, reduce: IndexExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(58), // [, reduce: IndexExpression
			nil,        // ]
			reduce(58), // ., reduce: IndexExpression
			reduce(58), // assign, reduce: IndexExpression
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1728
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1852), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1729
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(61), // terminator, reduce: SelectorExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(61), // lOr, reduce: SelectorExpression
			reduce(61), // lAnd, reduce: SelectorExpression
			reduce(61), // lNot, reduce: SelectorExpression
			reduce(61), // equals, reduce: SelectorExpression
			reduce(61), // lessOrGreater, reduce: SelectorExpression
			reduce(61), // or, reduce: SelectorExpression
			reduce(61), // xor, reduce: SelectorExpression
			reduce(61), // and, reduce: SelectorExpression
			reduce(61), // shift, reduce: SelectorExpression
			reduce(61), // +, reduce: SelectorExpression
			reduce(61), // -, reduce: SelectorExpression
			reduce(61), // product, reduce: SelectorExpression
			reduce(61), // (, reduce: SelectorExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(61), // [, reduce: SelectorExpression
			nil,        // ]
			reduce(61), // ., reduce: SelectorExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1730
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1536), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(736),  // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1731
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1855), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1732
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			reduce(9), // terminator, reduce: BlockStatement
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			reduce(9), // kwdElse, reduce: BlockStatement
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1733
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(70), // terminator, reduce: ForExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1734
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(63),   // {
			shift(1533), // }
			shift(65),   // kwdReturn
			shift(671),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(85),   // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(92),   // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(94),   // kwdIf
			nil,         // kwdElse
			shift(95),   // kwdFor
			shift(97),   // identifier
			shift(106),  // kwdNull
			shift(107),  // boolLit
			shift(108),  // intLit
			shift(109),  // floatLit
			shift(110),  // stringLit
			shift(111),  // kwdFn
		},
	},
	actionRow{ // S1735
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1536), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1736
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1734), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1737
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			reduce(8), // terminator, reduce: BlockStatement
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1738
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1734), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1739
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1861), // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1740
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(96), // terminator, reduce: FunctionLiteral
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(96), // lOr, reduce: FunctionLiteral
			reduce(96), // lAnd, reduce: FunctionLiteral
			reduce(96), // lNot, reduce: FunctionLiteral
			reduce(96), // equals, reduce: FunctionLiteral
			reduce(96), // lessOrGreater, reduce: FunctionLiteral
			reduce(96), // or, reduce: FunctionLiteral
			reduce(96), // xor, reduce: FunctionLiteral
			reduce(96), // and, reduce: FunctionLiteral
			reduce(96), // shift, reduce: FunctionLiteral
			reduce(96), // +, reduce: FunctionLiteral
			reduce(96), // -, reduce: FunctionLiteral
			reduce(96), // product, reduce: FunctionLiteral
			reduce(96), // (, reduce: FunctionLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(96), // [, reduce: FunctionLiteral
			nil,        // ]
			reduce(96), // ., reduce: FunctionLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1741
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1863), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1742
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1741), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1743
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(75), // $, reduce: ForExpression
			reduce(75), // terminator, reduce: ForExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1744
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(76), // $, reduce: ForExpression
			reduce(76), // terminator, reduce: ForExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1745
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(758), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1746
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(58), // terminator, reduce: IndexExpression
			reduce(58), // {, reduce: IndexExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(58), // lOr, reduce: IndexExpression
			reduce(58), // lAnd, reduce: IndexExpression
			reduce(58), // lNot, reduce: IndexExpression
			reduce(58), // equals, reduce: IndexExpression
			reduce(58), // lessOrGreater, reduce: IndexExpression
			reduce(58), // or, reduce: IndexExpression
			reduce(58), // xor, reduce: IndexExpression
			reduce(58), // and, reduce: IndexExpression
			reduce(58), // shift, reduce: IndexExpression
			reduce(58), // +, reduce: IndexExpression
			reduce(58), // -, reduce: IndexExpression
			reduce(58), // product, reduce: IndexExpression
			reduce(58), // (, reduce: IndexExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(58), // [, reduce: IndexExpression
			nil,        // ]
			reduce(58), // ., reduce: IndexExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1747
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(66), // terminator, reduce: IfExpression
			reduce(66), // {, reduce: IfExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1748
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(67), // terminator, reduce: IfExpression
			reduce(67), // {, reduce: IfExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1749
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			reduce(8), // terminator, reduce: BlockStatement
			reduce(8), // {, reduce: BlockStatement
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			reduce(8), // kwdElse, reduce: BlockStatement
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1750
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(71), // terminator, reduce: ForExpression
			reduce(71), // {, reduce: ForExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1751
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(72), // terminator, reduce: ForExpression
			reduce(72), // {, reduce: ForExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1752
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1228), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1753
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(74), // terminator, reduce: ForExpression
			reduce(74), // {, reduce: ForExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1754
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1228), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1755
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1550), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1756
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1870), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1757
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			reduce(9), // terminator, reduce: BlockStatement
			reduce(9), // {, reduce: BlockStatement
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			reduce(9), // lOr, reduce: BlockStatement
			reduce(9), // lAnd, reduce: BlockStatement
			reduce(9), // lNot, reduce: BlockStatement
			reduce(9), // equals, reduce: BlockStatement
			reduce(9), // lessOrGreater, reduce: BlockStatement
			reduce(9), // or, reduce: BlockStatement
			reduce(9), // xor, reduce: BlockStatement
			reduce(9), // and, reduce: BlockStatement
			reduce(9), // shift, reduce: BlockStatement
			reduce(9), // +, reduce: BlockStatement
			reduce(9), // -, reduce: BlockStatement
			reduce(9), // product, reduce: BlockStatement
			reduce(9), // (, reduce: BlockStatement
			nil,       // )
			nil,       // !
			nil,       // ~
			reduce(9), // [, reduce: BlockStatement
			nil,       // ]
			reduce(9), // ., reduce: BlockStatement
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1758
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(97), // terminator, reduce: FunctionLiteral
			reduce(97), // {, reduce: FunctionLiteral
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(97), // lOr, reduce: FunctionLiteral
			reduce(97), // lAnd, reduce: FunctionLiteral
			reduce(97), // lNot, reduce: FunctionLiteral
			reduce(97), // equals, reduce: FunctionLiteral
			reduce(97), // lessOrGreater, reduce: FunctionLiteral
			reduce(97), // or, reduce: FunctionLiteral
			reduce(97), // xor, reduce: FunctionLiteral
			reduce(97), // and, reduce: FunctionLiteral
			reduce(97), // shift, reduce: FunctionLiteral
			reduce(97), // +, reduce: FunctionLiteral
			reduce(97), // -, reduce: FunctionLiteral
			reduce(97), // product, reduce: FunctionLiteral
			reduce(97), // (, reduce: FunctionLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(97), // [, reduce: FunctionLiteral
			nil,        // ]
			reduce(97), // ., reduce: FunctionLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1759
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(8), // $, reduce: BlockStatement
			reduce(8), // terminator, reduce: BlockStatement
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			reduce(8), // lOr, reduce: BlockStatement
			reduce(8), // lAnd, reduce: BlockStatement
			reduce(8), // lNot, reduce: BlockStatement
			reduce(8), // equals, reduce: BlockStatement
			reduce(8), // lessOrGreater, reduce: BlockStatement
			reduce(8), // or, reduce: BlockStatement
			reduce(8), // xor, reduce: BlockStatement
			reduce(8), // and, reduce: BlockStatement
			reduce(8), // shift, reduce: BlockStatement
			reduce(8), // +, reduce: BlockStatement
			reduce(8), // -, reduce: BlockStatement
			reduce(8), // product, reduce: BlockStatement
			reduce(8), // (, reduce: BlockStatement
			nil,       // )
			nil,       // !
			nil,       // ~
			reduce(8), // [, reduce: BlockStatement
			nil,       // ]
			reduce(8), // ., reduce: BlockStatement
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1760
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(58), // terminator, reduce: IndexExpression
			nil,        // {
			reduce(58), // }, reduce: IndexExpression
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(58), // lOr, reduce: IndexExpression
			reduce(58), // lAnd, reduce: IndexExpression
			reduce(58), // lNot, reduce: IndexExpression
			reduce(58), // equals, reduce: IndexExpression
			reduce(58), // lessOrGreater, reduce: IndexExpression
			reduce(58), // or, reduce: IndexExpression
			reduce(58), // xor, reduce: IndexExpression
			reduce(58), // and, reduce: IndexExpression
			reduce(58), // shift, reduce: IndexExpression
			reduce(58), // +, reduce: IndexExpression
			reduce(58), // -, reduce: IndexExpression
			reduce(58), // product, reduce: IndexExpression
			reduce(58), // (, reduce: IndexExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(58), // [, reduce: IndexExpression
			nil,        // ]
			reduce(58), // ., reduce: IndexExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1761
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(66), // terminator, reduce: IfExpression
			nil,        // {
			reduce(66), // }, reduce: IfExpression
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1762
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(67), // terminator, reduce: IfExpression
			nil,        // {
			reduce(67), // }, reduce: IfExpression
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1763
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			reduce(8), // terminator, reduce: BlockStatement
			nil,       // {
			reduce(8), // }, reduce: BlockStatement
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			reduce(8), // kwdElse, reduce: BlockStatement
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1764
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(71), // terminator, reduce: ForExpression
			nil,        // {
			reduce(71), // }, reduce: ForExpression
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1765
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(72), // terminator, reduce: ForExpression
			nil,        // {
			reduce(72), // }, reduce: ForExpression
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1766
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1267), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1767
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(74), // terminator, reduce: ForExpression
			nil,        // {
			reduce(74), // }, reduce: ForExpression
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1768
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1267), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1769
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1571), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1770
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1875), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1771
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			reduce(9), // terminator, reduce: BlockStatement
			nil,       // {
			reduce(9), // }, reduce: BlockStatement
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			reduce(9), // lOr, reduce: BlockStatement
			reduce(9), // lAnd, reduce: BlockStatement
			reduce(9), // lNot, reduce: BlockStatement
			reduce(9), // equals, reduce: BlockStatement
			reduce(9), // lessOrGreater, reduce: BlockStatement
			reduce(9), // or, reduce: BlockStatement
			reduce(9), // xor, reduce: BlockStatement
			reduce(9), // and, reduce: BlockStatement
			reduce(9), // shift, reduce: BlockStatement
			reduce(9), // +, reduce: BlockStatement
			reduce(9), // -, reduce: BlockStatement
			reduce(9), // product, reduce: BlockStatement
			reduce(9), // (, reduce: BlockStatement
			nil,       // )
			nil,       // !
			nil,       // ~
			reduce(9), // [, reduce: BlockStatement
			nil,       // ]
			reduce(9), // ., reduce: BlockStatement
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1772
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(97), // terminator, reduce: FunctionLiteral
			nil,        // {
			reduce(97), // }, reduce: FunctionLiteral
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(97), // lOr, reduce: FunctionLiteral
			reduce(97), // lAnd, reduce: FunctionLiteral
			reduce(97), // lNot, reduce: FunctionLiteral
			reduce(97), // equals, reduce: FunctionLiteral
			reduce(97), // lessOrGreater, reduce: FunctionLiteral
			reduce(97), // or, reduce: FunctionLiteral
			reduce(97), // xor, reduce: FunctionLiteral
			reduce(97), // and, reduce: FunctionLiteral
			reduce(97), // shift, reduce: FunctionLiteral
			reduce(97), // +, reduce: FunctionLiteral
			reduce(97), // -, reduce: FunctionLiteral
			reduce(97), // product, reduce: FunctionLiteral
			reduce(97), // (, reduce: FunctionLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(97), // [, reduce: FunctionLiteral
			nil,        // ]
			reduce(97), // ., reduce: FunctionLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1773
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(60), // }, reduce: CallExpression
			nil,        // kwdReturn
			reduce(60), // ,, reduce: CallExpression
			nil,        // :
			reduce(60), // lOr, reduce: CallExpression
			reduce(60), // lAnd, reduce: CallExpression
			reduce(60), // lNot, reduce: CallExpression
			reduce(60), // equals, reduce: CallExpression
			reduce(60), // lessOrGreater, reduce: CallExpression
			reduce(60), // or, reduce: CallExpression
			reduce(60), // xor, reduce: CallExpression
			reduce(60), // and, reduce: CallExpression
			reduce(60), // shift, reduce: CallExpression
			reduce(60), // +, reduce: CallExpression
			reduce(60), // -, reduce: CallExpression
			reduce(60), // product, reduce: CallExpression
			reduce(60), // (, reduce: CallExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(60), // [, reduce: CallExpression
			nil,        // ]
			reduce(60), // ., reduce: CallExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1774
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(58), // }, reduce: IndexExpression
			nil,        // kwdReturn
			reduce(58), // ,, reduce: IndexExpression
			nil,        // :
			reduce(58), // lOr, reduce: IndexExpression
			reduce(58), // lAnd, reduce: IndexExpression
			reduce(58), // lNot, reduce: IndexExpression
			reduce(58), // equals, reduce: IndexExpression
			reduce(58), // lessOrGreater, reduce: IndexExpression
			reduce(58), // or, reduce: IndexExpression
			reduce(58), // xor, reduce: IndexExpression
			reduce(58), // and, reduce: IndexExpression
			reduce(58), // shift, reduce: IndexExpression
			reduce(58), // +, reduce: IndexExpression
			reduce(58), // -, reduce: IndexExpression
			reduce(58), // product, reduce: IndexExpression
			reduce(58), // (, reduce: IndexExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(58), // [, reduce: IndexExpression
			nil,        // ]
			reduce(58), // ., reduce: IndexExpression
			reduce(58), // assign, reduce: IndexExpression
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1775
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			shift(1876), // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1776
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(61), // }, reduce: SelectorExpression
			nil,        // kwdReturn
			reduce(61), // ,, reduce: SelectorExpression
			nil,        // :
			reduce(61), // lOr, reduce: SelectorExpression
			reduce(61), // lAnd, reduce: SelectorExpression
			reduce(61), // lNot, reduce: SelectorExpression
			reduce(61), // equals, reduce: SelectorExpression
			reduce(61), // lessOrGreater, reduce: SelectorExpression
			reduce(61), // or, reduce: SelectorExpression
			reduce(61), // xor, reduce: SelectorExpression
			reduce(61), // and, reduce: SelectorExpression
			reduce(61), // shift, reduce: SelectorExpression
			reduce(61), // +, reduce: SelectorExpression
			reduce(61), // -, reduce: SelectorExpression
			reduce(61), // product, reduce: SelectorExpression
			reduce(61), // (, reduce: SelectorExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(61), // [, reduce: SelectorExpression
			nil,        // ]
			reduce(61), // ., reduce: SelectorExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1777
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1613), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(865),  // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1778
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1879), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1779
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			reduce(9), // }, reduce: BlockStatement
			nil,       // kwdReturn
			reduce(9), // ,, reduce: BlockStatement
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			reduce(9), // kwdElse, reduce: BlockStatement
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1780
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(70), // }, reduce: ForExpression
			nil,        // kwdReturn
			reduce(70), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1781
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(63),   // {
			shift(1610), // }
			shift(65),   // kwdReturn
			shift(671),  // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(85),   // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(92),   // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(94),   // kwdIf
			nil,         // kwdElse
			shift(95),   // kwdFor
			shift(97),   // identifier
			shift(106),  // kwdNull
			shift(107),  // boolLit
			shift(108),  // intLit
			shift(109),  // floatLit
			shift(110),  // stringLit
			shift(111),  // kwdFn
		},
	},
	actionRow{ // S1782
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1613), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1783
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1781), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1784
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			reduce(8), // }, reduce: BlockStatement
			nil,       // kwdReturn
			reduce(8), // ,, reduce: BlockStatement
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1785
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1781), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1786
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(1885), // terminator
			nil,         // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1787
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(96), // }, reduce: FunctionLiteral
			nil,        // kwdReturn
			reduce(96), // ,, reduce: FunctionLiteral
			nil,        // :
			reduce(96), // lOr, reduce: FunctionLiteral
			reduce(96), // lAnd, reduce: FunctionLiteral
			reduce(96), // lNot, reduce: FunctionLiteral
			reduce(96), // equals, reduce: FunctionLiteral
			reduce(96), // lessOrGreater, reduce: FunctionLiteral
			reduce(96), // or, reduce: FunctionLiteral
			reduce(96), // xor, reduce: FunctionLiteral
			reduce(96), // and, reduce: FunctionLiteral
			reduce(96), // shift, reduce: FunctionLiteral
			reduce(96), // +, reduce: FunctionLiteral
			reduce(96), // -, reduce: FunctionLiteral
			reduce(96), // product, reduce: FunctionLiteral
			reduce(96), // (, reduce: FunctionLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(96), // [, reduce: FunctionLiteral
			nil,        // ]
			reduce(96), // ., reduce: FunctionLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1788
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(798),  // {
			shift(1887), // }
			shift(65),   // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(351),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(358),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(360),  // kwdIf
			nil,         // kwdElse
			shift(361),  // kwdFor
			shift(363),  // identifier
			shift(372),  // kwdNull
			shift(373),  // boolLit
			shift(374),  // intLit
			shift(375),  // floatLit
			shift(376),  // stringLit
			shift(377),  // kwdFn
		},
	},
	actionRow{ // S1789
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1788), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1790
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(73), // terminator, reduce: ForExpression
			nil,        // {
			reduce(73), // }, reduce: ForExpression
			nil,        // kwdReturn
			nil,        // ,
			reduce(73), // :, reduce: ForExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1791
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(75), // terminator, reduce: ForExpression
			nil,        // {
			reduce(75), // }, reduce: ForExpression
			nil,        // kwdReturn
			nil,        // ,
			reduce(75), // :, reduce: ForExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1792
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(76), // terminator, reduce: ForExpression
			nil,        // {
			reduce(76), // }, reduce: ForExpression
			nil,        // kwdReturn
			nil,        // ,
			reduce(76), // :, reduce: ForExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1793
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			shift(916), // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1794
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			reduce(8), // terminator, reduce: BlockStatement
			nil,       // {
			reduce(8), // }, reduce: BlockStatement
			nil,       // kwdReturn
			nil,       // ,
			reduce(8), // :, reduce: BlockStatement
			reduce(8), // lOr, reduce: BlockStatement
			reduce(8), // lAnd, reduce: BlockStatement
			reduce(8), // lNot, reduce: BlockStatement
			reduce(8), // equals, reduce: BlockStatement
			reduce(8), // lessOrGreater, reduce: BlockStatement
			reduce(8), // or, reduce: BlockStatement
			reduce(8), // xor, reduce: BlockStatement
			reduce(8), // and, reduce: BlockStatement
			reduce(8), // shift, reduce: BlockStatement
			reduce(8), // +, reduce: BlockStatement
			reduce(8), // -, reduce: BlockStatement
			reduce(8), // product, reduce: BlockStatement
			reduce(8), // (, reduce: BlockStatement
			nil,       // )
			nil,       // !
			nil,       // ~
			reduce(8), // [, reduce: BlockStatement
			nil,       // ]
			reduce(8), // ., reduce: BlockStatement
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1795
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(58), // :, reduce: IndexExpression
			reduce(58), // lOr, reduce: IndexExpression
			reduce(58), // lAnd, reduce: IndexExpression
			reduce(58), // lNot, reduce: IndexExpression
			reduce(58), // equals, reduce: IndexExpression
			reduce(58), // lessOrGreater, reduce: IndexExpression
			reduce(58), // or, reduce: IndexExpression
			reduce(58), // xor, reduce: IndexExpression
			reduce(58), // and, reduce: IndexExpression
			reduce(58), // shift, reduce: IndexExpression
			reduce(58), // +, reduce: IndexExpression
			reduce(58), // -, reduce: IndexExpression
			reduce(58), // product, reduce: IndexExpression
			reduce(58), // (, reduce: IndexExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(58), // [, reduce: IndexExpression
			nil,        // ]
			reduce(58), // ., reduce: IndexExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1796
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(66), // :, reduce: IfExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1797
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(67), // :, reduce: IfExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1798
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			reduce(8), // :, reduce: BlockStatement
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			reduce(8), // kwdElse, reduce: BlockStatement
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1799
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(71), // :, reduce: ForExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1800
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(72), // :, reduce: ForExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1801
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1357), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1802
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(74), // :, reduce: ForExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1803
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1357), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1804
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1638), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1805
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1894), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1806
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			reduce(9), // :, reduce: BlockStatement
			reduce(9), // lOr, reduce: BlockStatement
			reduce(9), // lAnd, reduce: BlockStatement
			reduce(9), // lNot, reduce: BlockStatement
			reduce(9), // equals, reduce: BlockStatement
			reduce(9), // lessOrGreater, reduce: BlockStatement
			reduce(9), // or, reduce: BlockStatement
			reduce(9), // xor, reduce: BlockStatement
			reduce(9), // and, reduce: BlockStatement
			reduce(9), // shift, reduce: BlockStatement
			reduce(9), // +, reduce: BlockStatement
			reduce(9), // -, reduce: BlockStatement
			reduce(9), // product, reduce: BlockStatement
			reduce(9), // (, reduce: BlockStatement
			nil,       // )
			nil,       // !
			nil,       // ~
			reduce(9), // [, reduce: BlockStatement
			nil,       // ]
			reduce(9), // ., reduce: BlockStatement
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1807
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(97), // :, reduce: FunctionLiteral
			reduce(97), // lOr, reduce: FunctionLiteral
			reduce(97), // lAnd, reduce: FunctionLiteral
			reduce(97), // lNot, reduce: FunctionLiteral
			reduce(97), // equals, reduce: FunctionLiteral
			reduce(97), // lessOrGreater, reduce: FunctionLiteral
			reduce(97), // or, reduce: FunctionLiteral
			reduce(97), // xor, reduce: FunctionLiteral
			reduce(97), // and, reduce: FunctionLiteral
			reduce(97), // shift, reduce: FunctionLiteral
			reduce(97), // +, reduce: FunctionLiteral
			reduce(97), // -, reduce: FunctionLiteral
			reduce(97), // product, reduce: FunctionLiteral
			reduce(97), // (, reduce: FunctionLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(97), // [, reduce: FunctionLiteral
			nil,        // ]
			reduce(97), // ., reduce: FunctionLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1808
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(58), // ,, reduce: IndexExpression
			nil,        // :
			reduce(58), // lOr, reduce: IndexExpression
			reduce(58), // lAnd, reduce: IndexExpression
			reduce(58), // lNot, reduce: IndexExpression
			reduce(58), // equals, reduce: IndexExpression
			reduce(58), // lessOrGreater, reduce: IndexExpression
			reduce(58), // or, reduce: IndexExpression
			reduce(58), // xor, reduce: IndexExpression
			reduce(58), // and, reduce: IndexExpression
			reduce(58), // shift, reduce: IndexExpression
			reduce(58), // +, reduce: IndexExpression
			reduce(58), // -, reduce: IndexExpression
			reduce(58), // product, reduce: IndexExpression
			reduce(58), // (, reduce: IndexExpression
			reduce(58), // ), reduce: IndexExpression
			nil,        // !
			nil,        // ~
			reduce(58), // [, reduce: IndexExpression
			nil,        // ]
			reduce(58), // ., reduce: IndexExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1809
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(66), // ,, reduce: IfExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(66), // ), reduce: IfExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1810
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(67), // ,, reduce: IfExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(67), // ), reduce: IfExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1811
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			reduce(8), // ,, reduce: BlockStatement
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			reduce(8), // ), reduce: BlockStatement
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			reduce(8), // kwdElse, reduce: BlockStatement
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1812
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(71), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(71), // ), reduce: ForExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1813
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(72), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(72), // ), reduce: ForExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1814
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1395), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1815
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(74), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(74), // ), reduce: ForExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1816
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1395), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1817
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1655), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1818
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1899), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1819
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			reduce(9), // ,, reduce: BlockStatement
			nil,       // :
			reduce(9), // lOr, reduce: BlockStatement
			reduce(9), // lAnd, reduce: BlockStatement
			reduce(9), // lNot, reduce: BlockStatement
			reduce(9), // equals, reduce: BlockStatement
			reduce(9), // lessOrGreater, reduce: BlockStatement
			reduce(9), // or, reduce: BlockStatement
			reduce(9), // xor, reduce: BlockStatement
			reduce(9), // and, reduce: BlockStatement
			reduce(9), // shift, reduce: BlockStatement
			reduce(9), // +, reduce: BlockStatement
			reduce(9), // -, reduce: BlockStatement
			reduce(9), // product, reduce: BlockStatement
			reduce(9), // (, reduce: BlockStatement
			reduce(9), // ), reduce: BlockStatement
			nil,       // !
			nil,       // ~
			reduce(9), // [, reduce: BlockStatement
			nil,       // ]
			reduce(9), // ., reduce: BlockStatement
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1820
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(97), // ,, reduce: FunctionLiteral
			nil,        // :
			reduce(97), // lOr, reduce: FunctionLiteral
			reduce(97), // lAnd, reduce: FunctionLiteral
			reduce(97), // lNot, reduce: FunctionLiteral
			reduce(97), // equals, reduce: FunctionLiteral
			reduce(97), // lessOrGreater, reduce: FunctionLiteral
			reduce(97), // or, reduce: FunctionLiteral
			reduce(97), // xor, reduce: FunctionLiteral
			reduce(97), // and, reduce: FunctionLiteral
			reduce(97), // shift, reduce: FunctionLiteral
			reduce(97), // +, reduce: FunctionLiteral
			reduce(97), // -, reduce: FunctionLiteral
			reduce(97), // product, reduce: FunctionLiteral
			reduce(97), // (, reduce: FunctionLiteral
			reduce(97), // ), reduce: FunctionLiteral
			nil,        // !
			nil,        // ~
			reduce(97), // [, reduce: FunctionLiteral
			nil,        // ]
			reduce(97), // ., reduce: FunctionLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1821
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(58), // lOr, reduce: IndexExpression
			reduce(58), // lAnd, reduce: IndexExpression
			reduce(58), // lNot, reduce: IndexExpression
			reduce(58), // equals, reduce: IndexExpression
			reduce(58), // lessOrGreater, reduce: IndexExpression
			reduce(58), // or, reduce: IndexExpression
			reduce(58), // xor, reduce: IndexExpression
			reduce(58), // and, reduce: IndexExpression
			reduce(58), // shift, reduce: IndexExpression
			reduce(58), // +, reduce: IndexExpression
			reduce(58), // -, reduce: IndexExpression
			reduce(58), // product, reduce: IndexExpression
			reduce(58), // (, reduce: IndexExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(58), // [, reduce: IndexExpression
			reduce(58), // ], reduce: IndexExpression
			reduce(58), // ., reduce: IndexExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1822
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(66), // ], reduce: IfExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1823
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(67), // ], reduce: IfExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1824
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			reduce(8), // ], reduce: BlockStatement
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			reduce(8), // kwdElse, reduce: BlockStatement
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1825
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(71), // ], reduce: ForExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1826
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(72), // ], reduce: ForExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1827
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1432), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1828
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(74), // ], reduce: ForExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1829
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1432), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1830
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1672), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1831
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1904), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1832
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			reduce(9), // lOr, reduce: BlockStatement
			reduce(9), // lAnd, reduce: BlockStatement
			reduce(9), // lNot, reduce: BlockStatement
			reduce(9), // equals, reduce: BlockStatement
			reduce(9), // lessOrGreater, reduce: BlockStatement
			reduce(9), // or, reduce: BlockStatement
			reduce(9), // xor, reduce: BlockStatement
			reduce(9), // and, reduce: BlockStatement
			reduce(9), // shift, reduce: BlockStatement
			reduce(9), // +, reduce: BlockStatement
			reduce(9), // -, reduce: BlockStatement
			reduce(9), // product, reduce: BlockStatement
			reduce(9), // (, reduce: BlockStatement
			nil,       // )
			nil,       // !
			nil,       // ~
			reduce(9), // [, reduce: BlockStatement
			reduce(9), // ], reduce: BlockStatement
			reduce(9), // ., reduce: BlockStatement
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1833
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(97), // lOr, reduce: FunctionLiteral
			reduce(97), // lAnd, reduce: FunctionLiteral
			reduce(97), // lNot, reduce: FunctionLiteral
			reduce(97), // equals, reduce: FunctionLiteral
			reduce(97), // lessOrGreater, reduce: FunctionLiteral
			reduce(97), // or, reduce: FunctionLiteral
			reduce(97), // xor, reduce: FunctionLiteral
			reduce(97), // and, reduce: FunctionLiteral
			reduce(97), // shift, reduce: FunctionLiteral
			reduce(97), // +, reduce: FunctionLiteral
			reduce(97), // -, reduce: FunctionLiteral
			reduce(97), // product, reduce: FunctionLiteral
			reduce(97), // (, reduce: FunctionLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(97), // [, reduce: FunctionLiteral
			reduce(97), // ], reduce: FunctionLiteral
			reduce(97), // ., reduce: FunctionLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1834
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(73), // ), reduce: ForExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1835
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(75), // ), reduce: ForExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1836
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(76), // ), reduce: ForExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1837
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1061), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1838
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			reduce(8), // lOr, reduce: BlockStatement
			reduce(8), // lAnd, reduce: BlockStatement
			reduce(8), // lNot, reduce: BlockStatement
			reduce(8), // equals, reduce: BlockStatement
			reduce(8), // lessOrGreater, reduce: BlockStatement
			reduce(8), // or, reduce: BlockStatement
			reduce(8), // xor, reduce: BlockStatement
			reduce(8), // and, reduce: BlockStatement
			reduce(8), // shift, reduce: BlockStatement
			reduce(8), // +, reduce: BlockStatement
			reduce(8), // -, reduce: BlockStatement
			reduce(8), // product, reduce: BlockStatement
			reduce(8), // (, reduce: BlockStatement
			reduce(8), // ), reduce: BlockStatement
			nil,       // !
			nil,       // ~
			reduce(8), // [, reduce: BlockStatement
			nil,       // ]
			reduce(8), // ., reduce: BlockStatement
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1839
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1906), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1840
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			reduce(9), // (, reduce: BlockStatement
			nil,       // )
			nil,       // !
			nil,       // ~
			reduce(9), // [, reduce: BlockStatement
			nil,       // ]
			reduce(9), // ., reduce: BlockStatement
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1841
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			reduce(97), // (, reduce: FunctionLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(97), // [, reduce: FunctionLiteral
			nil,        // ]
			reduce(97), // ., reduce: FunctionLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1842
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(73), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(73), // ], reduce: ForExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1843
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(75), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(75), // ], reduce: ForExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1844
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(76), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(76), // ], reduce: ForExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1845
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1110), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1846
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			reduce(8), // ,, reduce: BlockStatement
			nil,       // :
			reduce(8), // lOr, reduce: BlockStatement
			reduce(8), // lAnd, reduce: BlockStatement
			reduce(8), // lNot, reduce: BlockStatement
			reduce(8), // equals, reduce: BlockStatement
			reduce(8), // lessOrGreater, reduce: BlockStatement
			reduce(8), // or, reduce: BlockStatement
			reduce(8), // xor, reduce: BlockStatement
			reduce(8), // and, reduce: BlockStatement
			reduce(8), // shift, reduce: BlockStatement
			reduce(8), // +, reduce: BlockStatement
			reduce(8), // -, reduce: BlockStatement
			reduce(8), // product, reduce: BlockStatement
			reduce(8), // (, reduce: BlockStatement
			nil,       // )
			nil,       // !
			nil,       // ~
			reduce(8), // [, reduce: BlockStatement
			reduce(8), // ], reduce: BlockStatement
			reduce(8), // ., reduce: BlockStatement
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1847
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(73), // {, reduce: ForExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1848
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(75), // {, reduce: ForExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1849
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(76), // {, reduce: ForExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1850
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1150), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1851
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			reduce(8), // {, reduce: BlockStatement
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			reduce(8), // lOr, reduce: BlockStatement
			reduce(8), // lAnd, reduce: BlockStatement
			reduce(8), // lNot, reduce: BlockStatement
			reduce(8), // equals, reduce: BlockStatement
			reduce(8), // lessOrGreater, reduce: BlockStatement
			reduce(8), // or, reduce: BlockStatement
			reduce(8), // xor, reduce: BlockStatement
			reduce(8), // and, reduce: BlockStatement
			reduce(8), // shift, reduce: BlockStatement
			reduce(8), // +, reduce: BlockStatement
			reduce(8), // -, reduce: BlockStatement
			reduce(8), // product, reduce: BlockStatement
			reduce(8), // (, reduce: BlockStatement
			nil,       // )
			nil,       // !
			nil,       // ~
			reduce(8), // [, reduce: BlockStatement
			nil,       // ]
			reduce(8), // ., reduce: BlockStatement
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1852
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(58), // terminator, reduce: IndexExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(58), // lOr, reduce: IndexExpression
			reduce(58), // lAnd, reduce: IndexExpression
			reduce(58), // lNot, reduce: IndexExpression
			reduce(58), // equals, reduce: IndexExpression
			reduce(58), // lessOrGreater, reduce: IndexExpression
			reduce(58), // or, reduce: IndexExpression
			reduce(58), // xor, reduce: IndexExpression
			reduce(58), // and, reduce: IndexExpression
			reduce(58), // shift, reduce: IndexExpression
			reduce(58), // +, reduce: IndexExpression
			reduce(58), // -, reduce: IndexExpression
			reduce(58), // product, reduce: IndexExpression
			reduce(58), // (, reduce: IndexExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(58), // [, reduce: IndexExpression
			nil,        // ]
			reduce(58), // ., reduce: IndexExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1853
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(66), // terminator, reduce: IfExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1854
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(67), // terminator, reduce: IfExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1855
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			reduce(8), // terminator, reduce: BlockStatement
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			reduce(8), // kwdElse, reduce: BlockStatement
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1856
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(71), // terminator, reduce: ForExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1857
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(72), // terminator, reduce: ForExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1858
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1536), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1859
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(74), // terminator, reduce: ForExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1860
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1536), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1861
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1734), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1862
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1913), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1863
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			reduce(9), // terminator, reduce: BlockStatement
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			reduce(9), // lOr, reduce: BlockStatement
			reduce(9), // lAnd, reduce: BlockStatement
			reduce(9), // lNot, reduce: BlockStatement
			reduce(9), // equals, reduce: BlockStatement
			reduce(9), // lessOrGreater, reduce: BlockStatement
			reduce(9), // or, reduce: BlockStatement
			reduce(9), // xor, reduce: BlockStatement
			reduce(9), // and, reduce: BlockStatement
			reduce(9), // shift, reduce: BlockStatement
			reduce(9), // +, reduce: BlockStatement
			reduce(9), // -, reduce: BlockStatement
			reduce(9), // product, reduce: BlockStatement
			reduce(9), // (, reduce: BlockStatement
			nil,       // )
			nil,       // !
			nil,       // ~
			reduce(9), // [, reduce: BlockStatement
			nil,       // ]
			reduce(9), // ., reduce: BlockStatement
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1864
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(97), // terminator, reduce: FunctionLiteral
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			reduce(97), // lOr, reduce: FunctionLiteral
			reduce(97), // lAnd, reduce: FunctionLiteral
			reduce(97), // lNot, reduce: FunctionLiteral
			reduce(97), // equals, reduce: FunctionLiteral
			reduce(97), // lessOrGreater, reduce: FunctionLiteral
			reduce(97), // or, reduce: FunctionLiteral
			reduce(97), // xor, reduce: FunctionLiteral
			reduce(97), // and, reduce: FunctionLiteral
			reduce(97), // shift, reduce: FunctionLiteral
			reduce(97), // +, reduce: FunctionLiteral
			reduce(97), // -, reduce: FunctionLiteral
			reduce(97), // product, reduce: FunctionLiteral
			reduce(97), // (, reduce: FunctionLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(97), // [, reduce: FunctionLiteral
			nil,        // ]
			reduce(97), // ., reduce: FunctionLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1865
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(77), // $, reduce: ForExpression
			reduce(77), // terminator, reduce: ForExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1866
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(73), // terminator, reduce: ForExpression
			reduce(73), // {, reduce: ForExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1867
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(75), // terminator, reduce: ForExpression
			reduce(75), // {, reduce: ForExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1868
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(76), // terminator, reduce: ForExpression
			reduce(76), // {, reduce: ForExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1869
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1228), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1870
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			reduce(8), // terminator, reduce: BlockStatement
			reduce(8), // {, reduce: BlockStatement
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			reduce(8), // lOr, reduce: BlockStatement
			reduce(8), // lAnd, reduce: BlockStatement
			reduce(8), // lNot, reduce: BlockStatement
			reduce(8), // equals, reduce: BlockStatement
			reduce(8), // lessOrGreater, reduce: BlockStatement
			reduce(8), // or, reduce: BlockStatement
			reduce(8), // xor, reduce: BlockStatement
			reduce(8), // and, reduce: BlockStatement
			reduce(8), // shift, reduce: BlockStatement
			reduce(8), // +, reduce: BlockStatement
			reduce(8), // -, reduce: BlockStatement
			reduce(8), // product, reduce: BlockStatement
			reduce(8), // (, reduce: BlockStatement
			nil,       // )
			nil,       // !
			nil,       // ~
			reduce(8), // [, reduce: BlockStatement
			nil,       // ]
			reduce(8), // ., reduce: BlockStatement
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1871
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(73), // terminator, reduce: ForExpression
			nil,        // {
			reduce(73), // }, reduce: ForExpression
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1872
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(75), // terminator, reduce: ForExpression
			nil,        // {
			reduce(75), // }, reduce: ForExpression
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1873
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(76), // terminator, reduce: ForExpression
			nil,        // {
			reduce(76), // }, reduce: ForExpression
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1874
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1267), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1875
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			reduce(8), // terminator, reduce: BlockStatement
			nil,       // {
			reduce(8), // }, reduce: BlockStatement
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			reduce(8), // lOr, reduce: BlockStatement
			reduce(8), // lAnd, reduce: BlockStatement
			reduce(8), // lNot, reduce: BlockStatement
			reduce(8), // equals, reduce: BlockStatement
			reduce(8), // lessOrGreater, reduce: BlockStatement
			reduce(8), // or, reduce: BlockStatement
			reduce(8), // xor, reduce: BlockStatement
			reduce(8), // and, reduce: BlockStatement
			reduce(8), // shift, reduce: BlockStatement
			reduce(8), // +, reduce: BlockStatement
			reduce(8), // -, reduce: BlockStatement
			reduce(8), // product, reduce: BlockStatement
			reduce(8), // (, reduce: BlockStatement
			nil,       // )
			nil,       // !
			nil,       // ~
			reduce(8), // [, reduce: BlockStatement
			nil,       // ]
			reduce(8), // ., reduce: BlockStatement
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1876
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(58), // }, reduce: IndexExpression
			nil,        // kwdReturn
			reduce(58), // ,, reduce: IndexExpression
			nil,        // :
			reduce(58), // lOr, reduce: IndexExpression
			reduce(58), // lAnd, reduce: IndexExpression
			reduce(58), // lNot, reduce: IndexExpression
			reduce(58), // equals, reduce: IndexExpression
			reduce(58), // lessOrGreater, reduce: IndexExpression
			reduce(58), // or, reduce: IndexExpression
			reduce(58), // xor, reduce: IndexExpression
			reduce(58), // and, reduce: IndexExpression
			reduce(58), // shift, reduce: IndexExpression
			reduce(58), // +, reduce: IndexExpression
			reduce(58), // -, reduce: IndexExpression
			reduce(58), // product, reduce: IndexExpression
			reduce(58), // (, reduce: IndexExpression
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(58), // [, reduce: IndexExpression
			nil,        // ]
			reduce(58), // ., reduce: IndexExpression
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1877
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(66), // }, reduce: IfExpression
			nil,        // kwdReturn
			reduce(66), // ,, reduce: IfExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1878
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(67), // }, reduce: IfExpression
			nil,        // kwdReturn
			reduce(67), // ,, reduce: IfExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1879
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			reduce(8), // }, reduce: BlockStatement
			nil,       // kwdReturn
			reduce(8), // ,, reduce: BlockStatement
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			nil,       // (
			nil,       // )
			nil,       // !
			nil,       // ~
			nil,       // [
			nil,       // ]
			nil,       // .
			nil,       // assign
			nil,       // kwdIf
			reduce(8), // kwdElse, reduce: BlockStatement
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1880
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(71), // }, reduce: ForExpression
			nil,        // kwdReturn
			reduce(71), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1881
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(72), // }, reduce: ForExpression
			nil,        // kwdReturn
			reduce(72), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1882
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1613), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1883
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(74), // }, reduce: ForExpression
			nil,        // kwdReturn
			reduce(74), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1884
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1613), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1885
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1781), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			shift(23),   // +
			shift(25),   // -
			nil,         // product
			shift(251),  // (
			nil,         // )
			shift(31),   // !
			shift(32),   // ~
			shift(258),  // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			shift(260),  // kwdIf
			nil,         // kwdElse
			shift(261),  // kwdFor
			shift(263),  // identifier
			shift(272),  // kwdNull
			shift(273),  // boolLit
			shift(274),  // intLit
			shift(275),  // floatLit
			shift(276),  // stringLit
			shift(277),  // kwdFn
		},
	},
	actionRow{ // S1886
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			shift(327),  // terminator
			nil,         // {
			shift(1920), // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1887
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			reduce(9), // }, reduce: BlockStatement
			nil,       // kwdReturn
			reduce(9), // ,, reduce: BlockStatement
			nil,       // :
			reduce(9), // lOr, reduce: BlockStatement
			reduce(9), // lAnd, reduce: BlockStatement
			reduce(9), // lNot, reduce: BlockStatement
			reduce(9), // equals, reduce: BlockStatement
			reduce(9), // lessOrGreater, reduce: BlockStatement
			reduce(9), // or, reduce: BlockStatement
			reduce(9), // xor, reduce: BlockStatement
			reduce(9), // and, reduce: BlockStatement
			reduce(9), // shift, reduce: BlockStatement
			reduce(9), // +, reduce: BlockStatement
			reduce(9), // -, reduce: BlockStatement
			reduce(9), // product, reduce: BlockStatement
			reduce(9), // (, reduce: BlockStatement
			nil,       // )
			nil,       // !
			nil,       // ~
			reduce(9), // [, reduce: BlockStatement
			nil,       // ]
			reduce(9), // ., reduce: BlockStatement
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1888
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(97), // }, reduce: FunctionLiteral
			nil,        // kwdReturn
			reduce(97), // ,, reduce: FunctionLiteral
			nil,        // :
			reduce(97), // lOr, reduce: FunctionLiteral
			reduce(97), // lAnd, reduce: FunctionLiteral
			reduce(97), // lNot, reduce: FunctionLiteral
			reduce(97), // equals, reduce: FunctionLiteral
			reduce(97), // lessOrGreater, reduce: FunctionLiteral
			reduce(97), // or, reduce: FunctionLiteral
			reduce(97), // xor, reduce: FunctionLiteral
			reduce(97), // and, reduce: FunctionLiteral
			reduce(97), // shift, reduce: FunctionLiteral
			reduce(97), // +, reduce: FunctionLiteral
			reduce(97), // -, reduce: FunctionLiteral
			reduce(97), // product, reduce: FunctionLiteral
			reduce(97), // (, reduce: FunctionLiteral
			nil,        // )
			nil,        // !
			nil,        // ~
			reduce(97), // [, reduce: FunctionLiteral
			nil,        // ]
			reduce(97), // ., reduce: FunctionLiteral
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1889
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(77), // terminator, reduce: ForExpression
			nil,        // {
			reduce(77), // }, reduce: ForExpression
			nil,        // kwdReturn
			nil,        // ,
			reduce(77), // :, reduce: ForExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1890
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(73), // :, reduce: ForExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1891
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(75), // :, reduce: ForExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1892
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(76), // :, reduce: ForExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1893
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1357), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1894
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			reduce(8), // :, reduce: BlockStatement
			reduce(8), // lOr, reduce: BlockStatement
			reduce(8), // lAnd, reduce: BlockStatement
			reduce(8), // lNot, reduce: BlockStatement
			reduce(8), // equals, reduce: BlockStatement
			reduce(8), // lessOrGreater, reduce: BlockStatement
			reduce(8), // or, reduce: BlockStatement
			reduce(8), // xor, reduce: BlockStatement
			reduce(8), // and, reduce: BlockStatement
			reduce(8), // shift, reduce: BlockStatement
			reduce(8), // +, reduce: BlockStatement
			reduce(8), // -, reduce: BlockStatement
			reduce(8), // product, reduce: BlockStatement
			reduce(8), // (, reduce: BlockStatement
			nil,       // )
			nil,       // !
			nil,       // ~
			reduce(8), // [, reduce: BlockStatement
			nil,       // ]
			reduce(8), // ., reduce: BlockStatement
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1895
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(73), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(73), // ), reduce: ForExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1896
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(75), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(75), // ), reduce: ForExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1897
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(76), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(76), // ), reduce: ForExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1898
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1395), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1899
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			reduce(8), // ,, reduce: BlockStatement
			nil,       // :
			reduce(8), // lOr, reduce: BlockStatement
			reduce(8), // lAnd, reduce: BlockStatement
			reduce(8), // lNot, reduce: BlockStatement
			reduce(8), // equals, reduce: BlockStatement
			reduce(8), // lessOrGreater, reduce: BlockStatement
			reduce(8), // or, reduce: BlockStatement
			reduce(8), // xor, reduce: BlockStatement
			reduce(8), // and, reduce: BlockStatement
			reduce(8), // shift, reduce: BlockStatement
			reduce(8), // +, reduce: BlockStatement
			reduce(8), // -, reduce: BlockStatement
			reduce(8), // product, reduce: BlockStatement
			reduce(8), // (, reduce: BlockStatement
			reduce(8), // ), reduce: BlockStatement
			nil,       // !
			nil,       // ~
			reduce(8), // [, reduce: BlockStatement
			nil,       // ]
			reduce(8), // ., reduce: BlockStatement
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1900
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(73), // ], reduce: ForExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1901
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(75), // ], reduce: ForExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1902
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(76), // ], reduce: ForExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1903
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1432), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1904
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			reduce(8), // lOr, reduce: BlockStatement
			reduce(8), // lAnd, reduce: BlockStatement
			reduce(8), // lNot, reduce: BlockStatement
			reduce(8), // equals, reduce: BlockStatement
			reduce(8), // lessOrGreater, reduce: BlockStatement
			reduce(8), // or, reduce: BlockStatement
			reduce(8), // xor, reduce: BlockStatement
			reduce(8), // and, reduce: BlockStatement
			reduce(8), // shift, reduce: BlockStatement
			reduce(8), // +, reduce: BlockStatement
			reduce(8), // -, reduce: BlockStatement
			reduce(8), // product, reduce: BlockStatement
			reduce(8), // (, reduce: BlockStatement
			nil,       // )
			nil,       // !
			nil,       // ~
			reduce(8), // [, reduce: BlockStatement
			reduce(8), // ], reduce: BlockStatement
			reduce(8), // ., reduce: BlockStatement
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1905
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(77), // ), reduce: ForExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1906
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			nil,       // lOr
			nil,       // lAnd
			nil,       // lNot
			nil,       // equals
			nil,       // lessOrGreater
			nil,       // or
			nil,       // xor
			nil,       // and
			nil,       // shift
			nil,       // +
			nil,       // -
			nil,       // product
			reduce(8), // (, reduce: BlockStatement
			nil,       // )
			nil,       // !
			nil,       // ~
			reduce(8), // [, reduce: BlockStatement
			nil,       // ]
			reduce(8), // ., reduce: BlockStatement
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1907
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(77), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(77), // ], reduce: ForExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1908
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			reduce(77), // {, reduce: ForExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1909
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(73), // terminator, reduce: ForExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1910
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(75), // terminator, reduce: ForExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1911
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(76), // terminator, reduce: ForExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1912
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1536), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1913
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			reduce(8), // terminator, reduce: BlockStatement
			nil,       // {
			nil,       // }
			nil,       // kwdReturn
			nil,       // ,
			nil,       // :
			reduce(8), // lOr, reduce: BlockStatement
			reduce(8), // lAnd, reduce: BlockStatement
			reduce(8), // lNot, reduce: BlockStatement
			reduce(8), // equals, reduce: BlockStatement
			reduce(8), // lessOrGreater, reduce: BlockStatement
			reduce(8), // or, reduce: BlockStatement
			reduce(8), // xor, reduce: BlockStatement
			reduce(8), // and, reduce: BlockStatement
			reduce(8), // shift, reduce: BlockStatement
			reduce(8), // +, reduce: BlockStatement
			reduce(8), // -, reduce: BlockStatement
			reduce(8), // product, reduce: BlockStatement
			reduce(8), // (, reduce: BlockStatement
			nil,       // )
			nil,       // !
			nil,       // ~
			reduce(8), // [, reduce: BlockStatement
			nil,       // ]
			reduce(8), // ., reduce: BlockStatement
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1914
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(77), // terminator, reduce: ForExpression
			reduce(77), // {, reduce: ForExpression
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1915
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(77), // terminator, reduce: ForExpression
			nil,        // {
			reduce(77), // }, reduce: ForExpression
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1916
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(73), // }, reduce: ForExpression
			nil,        // kwdReturn
			reduce(73), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1917
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(75), // }, reduce: ForExpression
			nil,        // kwdReturn
			reduce(75), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1918
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(76), // }, reduce: ForExpression
			nil,        // kwdReturn
			reduce(76), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1919
		canRecover: false,
		actions: [numSymbols]action{
			nil,         // INVALID
			nil,         // $
			nil,         // terminator
			shift(1613), // {
			nil,         // }
			nil,         // kwdReturn
			nil,         // ,
			nil,         // :
			nil,         // lOr
			nil,         // lAnd
			nil,         // lNot
			nil,         // equals
			nil,         // lessOrGreater
			nil,         // or
			nil,         // xor
			nil,         // and
			nil,         // shift
			nil,         // +
			nil,         // -
			nil,         // product
			nil,         // (
			nil,         // )
			nil,         // !
			nil,         // ~
			nil,         // [
			nil,         // ]
			nil,         // .
			nil,         // assign
			nil,         // kwdIf
			nil,         // kwdElse
			nil,         // kwdFor
			nil,         // identifier
			nil,         // kwdNull
			nil,         // boolLit
			nil,         // intLit
			nil,         // floatLit
			nil,         // stringLit
			nil,         // kwdFn
		},
	},
	actionRow{ // S1920
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // terminator
			nil,       // {
			reduce(8), // }, reduce: BlockStatement
			nil,       // kwdReturn
			reduce(8), // ,, reduce: BlockStatement
			nil,       // :
			reduce(8), // lOr, reduce: BlockStatement
			reduce(8), // lAnd, reduce: BlockStatement
			reduce(8), // lNot, reduce: BlockStatement
			reduce(8), // equals, reduce: BlockStatement
			reduce(8), // lessOrGreater, reduce: BlockStatement
			reduce(8), // or, reduce: BlockStatement
			reduce(8), // xor, reduce: BlockStatement
			reduce(8), // and, reduce: BlockStatement
			reduce(8), // shift, reduce: BlockStatement
			reduce(8), // +, reduce: BlockStatement
			reduce(8), // -, reduce: BlockStatement
			reduce(8), // product, reduce: BlockStatement
			reduce(8), // (, reduce: BlockStatement
			nil,       // )
			nil,       // !
			nil,       // ~
			reduce(8), // [, reduce: BlockStatement
			nil,       // ]
			reduce(8), // ., reduce: BlockStatement
			nil,       // assign
			nil,       // kwdIf
			nil,       // kwdElse
			nil,       // kwdFor
			nil,       // identifier
			nil,       // kwdNull
			nil,       // boolLit
			nil,       // intLit
			nil,       // floatLit
			nil,       // stringLit
			nil,       // kwdFn
		},
	},
	actionRow{ // S1921
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			reduce(77), // :, reduce: ForExpression
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1922
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			reduce(77), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			reduce(77), // ), reduce: ForExpression
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1923
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			reduce(77), // ], reduce: ForExpression
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1924
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			reduce(77), // terminator, reduce: ForExpression
			nil,        // {
			nil,        // }
			nil,        // kwdReturn
			nil,        // ,
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
	actionRow{ // S1925
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // terminator
			nil,        // {
			reduce(77), // }, reduce: ForExpression
			nil,        // kwdReturn
			reduce(77), // ,, reduce: ForExpression
			nil,        // :
			nil,        // lOr
			nil,        // lAnd
			nil,        // lNot
			nil,        // equals
			nil,        // lessOrGreater
			nil,        // or
			nil,        // xor
			nil,        // and
			nil,        // shift
			nil,        // +
			nil,        // -
			nil,        // product
			nil,        // (
			nil,        // )
			nil,        // !
			nil,        // ~
			nil,        // [
			nil,        // ]
			nil,        // .
			nil,        // assign
			nil,        // kwdIf
			nil,        // kwdElse
			nil,        // kwdFor
			nil,        // identifier
			nil,        // kwdNull
			nil,        // boolLit
			nil,        // intLit
			nil,        // floatLit
			nil,        // stringLit
			nil,        // kwdFn
		},
	},
}
