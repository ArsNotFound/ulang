// Code generated by gocc; DO NOT EDIT.

package parser

import (
	"github.com/Ars2014/ulang/ast"
	"github.com/Ars2014/ulang/token"
)

type (
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib, interface{}) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Program	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Program : StatementList	<< ast.NewProgram(X[0].(ast.StatementList)) >>`,
		Id:         "Program",
		NTType:     1,
		Index:      1,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewProgram(X[0].(ast.StatementList))
		},
	},
	ProdTabEntry{
		String: `StatementList : Statement	<< ast.NewStatementList(X[0].(ast.Statement)) >>`,
		Id:         "StatementList",
		NTType:     2,
		Index:      2,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewStatementList(X[0].(ast.Statement))
		},
	},
	ProdTabEntry{
		String: `StatementList : StatementList terminator Statement	<< ast.AppendStatement(X[0].(ast.StatementList), X[2].(ast.Statement)) >>`,
		Id:         "StatementList",
		NTType:     2,
		Index:      3,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendStatement(X[0].(ast.StatementList), X[2].(ast.Statement))
		},
	},
	ProdTabEntry{
		String: `StatementList : StatementList terminator	<< X[0], nil >>`,
		Id:         "StatementList",
		NTType:     2,
		Index:      4,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : BlockStatement	<<  >>`,
		Id:         "Statement",
		NTType:     3,
		Index:      5,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : ReturnStatement	<<  >>`,
		Id:         "Statement",
		NTType:     3,
		Index:      6,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : ExpressionStatement	<<  >>`,
		Id:         "Statement",
		NTType:     3,
		Index:      7,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BlockStatement : "{" StatementList "}"	<< ast.NewBlockStatement(X[0].(*token.Token), X[1].(ast.StatementList)) >>`,
		Id:         "BlockStatement",
		NTType:     4,
		Index:      8,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewBlockStatement(X[0].(*token.Token), X[1].(ast.StatementList))
		},
	},
	ProdTabEntry{
		String: `BlockStatement : "{" "}"	<< ast.NewBlockStatement(X[0].(*token.Token), ast.StatementList{}) >>`,
		Id:         "BlockStatement",
		NTType:     4,
		Index:      9,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewBlockStatement(X[0].(*token.Token), ast.StatementList{})
		},
	},
	ProdTabEntry{
		String: `ReturnStatement : kwdReturn	<< ast.NewReturnStatement(X[0].(*token.Token), nil) >>`,
		Id:         "ReturnStatement",
		NTType:     5,
		Index:      10,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewReturnStatement(X[0].(*token.Token), nil)
		},
	},
	ProdTabEntry{
		String: `ReturnStatement : kwdReturn Expression	<< ast.NewReturnStatement(X[0].(*token.Token), X[1].(ast.Expression)) >>`,
		Id:         "ReturnStatement",
		NTType:     5,
		Index:      11,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewReturnStatement(X[0].(*token.Token), X[1].(ast.Expression))
		},
	},
	ProdTabEntry{
		String: `ExpressionStatement : Expression	<< ast.NewExpressionStatement(X[0].(ast.Expression)) >>`,
		Id:         "ExpressionStatement",
		NTType:     6,
		Index:      12,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewExpressionStatement(X[0].(ast.Expression))
		},
	},
	ProdTabEntry{
		String: `ExpressionList : Expression	<< ast.NewExpressionList(X[0].(ast.Expression)) >>`,
		Id:         "ExpressionList",
		NTType:     7,
		Index:      13,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewExpressionList(X[0].(ast.Expression))
		},
	},
	ProdTabEntry{
		String: `ExpressionList : ExpressionList "," Expression	<< ast.AppendExpression(X[0].(ast.ExpressionList), X[2].(ast.Expression)) >>`,
		Id:         "ExpressionList",
		NTType:     7,
		Index:      14,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendExpression(X[0].(ast.ExpressionList), X[2].(ast.Expression))
		},
	},
	ProdTabEntry{
		String: `ExpressionList : ExpressionList ","	<< X[0], nil >>`,
		Id:         "ExpressionList",
		NTType:     7,
		Index:      15,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ExpressionMap : Expression ":" Expression	<< ast.NewExpressionMap(X[0].(ast.Expression), X[2].(ast.Expression)) >>`,
		Id:         "ExpressionMap",
		NTType:     8,
		Index:      16,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewExpressionMap(X[0].(ast.Expression), X[2].(ast.Expression))
		},
	},
	ProdTabEntry{
		String: `ExpressionMap : ExpressionMap "," Expression ":" Expression	<< ast.AppendExpressionPair(X[0].(ast.ExpressionMap), X[2].(ast.Expression), X[4].(ast.Expression)) >>`,
		Id:         "ExpressionMap",
		NTType:     8,
		Index:      17,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendExpressionPair(X[0].(ast.ExpressionMap), X[2].(ast.Expression), X[4].(ast.Expression))
		},
	},
	ProdTabEntry{
		String: `ExpressionMap : ExpressionMap ","	<< X[0], nil >>`,
		Id:         "ExpressionMap",
		NTType:     8,
		Index:      18,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Expression : Term1	<<  >>`,
		Id:         "Expression",
		NTType:     9,
		Index:      19,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Expression : IfExpression	<<  >>`,
		Id:         "Expression",
		NTType:     9,
		Index:      20,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Expression : ForExpression	<<  >>`,
		Id:         "Expression",
		NTType:     9,
		Index:      21,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Expression : AssignExpression	<<  >>`,
		Id:         "Expression",
		NTType:     9,
		Index:      22,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Term1 : Term1 lOr Term2	<< ast.NewInfixExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression)) >>`,
		Id:         "Term1",
		NTType:     10,
		Index:      23,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewInfixExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression))
		},
	},
	ProdTabEntry{
		String: `Term1 : Term2	<<  >>`,
		Id:         "Term1",
		NTType:     10,
		Index:      24,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Term2 : Term2 lAnd Term3	<< ast.NewInfixExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression)) >>`,
		Id:         "Term2",
		NTType:     11,
		Index:      25,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewInfixExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression))
		},
	},
	ProdTabEntry{
		String: `Term2 : Term3	<<  >>`,
		Id:         "Term2",
		NTType:     11,
		Index:      26,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Term3 : Term3 lNot Term4	<< ast.NewInfixExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression)) >>`,
		Id:         "Term3",
		NTType:     12,
		Index:      27,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewInfixExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression))
		},
	},
	ProdTabEntry{
		String: `Term3 : Term4	<<  >>`,
		Id:         "Term3",
		NTType:     12,
		Index:      28,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Term4 : Term4 equals Term5	<< ast.NewInfixExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression)) >>`,
		Id:         "Term4",
		NTType:     13,
		Index:      29,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewInfixExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression))
		},
	},
	ProdTabEntry{
		String: `Term4 : Term5	<<  >>`,
		Id:         "Term4",
		NTType:     13,
		Index:      30,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Term5 : Term5 lessOrGreater Term6	<< ast.NewInfixExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression)) >>`,
		Id:         "Term5",
		NTType:     14,
		Index:      31,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewInfixExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression))
		},
	},
	ProdTabEntry{
		String: `Term5 : Term6	<<  >>`,
		Id:         "Term5",
		NTType:     14,
		Index:      32,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Term6 : Term6 or Term7	<< ast.NewInfixExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression)) >>`,
		Id:         "Term6",
		NTType:     15,
		Index:      33,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewInfixExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression))
		},
	},
	ProdTabEntry{
		String: `Term6 : Term7	<<  >>`,
		Id:         "Term6",
		NTType:     15,
		Index:      34,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Term7 : Term7 xor Term8	<< ast.NewInfixExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression)) >>`,
		Id:         "Term7",
		NTType:     16,
		Index:      35,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewInfixExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression))
		},
	},
	ProdTabEntry{
		String: `Term7 : Term8	<<  >>`,
		Id:         "Term7",
		NTType:     16,
		Index:      36,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Term8 : Term8 and Term9	<< ast.NewInfixExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression)) >>`,
		Id:         "Term8",
		NTType:     17,
		Index:      37,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewInfixExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression))
		},
	},
	ProdTabEntry{
		String: `Term8 : Term9	<<  >>`,
		Id:         "Term8",
		NTType:     17,
		Index:      38,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Term9 : Term9 shift Term10	<< ast.NewInfixExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression)) >>`,
		Id:         "Term9",
		NTType:     18,
		Index:      39,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewInfixExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression))
		},
	},
	ProdTabEntry{
		String: `Term9 : Term10	<<  >>`,
		Id:         "Term9",
		NTType:     18,
		Index:      40,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Term10 : Term10 "+" Term11	<< ast.NewInfixExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression)) >>`,
		Id:         "Term10",
		NTType:     19,
		Index:      41,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewInfixExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression))
		},
	},
	ProdTabEntry{
		String: `Term10 : Term10 "-" Term11	<< ast.NewInfixExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression)) >>`,
		Id:         "Term10",
		NTType:     19,
		Index:      42,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewInfixExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression))
		},
	},
	ProdTabEntry{
		String: `Term10 : Term11	<<  >>`,
		Id:         "Term10",
		NTType:     19,
		Index:      43,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Term11 : Term11 product Term12	<< ast.NewInfixExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression)) >>`,
		Id:         "Term11",
		NTType:     20,
		Index:      44,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewInfixExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression))
		},
	},
	ProdTabEntry{
		String: `Term11 : Term12	<<  >>`,
		Id:         "Term11",
		NTType:     20,
		Index:      45,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Term12 : PrefixExpression	<<  >>`,
		Id:         "Term12",
		NTType:     21,
		Index:      46,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Term12 : "(" Expression ")"	<< X[1], nil >>`,
		Id:         "Term12",
		NTType:     21,
		Index:      47,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `PrefixExpression : PrimaryExpr	<<  >>`,
		Id:         "PrefixExpression",
		NTType:     22,
		Index:      48,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PrefixExpression : PrefixOp PrimaryExpr	<< ast.NewPrefixExpression(X[0].(*token.Token), X[1].(ast.Expression)) >>`,
		Id:         "PrefixExpression",
		NTType:     22,
		Index:      49,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewPrefixExpression(X[0].(*token.Token), X[1].(ast.Expression))
		},
	},
	ProdTabEntry{
		String: `PrefixOp : "+"	<<  >>`,
		Id:         "PrefixOp",
		NTType:     23,
		Index:      50,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PrefixOp : "-"	<<  >>`,
		Id:         "PrefixOp",
		NTType:     23,
		Index:      51,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PrefixOp : "!"	<<  >>`,
		Id:         "PrefixOp",
		NTType:     23,
		Index:      52,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PrefixOp : "~"	<<  >>`,
		Id:         "PrefixOp",
		NTType:     23,
		Index:      53,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PrimaryExpr : Operand	<<  >>`,
		Id:         "PrimaryExpr",
		NTType:     24,
		Index:      54,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PrimaryExpr : IndexExpression	<<  >>`,
		Id:         "PrimaryExpr",
		NTType:     24,
		Index:      55,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PrimaryExpr : CallExpression	<<  >>`,
		Id:         "PrimaryExpr",
		NTType:     24,
		Index:      56,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PrimaryExpr : SelectorExpression	<<  >>`,
		Id:         "PrimaryExpr",
		NTType:     24,
		Index:      57,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `IndexExpression : Term12 "[" Expression "]"	<< ast.NewIndexExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression)) >>`,
		Id:         "IndexExpression",
		NTType:     25,
		Index:      58,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewIndexExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression))
		},
	},
	ProdTabEntry{
		String: `CallExpression : Term12 "(" ")"	<< ast.NewCallExpression(X[0].(ast.Expression), X[1].(*token.Token), nil) >>`,
		Id:         "CallExpression",
		NTType:     26,
		Index:      59,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewCallExpression(X[0].(ast.Expression), X[1].(*token.Token), nil)
		},
	},
	ProdTabEntry{
		String: `CallExpression : Term12 "(" ExpressionList ")"	<< ast.NewCallExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.ExpressionList)) >>`,
		Id:         "CallExpression",
		NTType:     26,
		Index:      60,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewCallExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.ExpressionList))
		},
	},
	ProdTabEntry{
		String: `SelectorExpression : Term12 "." Identifier	<< ast.NewSelectorExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(*ast.Identifier)) >>`,
		Id:         "SelectorExpression",
		NTType:     27,
		Index:      61,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewSelectorExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(*ast.Identifier))
		},
	},
	ProdTabEntry{
		String: `AssignExpression : Identifier assign Expression	<< ast.NewAssignExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression)) >>`,
		Id:         "AssignExpression",
		NTType:     28,
		Index:      62,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewAssignExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression))
		},
	},
	ProdTabEntry{
		String: `AssignExpression : IndexExpression assign Expression	<< ast.NewAssignExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression)) >>`,
		Id:         "AssignExpression",
		NTType:     28,
		Index:      63,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewAssignExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression))
		},
	},
	ProdTabEntry{
		String: `AssignExpression : SelectorExpression assign Expression	<< ast.NewAssignExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression)) >>`,
		Id:         "AssignExpression",
		NTType:     28,
		Index:      64,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewAssignExpression(X[0].(ast.Expression), X[1].(*token.Token), X[2].(ast.Expression))
		},
	},
	ProdTabEntry{
		String: `IfExpression : kwdIf Expression BlockStatement	<< ast.NewIfExpression(X[0].(*token.Token), X[1].(ast.Expression), X[2].(*ast.BlockStatement), nil) >>`,
		Id:         "IfExpression",
		NTType:     29,
		Index:      65,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewIfExpression(X[0].(*token.Token), X[1].(ast.Expression), X[2].(*ast.BlockStatement), nil)
		},
	},
	ProdTabEntry{
		String: `IfExpression : kwdIf Expression BlockStatement kwdElse BlockStatement	<< ast.NewIfExpression(X[0].(*token.Token), X[1].(ast.Expression), X[2].(*ast.BlockStatement), X[4].(*ast.BlockStatement)) >>`,
		Id:         "IfExpression",
		NTType:     29,
		Index:      66,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewIfExpression(X[0].(*token.Token), X[1].(ast.Expression), X[2].(*ast.BlockStatement), X[4].(*ast.BlockStatement))
		},
	},
	ProdTabEntry{
		String: `IfExpression : kwdIf Expression BlockStatement kwdElse IfExpression	<< ast.NewIfExpression(X[0].(*token.Token), X[1].(ast.Expression), X[2].(*ast.BlockStatement), &ast.BlockStatement{Statements: ast.StatementList{ &ast.ExpressionStatement { Expression: X[4].(*ast.IfExpression) } }}) >>`,
		Id:         "IfExpression",
		NTType:     29,
		Index:      67,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewIfExpression(X[0].(*token.Token), X[1].(ast.Expression), X[2].(*ast.BlockStatement), &ast.BlockStatement{Statements: ast.StatementList{&ast.ExpressionStatement{Expression: X[4].(*ast.IfExpression)}}})
		},
	},
	ProdTabEntry{
		String: `ForExpression : kwdFor BlockStatement	<< ast.NewForExpression(X[0].(*token.Token), nil, nil, nil, X[1].(*ast.BlockStatement)) >>`,
		Id:         "ForExpression",
		NTType:     30,
		Index:      68,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewForExpression(X[0].(*token.Token), nil, nil, nil, X[1].(*ast.BlockStatement))
		},
	},
	ProdTabEntry{
		String: `ForExpression : kwdFor Expression BlockStatement	<< ast.NewForExpression(X[0].(*token.Token), nil, X[1].(ast.Expression), nil, X[2].(*ast.BlockStatement)) >>`,
		Id:         "ForExpression",
		NTType:     30,
		Index:      69,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewForExpression(X[0].(*token.Token), nil, X[1].(ast.Expression), nil, X[2].(*ast.BlockStatement))
		},
	},
	ProdTabEntry{
		String: `ForExpression : kwdFor terminator terminator BlockStatement	<< ast.NewForExpression(X[0].(*token.Token), nil, nil, nil, X[3].(*ast.BlockStatement)) >>`,
		Id:         "ForExpression",
		NTType:     30,
		Index:      70,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewForExpression(X[0].(*token.Token), nil, nil, nil, X[3].(*ast.BlockStatement))
		},
	},
	ProdTabEntry{
		String: `ForExpression : kwdFor terminator terminator Expression BlockStatement	<< ast.NewForExpression(X[0].(*token.Token), nil, nil, X[3].(ast.Expression), X[4].(*ast.BlockStatement)) >>`,
		Id:         "ForExpression",
		NTType:     30,
		Index:      71,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewForExpression(X[0].(*token.Token), nil, nil, X[3].(ast.Expression), X[4].(*ast.BlockStatement))
		},
	},
	ProdTabEntry{
		String: `ForExpression : kwdFor terminator Expression terminator BlockStatement	<< ast.NewForExpression(X[0].(*token.Token), nil, X[2].(ast.Expression), nil, X[4].(*ast.BlockStatement)) >>`,
		Id:         "ForExpression",
		NTType:     30,
		Index:      72,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewForExpression(X[0].(*token.Token), nil, X[2].(ast.Expression), nil, X[4].(*ast.BlockStatement))
		},
	},
	ProdTabEntry{
		String: `ForExpression : kwdFor terminator Expression terminator Expression BlockStatement	<< ast.NewForExpression(X[0].(*token.Token), nil, X[2].(ast.Expression), X[4].(ast.Expression), X[5].(*ast.BlockStatement)) >>`,
		Id:         "ForExpression",
		NTType:     30,
		Index:      73,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewForExpression(X[0].(*token.Token), nil, X[2].(ast.Expression), X[4].(ast.Expression), X[5].(*ast.BlockStatement))
		},
	},
	ProdTabEntry{
		String: `ForExpression : kwdFor Expression terminator terminator BlockStatement	<< ast.NewForExpression(X[0].(*token.Token), X[1].(ast.Expression), nil, nil, X[4].(*ast.BlockStatement)) >>`,
		Id:         "ForExpression",
		NTType:     30,
		Index:      74,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewForExpression(X[0].(*token.Token), X[1].(ast.Expression), nil, nil, X[4].(*ast.BlockStatement))
		},
	},
	ProdTabEntry{
		String: `ForExpression : kwdFor Expression terminator terminator Expression BlockStatement	<< ast.NewForExpression(X[0].(*token.Token), X[1].(ast.Expression), nil, X[4].(ast.Expression), X[5].(*ast.BlockStatement)) >>`,
		Id:         "ForExpression",
		NTType:     30,
		Index:      75,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewForExpression(X[0].(*token.Token), X[1].(ast.Expression), nil, X[4].(ast.Expression), X[5].(*ast.BlockStatement))
		},
	},
	ProdTabEntry{
		String: `ForExpression : kwdFor Expression terminator Expression terminator BlockStatement	<< ast.NewForExpression(X[0].(*token.Token), X[1].(ast.Expression), X[3].(ast.Expression), nil, X[5].(*ast.BlockStatement)) >>`,
		Id:         "ForExpression",
		NTType:     30,
		Index:      76,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewForExpression(X[0].(*token.Token), X[1].(ast.Expression), X[3].(ast.Expression), nil, X[5].(*ast.BlockStatement))
		},
	},
	ProdTabEntry{
		String: `ForExpression : kwdFor Expression terminator Expression terminator Expression BlockStatement	<< ast.NewForExpression(X[0].(*token.Token), X[1].(ast.Expression), X[3].(ast.Expression), X[5].(ast.Expression), X[6].(*ast.BlockStatement)) >>`,
		Id:         "ForExpression",
		NTType:     30,
		Index:      77,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewForExpression(X[0].(*token.Token), X[1].(ast.Expression), X[3].(ast.Expression), X[5].(ast.Expression), X[6].(*ast.BlockStatement))
		},
	},
	ProdTabEntry{
		String: `Operand : Literal	<<  >>`,
		Id:         "Operand",
		NTType:     31,
		Index:      78,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Operand : Identifier	<<  >>`,
		Id:         "Operand",
		NTType:     31,
		Index:      79,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `IdentifierList : Identifier	<< ast.NewIdentifierList(X[0].(*ast.Identifier)) >>`,
		Id:         "IdentifierList",
		NTType:     32,
		Index:      80,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewIdentifierList(X[0].(*ast.Identifier))
		},
	},
	ProdTabEntry{
		String: `IdentifierList : IdentifierList "," Identifier	<< ast.AppendIdentifier(X[0].(ast.IdentifierList), X[2].(*ast.Identifier)) >>`,
		Id:         "IdentifierList",
		NTType:     32,
		Index:      81,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendIdentifier(X[0].(ast.IdentifierList), X[2].(*ast.Identifier))
		},
	},
	ProdTabEntry{
		String: `Identifier : identifier	<< ast.NewIdentifier(X[0].(*token.Token)) >>`,
		Id:         "Identifier",
		NTType:     33,
		Index:      82,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewIdentifier(X[0].(*token.Token))
		},
	},
	ProdTabEntry{
		String: `Literal : Null	<<  >>`,
		Id:         "Literal",
		NTType:     34,
		Index:      83,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Literal : BooleanLiteral	<<  >>`,
		Id:         "Literal",
		NTType:     34,
		Index:      84,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Literal : IntegerLiteral	<<  >>`,
		Id:         "Literal",
		NTType:     34,
		Index:      85,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Literal : FloatLiteral	<<  >>`,
		Id:         "Literal",
		NTType:     34,
		Index:      86,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Literal : StringLiteral	<<  >>`,
		Id:         "Literal",
		NTType:     34,
		Index:      87,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Literal : FunctionLiteral	<<  >>`,
		Id:         "Literal",
		NTType:     34,
		Index:      88,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Literal : ArrayLiteral	<<  >>`,
		Id:         "Literal",
		NTType:     34,
		Index:      89,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Literal : HashLiteral	<<  >>`,
		Id:         "Literal",
		NTType:     34,
		Index:      90,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Null : kwdNull	<< ast.NewNull(X[0].(*token.Token)) >>`,
		Id:         "Null",
		NTType:     35,
		Index:      91,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNull(X[0].(*token.Token))
		},
	},
	ProdTabEntry{
		String: `BooleanLiteral : boolLit	<< ast.NewBooleanLiteral(X[0].(*token.Token)) >>`,
		Id:         "BooleanLiteral",
		NTType:     36,
		Index:      92,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewBooleanLiteral(X[0].(*token.Token))
		},
	},
	ProdTabEntry{
		String: `IntegerLiteral : intLit	<< ast.NewIntegerLiteral(X[0].(*token.Token)) >>`,
		Id:         "IntegerLiteral",
		NTType:     37,
		Index:      93,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewIntegerLiteral(X[0].(*token.Token))
		},
	},
	ProdTabEntry{
		String: `FloatLiteral : floatLit	<< ast.NewFloatLiteral(X[0].(*token.Token)) >>`,
		Id:         "FloatLiteral",
		NTType:     38,
		Index:      94,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewFloatLiteral(X[0].(*token.Token))
		},
	},
	ProdTabEntry{
		String: `StringLiteral : stringLit	<< ast.NewStringLiteral(X[0].(*token.Token)) >>`,
		Id:         "StringLiteral",
		NTType:     39,
		Index:      95,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewStringLiteral(X[0].(*token.Token))
		},
	},
	ProdTabEntry{
		String: `FunctionLiteral : kwdFn "(" ")" BlockStatement	<< ast.NewFunctionLiteral(X[0].(*token.Token), nil, X[3].(*ast.BlockStatement)) >>`,
		Id:         "FunctionLiteral",
		NTType:     40,
		Index:      96,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewFunctionLiteral(X[0].(*token.Token), nil, X[3].(*ast.BlockStatement))
		},
	},
	ProdTabEntry{
		String: `FunctionLiteral : kwdFn "(" IdentifierList ")" BlockStatement	<< ast.NewFunctionLiteral(X[0].(*token.Token), X[2].(ast.IdentifierList), X[4].(*ast.BlockStatement)) >>`,
		Id:         "FunctionLiteral",
		NTType:     40,
		Index:      97,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewFunctionLiteral(X[0].(*token.Token), X[2].(ast.IdentifierList), X[4].(*ast.BlockStatement))
		},
	},
	ProdTabEntry{
		String: `ArrayLiteral : "[" "]"	<< ast.NewArrayLiteral(X[0].(*token.Token), nil) >>`,
		Id:         "ArrayLiteral",
		NTType:     41,
		Index:      98,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewArrayLiteral(X[0].(*token.Token), nil)
		},
	},
	ProdTabEntry{
		String: `ArrayLiteral : "[" ExpressionList "]"	<< ast.NewArrayLiteral(X[0].(*token.Token), X[1].(ast.ExpressionList)) >>`,
		Id:         "ArrayLiteral",
		NTType:     41,
		Index:      99,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewArrayLiteral(X[0].(*token.Token), X[1].(ast.ExpressionList))
		},
	},
	ProdTabEntry{
		String: `HashLiteral : "{" "," "}"	<< ast.NewHashLiteral(X[0].(*token.Token), nil) >>`,
		Id:         "HashLiteral",
		NTType:     42,
		Index:      100,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewHashLiteral(X[0].(*token.Token), nil)
		},
	},
	ProdTabEntry{
		String: `HashLiteral : "{" ExpressionMap "}"	<< ast.NewHashLiteral(X[0].(*token.Token), X[1].(ast.ExpressionMap)) >>`,
		Id:         "HashLiteral",
		NTType:     42,
		Index:      101,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewHashLiteral(X[0].(*token.Token), X[1].(ast.ExpressionMap))
		},
	},
}
